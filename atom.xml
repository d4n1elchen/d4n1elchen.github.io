<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Daniel Chen&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.danielchen.cc/"/>
  <updated>2021-08-11T00:36:31.518Z</updated>
  <id>https://blog.danielchen.cc/</id>
  
  <author>
    <name>Daniel Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ADD vs COPY in Dockerfile</title>
    <link href="https://blog.danielchen.cc/2021/08/09/ADD-vs-COPY-in-Dockerfile/"/>
    <id>https://blog.danielchen.cc/2021/08/09/ADD-vs-COPY-in-Dockerfile/</id>
    <published>2021-08-09T22:06:48.000Z</published>
    <updated>2021-08-11T00:36:31.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>忘了 <code>ADD</code>，使用 <code>COPY</code> 吧。</p><p>根據官方的 <a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#add-or-copy" target="_blank" rel="noopener">Best practices for writing Dockerfiles</a>，<code>ADD</code> 和 <code>COPY</code> 基本上一樣，除了 <code>ADD</code> 提供了一些黑魔法，但基本上這些黑魔法都有其他的方法可以替代，而且 <code>ADD</code> 的這些額外的功能會造成執行結果難以直觀的預期，因此官方建議不要用 <code>ADD</code>。</p><h2 id="ADD-and-COPY"><a href="#ADD-and-COPY" class="headerlink" title="ADD and COPY"></a><code>ADD</code> and <code>COPY</code></h2><p>語法</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt; &lt;dest&gt;</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash">  [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt; &lt;dest&gt;</span></span><br></pre></td></tr></table></figure><p><code>ADD</code> 跟 <code>COPY</code> 基本的功能就是將檔案從 host 複製到 container 中，這個部分的功能是完全一樣的，並且支援 Go 的 <a href="https://pkg.go.dev/path/filepath#Match" target="_blank" rel="noopener">filepath.Match</a> 的路徑語法，幾個常用的例子例如</p><h3 id="配對任意數量的任意字元"><a href="#配對任意數量的任意字元" class="headerlink" title="* - 配對任意數量的任意字元"></a><code>*</code> - 配對任意數量的任意字元</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> hom* /mydir/</span></span><br></pre></td></tr></table></figure><p>配對所有 <code>hom</code> 開頭的檔案如 <code>home.txt</code> <code>homogeneous.zip</code></p><h3 id="配對單一任意字元"><a href="#配對單一任意字元" class="headerlink" title="? - 配對單一任意字元"></a><code>?</code> - 配對單一任意字元</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> hom?.txt /midir/</span></span><br></pre></td></tr></table></figure><p>配對如 <code>home.txt</code> <code>homy.txt</code></p><h2 id="ADD-黑魔法"><a href="#ADD-黑魔法" class="headerlink" title="ADD 黑魔法"></a><code>ADD</code> 黑魔法</h2><p><code>ADD</code> 主要多了兩個功能：遠端下載、自動解壓縮</p><h3 id="遠端下載"><a href="#遠端下載" class="headerlink" title="遠端下載"></a>遠端下載</h3><p><code>ADD &lt;src&gt; &lt;dest&gt;</code> 中如果 <code>&lt;src&gt;</code> 是個遠端網址的話 <code>ADD</code> 指令會自動幫你下載檔案，例如</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> https://example.com/big.tar.xz /usr/src/things/</span></span><br></pre></td></tr></table></figure><h3 id="自動解壓"><a href="#自動解壓" class="headerlink" title="自動解壓"></a>自動解壓</h3><p>如果 <code>&lt;src&gt;</code> 是個<strong>本地</strong>的 tar 壓縮檔案的話，<code>ADD</code> 會自動幫你解壓縮，例如</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> foo.tar.gz /foo/</span></span><br></pre></td></tr></table></figure><p>支援的格式有 <code>gzip, bzip2, xz</code>。</p><p>但這兩個功能是不能混用的，也就是說遠端下載的例子中的 <code>big.tar.xz</code> 是不會自動解壓縮的。</p><p>也就因為這些細部的功能如果一開始不知道的話很難直覺判斷執行解果，因此官方並不建議使用，如果想要從遠端下載檔案並解壓的話，可以用 <code>curl</code> 或 <code>wget</code> 搭配 <code>tar -x</code> 指令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /usr/src/things \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -SL https://example.com/big.tar.xz \</span></span><br><span class="line"><span class="bash">    | tar -xJC /usr/src/things \</span></span><br><span class="line"><span class="bash">    &amp;&amp; make -C /usr/src/things all</span></span><br></pre></td></tr></table></figure><h2 id="其他小細節"><a href="#其他小細節" class="headerlink" title="其他小細節"></a>其他小細節</h2><p>以下這些特性是兩者都有的</p><ul><li><code>&lt;dest&gt;</code> 若為相對路徑，會以 <code>WORKDIR</code> 指令所指向的位置為起始點。</li><li><code>&lt;src&gt;</code> 必須要在 build context 裡面，因此 <code>COPY ../sth /sth</code> 是無效的，如果你沒有使用 Dockerfile 而是使用 STDIN 來輸入的話 (<code>docker build - &lt; somefile</code>) 因為沒有 build context 所以 <code>COPY</code> 和 <code>ADD</code> 都是不能使用的。</li><li><code>&lt;dest&gt;</code> 如果結尾有 <code>/</code> 且位置不存在的話，會自動建立資料夾，但如果不是 <code>/</code> 結尾則會當作檔案寫入。</li><li><code>&lt;src&gt;</code> 可以是一個檔案或一個目錄，如果是目錄的話，會將目錄內的所有檔案都複製到 <code>&lt;dest&gt;</code> 裡面。</li><li><code>&lt;src&gt;</code> 可以指定多個檔案，但 <code>&lt;dest&gt;</code> 必須是一個目錄，如果 <code>&lt;dest&gt;</code> 不是一個目錄的話會造成非預期的後果。</li></ul><h3 id="小實驗"><a href="#小實驗" class="headerlink" title="小實驗"></a>小實驗</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> a b c d e /dir <span class="comment"># 1</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ddd /dir1      <span class="comment"># 2, ddd 是目錄</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ddd /dir2/     <span class="comment"># 3, ddd 是目錄</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> a /dir3        <span class="comment"># 4</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> a /dir4/       <span class="comment"># 5</span></span></span><br></pre></td></tr></table></figure><h4 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">-- dir (file)</span></span><br><span class="line">|<span class="string">-- dir1</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- a</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- b</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- c</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- d</span></span><br><span class="line">|<span class="string">   `-- e</span></span><br><span class="line">|<span class="string">-- dir2</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- a</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- b</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- c</span></span><br><span class="line">|<span class="string">   </span>|<span class="string">-- d</span></span><br><span class="line">|<span class="string">   `-- e</span></span><br><span class="line">|<span class="string">-- dir3 (file)</span></span><br><span class="line">|<span class="string">-- dir4</span></span><br><span class="line"><span class="string">    `-- a</span></span><br></pre></td></tr></table></figure><p>可以注意到在複製資料夾的情況下，有無加結尾的 <code>/</code> 不影響結果 (#2, #3)，但是如果是複製檔案的話有加結尾的 <code>/</code> 會自動新增資料夾並複製檔案到該資料夾下，若沒有的話會當作新的檔名 (#4, #5)，而 #1 是展示多個來源檔案的情況下若目的沒有加結尾的 <code>/</code> 的情況，實測結果他會將 <code>e</code> 的內容複製進 <code>/dir</code>。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@66b18a43ccd3</span><span class="symbol">:/</span><span class="comment"># cat /dir</span></span><br><span class="line">e</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;&lt;p&gt;忘了 &lt;code&gt;ADD&lt;/code&gt;，使用 &lt;code&gt;COPY&lt;/code&gt; 吧。&lt;/p&gt;
&lt;p&gt;根據官方的 &lt;a href=&quot;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#add-or-copy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Best practices for writing Dockerfiles&lt;/a&gt;，&lt;code&gt;ADD&lt;/code&gt; 和 &lt;code&gt;COPY&lt;/code&gt; 基本上一樣，除了 &lt;code&gt;ADD&lt;/code&gt; 提供了一些黑魔法，但基本上這些黑魔法都有其他的方法可以替代，而且 &lt;code&gt;ADD&lt;/code&gt; 的這些額外的功能會造成執行結果難以直觀的預期，因此官方建議不要用 &lt;code&gt;ADD&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;ADD-and-COPY&quot;&gt;&lt;a href=&quot;#ADD-and-COPY&quot; class=&quot;headerlink&quot; title=&quot;ADD and COPY&quot;&gt;&lt;/a&gt;&lt;code&gt;ADD&lt;/code&gt; and &lt;code&gt;COPY&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;語法&lt;/p&gt;
&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; [--chown=&amp;lt;user&amp;gt;:&amp;lt;group&amp;gt;] &amp;lt;src&amp;gt; &amp;lt;dest&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;  [--chown=&amp;lt;user&amp;gt;:&amp;lt;group&amp;gt;] &amp;lt;src&amp;gt; &amp;lt;dest&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://blog.danielchen.cc/categories/DevOps/"/>
    
    
      <category term="Docker" scheme="https://blog.danielchen.cc/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>使用 GitHub Action 自動部屬 Hexo GitHub Page</title>
    <link href="https://blog.danielchen.cc/2020/06/16/hexo-github-action/"/>
    <id>https://blog.danielchen.cc/2020/06/16/hexo-github-action/</id>
    <published>2020-06-16T08:39:34.000Z</published>
    <updated>2021-08-11T00:36:31.534Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub 在去年 11 月的時候發布了自家的 CI/CD 工具 GitHub Action 並提供 public repo 無限額度的免費使用，在過去雖然有整合 Travis CI 但設定起來還是有點麻煩，GitHub Action 強大的地方在於他的 Market place 功能，可以像安裝套件一樣直接使用別人寫好的 CI/CD Script。</p><p>以往在發部落格文章的時候都要自己手動下指令 <code>hexo g -d</code>，雖然已經夠簡便了，但人的懶惰是沒有極限的，因此這次就來嘗試使用看看這個 GitHub 的新功能來做自動部屬，在設定 Action 之前記得先將你的 hexo 的 git deploy 設定好，以下都假設你已經設定好 (就是你有辦法使用上面那個指令直接部屬你的 hexo blog)，且你知道你的 hexo 文章原始碼和靜態網站各放在哪個 repo 的 branch。</p><p>我從 Market place 找到了這個 action: <a href="https://github.com/marketplace/actions/hexo-github-action" target="_blank" rel="noopener">yrpang/github-actions-hexo</a>，看起來還行，而且支援自動 purge Cloudflare cache (雖然我沒設定)，就來試試看吧。</p><p>GitHub Action 的設定相當簡單，在你的文章原始碼的 repository 底下新增一個資料夾 <code>.github/workflows</code>，並加入檔案 <code>main.yml</code>，把 CI/CD 的設定檔寫進去就可以了，可參考我的 template</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="string">[source]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">source</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles('**/package-lock.json')&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">yrpang/github-actions-hexo@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">deploykey:</span> <span class="string">$&#123;&#123;secrets.DEPLOY_KEY&#125;&#125;</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">USERNAME</span></span><br><span class="line">          <span class="attr">email:</span> <span class="string">EMAIL</span></span><br></pre></td></tr></table></figure><p>注意一下 <code>on: push:</code> 那邊和 <code>steps</code> 裡面的 Checkout 的部分的 branch 設定，我是將原始碼和產生的靜態網站檔案放在同一個 repo，原始碼在 <code>source</code>，網站在 <code>master</code> (如果不是在 master 的人請看文末的其他參數介紹)，Checkout 是要 checkout 到你的原始碼的 bracnh，而 <code>on: push:</code> 是設定哪一個 brach 的 push event 會觸發自動部屬，請大家把兩個 branch 都改成自己放 hexo 文章原始碼的 branch。</p><p>最下面可以看到該 action 有三個必要的參數，其中 username 和 email 是 git commit log 裡面的 name 跟 email，這部分其實不是很重要，而且這個 script 有一個小問題讓這兩個參數更不重要，待會會提，但總之如果你想讓你網站那邊的 commit 顯示正常的話就設定成你的 github username 跟 email 吧。</p><p>而 deploykey 是 <code>hexo deploy</code> 的時候用的 ssh key，設定方法如下</p><p>先在你的 commandline 產生 rsa key pair<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"<span class="variable">$(git config user.email)</span>"</span> -f hexo -N <span class="string">""</span></span><br></pre></td></tr></table></figure></p><p>產生成功應該會得到兩個檔案 <code>hexo</code> 和 <code>hexo.pub</code>，將 <code>hexo.pub</code> 的內容新增到靜態網站的 GitHub repo 設定中的 Deploy Keys 中 (Settings -&gt; Deploy Keys -&gt; Add deploy key)，title 隨意，但 Allow write access 一定要勾選，否則這個 ssh key 沒有辦法 push</p><p><img src="https://imgur.com/76Ggz8v.png" alt=""></p><p>將 <code>hexo</code> 的內容新增到和要執行這個 action 相同的 GitHub repo 設定中的 Secret 中 (Settings -&gt; Secrets -&gt; New scret)，名稱 <code>DEPLOY_KEY</code> (或任何名稱，但記得去 <code>.yml</code> 裏修改成對應的 secret 名)</p><p><img src="https://imgur.com/F2Raxfn.png" alt=""></p><p>因為我原始碼和網站在同一個 repository，所以我兩個設定都在同一個 repo 裡，如果兩個是分開的人小心不要搞錯。</p><p>完成後把該設定檔 push 上去就可以了，當你 <code>on: push:</code> 設定的 branch 有 push event 發生時就會觸發自動部屬，可以到 GitHub repo 裡面的 <code>Actions</code> tab 查看是否有部屬成功。</p><p><img src="https://imgur.com/nrNObjb.png" alt=""></p><h3 id="其他參數"><a href="#其他參數" class="headerlink" title="其他參數"></a>其他參數</h3><div class="table-container"><table><thead><tr><th>Name</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>deploykey</td><td>secrets</td><td><strong>Yes</strong></td><td></td><td>The deploy key of your GitHub Page repository</td></tr><tr><td>username</td><td>string</td><td><strong>Yes</strong></td><td></td><td>Your user name</td></tr><tr><td>email</td><td>string</td><td><strong>Yes</strong></td><td></td><td>Your email address</td></tr><tr><td>if_update_files</td><td>boolean</td><td></td><td>false</td><td>Whether update the source file after generate</td></tr><tr><td>github_token</td><td>secrets</td><td></td><td></td><td>Token for the repo. Can be passed in using $\</td></tr><tr><td>branch</td><td>string</td><td></td><td>‘master’</td><td>The branch of the blog source code</td></tr><tr><td>if_update_cloudflare</td><td>boolean</td><td></td><td>false</td><td>Whether update cloudflare</td></tr><tr><td>cloudflare_zone</td><td>string</td><td></td><td></td><td>the cloudflare zone</td></tr><tr><td>cloudflare_token</td><td>secrets</td><td></td><td></td><td>Your cloudflare token</td></tr></tbody></table></div><p>比較值得注意的是 <code>branch</code>，如果你放靜態網站的 branch 不是 <code>master</code> (例如 <code>gh-pages</code>)，可以透過這個參數設定。</p><p>如果有需要 flush Clouldflare cache 的人可以設定最後那三個參數，你需要知道你的 zone id 跟 cloudflare token，token 記得要使用 secrets 來設定，設定方法和上面設定 ssh key 設定 private key 的部份一樣。</p><h3 id="小問題"><a href="#小問題" class="headerlink" title="小問題"></a>小問題</h3><p>這個 action 有個小問題就是你的靜態網站的 repo 的 commit history 會被洗掉，<code>hexo deploy</code> 會把產生的靜態檔案複製到 repo 目錄底下的 <code>.deploy_git</code> 並 commit，預設這個資料夾是不會被 stage 的，解決方法是把這個資料夾從 <code>.gitignore</code> 裡面拿掉，或者是修改 action 的 script，讓他每次 deploy 前先把靜態網站的 repo clone 至 <code>.deploy_git</code> 資料夾內，後面這個方案可以參考<a href="https://depp.wang/2020/02/17/use-github-actions-to-achieve-hexo-blog-auto-deploy/" target="_blank" rel="noopener">這篇文章</a>。</p><p>我是不在意那邊的 commit history 所以沒有設定。</p><h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>感恩 GitHub，讚嘆 GitHub。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GitHub 在去年 11 月的時候發布了自家的 CI/CD 工具 GitHub Action 並提供 public repo 無限額度的免費使用，在過去雖然有整合 Travis CI 但設定起來還是有點麻煩，GitHub Action 強大的地方在於他的 Market place 功能，可以像安裝套件一樣直接使用別人寫好的 CI/CD Script。&lt;/p&gt;
&lt;p&gt;以往在發部落格文章的時候都要自己手動下指令 &lt;code&gt;hexo g -d&lt;/code&gt;，雖然已經夠簡便了，但人的懶惰是沒有極限的，因此這次就來嘗試使用看看這個 GitHub 的新功能來做自動部屬，在設定 Action 之前記得先將你的 hexo 的 git deploy 設定好，以下都假設你已經設定好 (就是你有辦法使用上面那個指令直接部屬你的 hexo blog)，且你知道你的 hexo 文章原始碼和靜態網站各放在哪個 repo 的 branch。&lt;/p&gt;
&lt;p&gt;我從 Market place 找到了這個 action: &lt;a href=&quot;https://github.com/marketplace/actions/hexo-github-action&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;yrpang/github-actions-hexo&lt;/a&gt;，看起來還行，而且支援自動 purge Cloudflare cache (雖然我沒設定)，就來試試看吧。&lt;/p&gt;
&lt;p&gt;GitHub Action 的設定相當簡單，在你的文章原始碼的 repository 底下新增一個資料夾 &lt;code&gt;.github/workflows&lt;/code&gt;，並加入檔案 &lt;code&gt;main.yml&lt;/code&gt;，把 CI/CD 的設定檔寫進去就可以了，可參考我的 template&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Hexo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Build&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Deploy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;on:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;push:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;branches:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;[source]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;jobs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;build:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;runs-on:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;ubuntu-latest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;steps:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Checkout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;uses:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;actions/checkout@v1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;with:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;ref:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;source&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;Cache&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;modules&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;uses:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;actions/cache@v1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;with:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;path:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;node_modules&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;key:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;$&amp;#123;&amp;#123;runner.OS&amp;#125;&amp;#125;-$&amp;#123;&amp;#123;hashFiles(&#39;**/package-lock.json&#39;)&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;uses:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;yrpang/github-actions-hexo@master&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;with:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;deploykey:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;$&amp;#123;&amp;#123;secrets.DEPLOY_KEY&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;username:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;USERNAME&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;email:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;EMAIL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意一下 &lt;code&gt;on: push:&lt;/code&gt; 那邊和 &lt;code&gt;steps&lt;/code&gt; 裡面的 Checkout 的部分的 branch 設定，我是將原始碼和產生的靜態網站檔案放在同一個 repo，原始碼在 &lt;code&gt;source&lt;/code&gt;，網站在 &lt;code&gt;master&lt;/code&gt; (如果不是在 master 的人請看文末的其他參數介紹)，Checkout 是要 checkout 到你的原始碼的 bracnh，而 &lt;code&gt;on: push:&lt;/code&gt; 是設定哪一個 brach 的 push event 會觸發自動部屬，請大家把兩個 branch 都改成自己放 hexo 文章原始碼的 branch。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://blog.danielchen.cc/categories/web/"/>
    
    
      <category term="web" scheme="https://blog.danielchen.cc/tags/web/"/>
    
      <category term="Hexo" scheme="https://blog.danielchen.cc/tags/Hexo/"/>
    
      <category term="GitHub" scheme="https://blog.danielchen.cc/tags/GitHub/"/>
    
      <category term="CI/CD" scheme="https://blog.danielchen.cc/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Note - Binary Lifting</title>
    <link href="https://blog.danielchen.cc/2020/06/16/LeetCode-Note-1483-Binary-Lifting/"/>
    <id>https://blog.danielchen.cc/2020/06/16/LeetCode-Note-1483-Binary-Lifting/</id>
    <published>2020-06-16T04:36:31.000Z</published>
    <updated>2021-08-11T00:36:31.518Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/kth-ancestor-of-a-tree-node/" target="_blank" rel="noopener">LC 1483. Kth Ancestor of a Tree Node</a></p><h2 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h2><p>You are given a tree with n nodes numbered from 0 to n-1 in the form of a parent array where parent[i] is the parent of node i. The root of the tree is node 0.</p><p>Implement the function getKthAncestor(int node, int k) to return the k-th ancestor of the given node. If there is no such ancestor, return -1.</p><p>The k-th ancestor of a tree node is the k-th node in the path from that node to the root.</p><blockquote><p>中文翻譯: 有一顆 n 個 node 的樹，node 以 0 到 n-1 編號，並給定長度為 n 的陣列 parent，parent[i] 為 node i 的父節點 (編號)，node 0 為樹的 root。實作一個 function getKthAncestor(int node, int k)，回傳 node 的第 k 個 ancestor，如果該 ancestor 不存在，回傳 -1。第 k 個 ancestor 定義為由該節點出發往 root 的 path 上第 k 個訪問的節點。</p></blockquote><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Tree:</span><br><span class="line">     <span class="number">0</span></span><br><span class="line">   /   \</span><br><span class="line">  <span class="number">1</span>     <span class="number">2</span></span><br><span class="line"> / \   / \</span><br><span class="line"><span class="number">3</span>   <span class="number">4</span> <span class="number">5</span>   <span class="number">6</span></span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">[<span class="string">"TreeAncestor"</span>,<span class="string">"getKthAncestor"</span>,<span class="string">"getKthAncestor"</span>,<span class="string">"getKthAncestor"</span>]</span><br><span class="line">[[<span class="number">7</span>,[<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]],[<span class="number">3</span>,<span class="number">1</span>],[<span class="number">5</span>,<span class="number">2</span>],[<span class="number">6</span>,<span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[<span class="literal">null</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">TreeAncestor treeAncestor = new TreeAncestor(<span class="number">7</span>, [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">treeAncestor.getKthAncestor(<span class="number">3</span>, <span class="number">1</span>);  <span class="comment">// returns 1 which is the parent of 3</span></span><br><span class="line">treeAncestor.getKthAncestor(<span class="number">5</span>, <span class="number">2</span>);  <span class="comment">// returns 0 which is the grandparent of 5</span></span><br><span class="line">treeAncestor.getKthAncestor(<span class="number">6</span>, <span class="number">3</span>);  <span class="comment">// returns -1 because there is no such ancestor</span></span><br></pre></td></tr></table></figure><blockquote><p>每組測資第一個操作為輸入 n 以及 parent 陣列，然後接下來會有連續數次的 getKthAncestor 請求。</p></blockquote><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1 &lt;= k &lt;= n &lt;= 5*10^4</li><li>parent[0] == -1 indicating that 0 is the root node.</li><li>0 &lt;= parent[i] &lt; n for all 0 &lt; i &lt; n</li><li>0 &lt;= node &lt; n</li><li>There will be at most 5*10^4 queries.</li></ul><h2 id="Thought"><a href="#Thought" class="headerlink" title="Thought"></a>Thought</h2><p>最簡單的想法就是紀錄每個節點的 parent 為何，每次 query 就從該節點往回走 k 次，如果在 k 歸零之前走到根節點表示該次 query 失敗，retur -1，否則 return 走道的節點</p><p>假設總共的 query 次數是 M 次，則複雜度為 $O(kM)$，k 和 M 最大都是 5e4，相乘會超過 1e9，顯然這會超時</p><p>有一個小小的優化是我們可以在最一開始就建立好每個節點查詢第 k 個 ancestor 的查詢表，這樣 query 的複雜度就是 $O(1)$，但建表仍然是 $O(kM)$，依舊會超時</p><p>這題的正確解法是使用 Binary Lifting 技巧，我們知道任意整數都可以用 2 的次方相加表示，也就是整數的二進位表達</p><p>例如 $5 = {101}_{bin} = 2^0 + 2^2$，$42 = {101010}_{bin} = 2^1 + 2^3 + 2^5$</p><p>因此我們只需要紀錄每個節點的第 $2^i$ 個 ancestor，每一次不是往前跳一個 parent，而是往前跳 $2^i$ 個 parent，如此總共要跳的次數只剩下 $log(k)$</p><p>舉例來說，如果 $k = 42$，總共只需要往前跳三次</p><p>$ancestor(node, 42) = ancestor(ancestor(ancestor(node, 2^5), 2^3), 2^1)$</p><p>k 值最大為 5e4，因此每個節點我們只需要儲存總共 $log(5 \cdot 10^4) = 16$ 個 ancestor (保險起見待會實作是用 20)</p><p>建表的方法如下，因為 $2^i = 2^{i-1} + 2^{i-1}$ 所以 $ancestor(node, 2^i) = ancestor(ancestor(node, 2^{i-1}), 2^{i-1})$ 這就是我們建表的遞迴式了，我們可以用 bottom-up 的方式來建出這個表</p><p>查詢時我們可以透過觀察 k 的 binary representation 來知道我們要往前查詢幾個節點，若 k 的第 $i$ 個 bit 為 $1$ 則需要往前跳 $2^i$ 個節點</p><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h2><p>對每一個 node 來說建表的複雜度為 $O(logk)$，整個表一共 $O(nlogk)$</p><p>每一次查詢的複雜度為 $O(logk)$，總共 M 次查詢，總體複雜度為 $O(nlogk + mlogk)$</p><h2 id="Full-Solution"><a href="#Full-Solution" class="headerlink" title="Full Solution"></a>Full Solution</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeAncestor</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; p;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeAncestor(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; parent) &#123;</span><br><span class="line">        p = <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">20</span>, <span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) &#123;</span><br><span class="line">            p[i][<span class="number">0</span>] = parent[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">20</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[j][i<span class="number">-1</span>] == <span class="number">-1</span>) p[j][i] = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> p[j][i] = p[p[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getKthAncestor</span><span class="params">(<span class="keyword">int</span> node, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">20</span> &amp;&amp; k&gt;&gt;i &amp;&amp; node != <span class="number">-1</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((k &gt;&gt; i) &amp; <span class="number">1</span>) node = p[node][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your TreeAncestor object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * TreeAncestor* obj = new TreeAncestor(n, parent);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;getKthAncestor(node,k);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/kth-ancestor-of-a-tree-node/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LC 1483. Kth Ancestor of a Tree Node&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Problem-Statement&quot;&gt;&lt;a href=&quot;#Problem-Statement&quot; class=&quot;headerlink&quot; title=&quot;Problem Statement&quot;&gt;&lt;/a&gt;Problem Statement&lt;/h2&gt;&lt;p&gt;You are given a tree with n nodes numbered from 0 to n-1 in the form of a parent array where parent[i] is the parent of node i. The root of the tree is node 0.&lt;/p&gt;
&lt;p&gt;Implement the function getKthAncestor(int node, int k) to return the k-th ancestor of the given node. If there is no such ancestor, return -1.&lt;/p&gt;
&lt;p&gt;The k-th ancestor of a tree node is the k-th node in the path from that node to the root.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;中文翻譯: 有一顆 n 個 node 的樹，node 以 0 到 n-1 編號，並給定長度為 n 的陣列 parent，parent[i] 為 node i 的父節點 (編號)，node 0 為樹的 root。實作一個 function getKthAncestor(int node, int k)，回傳 node 的第 k 個 ancestor，如果該 ancestor 不存在，回傳 -1。第 k 個 ancestor 定義為由該節點出發往 root 的 path 上第 k 個訪問的節點。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="algorithm" scheme="https://blog.danielchen.cc/categories/algorithm/"/>
    
    
      <category term="ICPC" scheme="https://blog.danielchen.cc/tags/ICPC/"/>
    
      <category term="algorithm" scheme="https://blog.danielchen.cc/tags/algorithm/"/>
    
      <category term="programming contest" scheme="https://blog.danielchen.cc/tags/programming-contest/"/>
    
      <category term="Leetcode" scheme="https://blog.danielchen.cc/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>論文筆記 DeepRacer: Educational Autonomous Racing Platform for Experimentation with Sim2Real Reinforcement Learning</title>
    <link href="https://blog.danielchen.cc/2020/06/01/paper-note-deepracer/"/>
    <id>https://blog.danielchen.cc/2020/06/01/paper-note-deepracer/</id>
    <published>2020-06-01T00:22:03.000Z</published>
    <updated>2021-08-11T00:36:31.538Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://arxiv.org/pdf/1911.01562v1.pdf" target="_blank" rel="noopener">PDF</a></p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>這篇主要是講 DeepRacer 的動機、分散式計算架構、模擬環境架構、robust evaluation 的方法、還有他們在上面訓練一個搭載單鏡頭，大小 1/18 的小型自動駕駛車成功的實驗架構，並包含他們怎麼做到 Sim2Real。</p><p><a href="https://github.com/awslabs/amazon-sagemaker-examples/tree/master/reinforcement_learning/rl_deepracer_robomaker_coach_gazebo" target="_blank" rel="noopener">GitHub</a></p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>要開發機器人的 RL 演算法需要很多方面的知識和工具，如</p><ul><li>access to a physical robot</li><li>an accurate robot model for simulations</li><li>a distributed training mechanism and customizability of the training procedure such as modifying the neural network and the loss function or  introducing noise.</li></ul><p>DeepRacer 開發出一套可以讓 Simulation 和 Policy update 獨立運作的分散式計算架構，並支援 Gazebo。</p><p>DeepRacer 1/18th scale car 是該平台上使用的小車模型的實體版本，搭載用來做類神經網路運算的 GPU、透過 WiFi 傳輸的即時視訊鏡頭及 400 小時的續航力，成本為 400 鎂 (過去其他的開放小車硬體動輒上千鎂，這台因為沒有光達所以很便宜)</p><p>他們在這平台上，不依靠 expert labeling、real world，用 PPO 訓練了一個 end-to-end 的自動駕駛模型，訓練時間在 5 分鐘、約 5000 次模擬 (5000 次模擬在 5 分鐘內跑完 … 又是一個用錢堆出來的研究)，且這個模型可以直接丟到實體的小車上使用。這是第一篇使用 model-free RL 做 sim2real 成功的研究。</p><p>他們的平台支援 sensor/policy log、在模擬環境中加入隨機性 (eg. random tracks, lighting, sensor/actuator noise)。</p><p>為了避免 overfit/underfit，他們開發了一套 robust evaluation method 去評估 policy 是否 generalize to real world，他們把同一個 policy 丟進多個 domain randomization 環境做 evaluation，並以此篩選出 robust policy，他們實驗證實在 domain randomization 中表現好的 policy 在 sim2real 的表現上也最好。</p><h2 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h2><p>列舉了一些相關研究，有空再回來看</p><h2 id="Autonomous-Racing-with-RL"><a href="#Autonomous-Racing-with-RL" class="headerlink" title="Autonomous Racing with RL"></a>Autonomous Racing with RL</h2><p>在他們的架構裡面 agent 控制小車，environment 是賽車跑道，跑道上有白線表示跑道邊界，小車只會往前跑且路上沒有其他障礙，observation 是車子的鏡頭，action 是車子的油門/方向盤</p><p><img src="https://i.imgur.com/g7umv0s.png" alt=""></p><p>因為車車不知道整個跑道長什麼樣子，因此這是個 partially observed Markov Decision Process。</p><p>一個 episode 車車從跑道某一點開始，如果車子跑出跑道或跑完一圈則結束。</p><p>鏡頭影像為 15 fps，resize 成 160 x 120 px 並轉成灰階。</p><p>Actions 被離散化成 10 個值，包含 2 level 的油門 * 5 level 的轉向 = 10 種 action，使用者可以在平台上自由調整該怎麼離散化。</p><p>訓練目標是讓車車越靠近中間線越好，因為如果車子太靠近邊邊的話，小小的改變就有可能讓跑道線超出視線範圍，使用者也可以自己定義 reward function。</p><h3 id="A-Reinforcement-Learning-Algorithm"><a href="#A-Reinforcement-Learning-Algorithm" class="headerlink" title="A. Reinforcement Learning Algorithm"></a>A. Reinforcement Learning Algorithm</h3><p>他們使用 PPO，當時的 RL 領域的 SOTA，PPO 使用兩個 neural networks，policy network &amp; value network。</p><p>Policy network input 是影像，output 是 action<br>Value network input 一樣是影像，output 用來估計期望的 discouted reward</p><p>初始 policy 是隨機的，每次跑完會根據蒐集到的資料更新 policy network 跟 value network，更新後的 policy 會再次被丟進 environment 跑模擬蒐集資料。</p><p>Policy loss function 利用 generalized advantage estimation algorithm 和 clipped importance sampling weight 最大化平均能夠給出最多 reward 的 action (詳情請見 <a href="https://arxiv.org/pdf/1707.06347" target="_blank" rel="noopener">PPO 的論文</a> 或這個簡短介紹的 <a href="https://www.youtube.com/watch?v=5P7I-xPq8u8" target="_blank" rel="noopener">影片</a>)<br>Value loss function 使用 observed 跟 predicted reward 的 MSE</p><p>只有 policy network 需要被部屬到真實的車車上，他們兩個網路都使用 3 層 Conv + 2 層 FC，每 20 個 episode 更新一次權重。</p><h2 id="DeepRacer-Design-and-Implementation"><a href="#DeepRacer-Design-and-Implementation" class="headerlink" title="DeepRacer Design and Implementation"></a>DeepRacer Design and Implementation</h2><p>這章主要介紹他們如何將 policy update 和 simulation 分離。</p><p>他們使用 RoboMaker + Gazebo 做 simulation，使用 SageMaker + RL Coach 做 policy update。</p><p>把 simulation 和 policy update 分離的架構可以讓我們分別把這兩項工作交給為他們特化的機器來執行，例如 simulation 跑在 Windows 上 (不知道為什麼)，neural network training 跑在有 GPU 且 RAM 比較大的伺服器上。同時也可以使用多台機器平行的跑不同的 domain randomization 模擬。</p><h3 id="A-Training-Workflow"><a href="#A-Training-Workflow" class="headerlink" title="A. Training Workflow"></a>A. Training Workflow</h3><p><img src="https://i.imgur.com/BubQe3u.png" alt=""></p><p>上圖展示了整個訓練架構的流程。</p><p>訓練從在 SageMaker 中設定初始化 policy/value network 以及設定 hyper-parameter 開始，並利用 S3 儲存模型檔。</p><p>接下來 RobotMaker 會初始化模擬 environment、agent，並將 model 從 S3 下載下來，agent 透過 OpenAI Gym interface 和 environment 作互動，每一個 simulation step 中 agent 根據 observation $o$ 決定 action $a$，environment 會根據 $a$ 更新模擬環境並回傳下一個 observation 和當下的 reward，每一個 simulation step 的資料 $\langle o<em>t, a_t, r_t, o</em>{t+1} \rangle$ 都會透過 Redis 儲存起來。</p><p>接著 SageMaker 會根據 Redis 中的 replay data 訓練模型並將更新過後的模型再存進 S3，如此循環下去。</p><p>儲存在 S3 的模型會同時被丟進不同的環境中跑 simulation，蒐集更多資料，幫助收斂和 generalization。</p><p>這個架構不只可以訓練 PPO，也可以做 DQN、DDPG、SAC 等等常見的 RL 算法。</p><p>其中 RoboMaker 中的 environment 可以用其他和 OpenAi Gym interface 相容的 simulator 取代。</p><h3 id="B-Training-with-Amazon-SageMaker"><a href="#B-Training-with-Amazon-SageMaker" class="headerlink" title="B. Training with Amazon SageMaker"></a>B. Training with Amazon SageMaker</h3><p>SageMaker 是 A 社基於 Jupyter Notebook 用來訓練 ML 模型的平台，並且可以用 RL Coach 和 RLlib 整合一些 RL 演算法。RL Coach 用在訓練和模擬分離的情境，RLlib 用在訓練和模擬整合的情境。</p><p>這些 library 都使用 Docker 打包，你可以把它們丟到不同設定的 cluster instance 上面跑，然後 AWS 就可以收錢錢。</p><p>SageMaker 除了支援車車訓練以外還有 HVAC、locomotion、資產管理等等實驗環境。</p><h3 id="C-Simulation-with-AWS-RoboMaker"><a href="#C-Simulation-with-AWS-RoboMaker" class="headerlink" title="C. Simulation with AWS RoboMaker"></a>C. Simulation with AWS RoboMaker</h3><p>RoboMaker 是 A 社用來開發、測試和部屬機器人軟體的服務，使用 Gazebo 做 simulation。</p><p><code>robot model</code> 是上面用來描述模型的資料結構 (類似 Gazebo 的 URDF)，例如定義車殼、車輪、Ackermann 轉向機構、相機，這些 component 的尺寸、物理參數、裝置參數、他們之間怎麼接合等等。</p><p>賽道跟背景是使用 Blender 製作的，做好之後再匯進 Gazebo 中。</p><p>物理引擎使用 ODE physics engine，渲染引擎使用 OGRE。</p><p>使用 Gazebo plugins 來增加 camera 和光源。</p><p>使用 ROS 作為 agent 和 simulation 的溝通介面。Agent 會透過 ROS 來擺放車車，並開始模擬、從相機模組取得影像、取得車車的位置、速度並將模型計算的 action (油門/轉向) 傳送給車車。</p><h3 id="D-Sim2Real-Calibration"><a href="#D-Sim2Real-Calibration" class="headerlink" title="D. Sim2Real Calibration"></a>D. Sim2Real Calibration</h3><p>為了讓模擬更接近真實情況，他們作了以下幾個調整</p><p>首先相機部分的參數如高度、角度、FoV都盡量和真實的車子設定得一樣。</p><p>此外因為真實的相機只有 15 fps，他們將模擬環境的相機也調整成相同的 fps，並利用 producer-consumer 機制確保每個 frame 對應一個 action。</p><p>另外馬達控制部分，他們直接測量在不同的設定下的轉向角度跟速度來得到相關參數。</p><p>跑到部分也在現實世界中製作了和模擬環境相同配色、尺寸、形狀的跑道</p><p>欣賞一下他們製作的精美跑道<br><img src="https://i.imgur.com/RSe7yPN.png" alt=""></p><h3 id="E-Calculating-Rewards"><a href="#E-Calculating-Rewards" class="headerlink" title="E. Calculating Rewards"></a>E. Calculating Rewards</h3><p>這小節在介紹他們怎麼透過模型的幾何數據計算跑道中線和判斷車車是否超線的，不是很重要。</p><h3 id="F-DeepRacer-Hardware"><a href="#F-DeepRacer-Hardware" class="headerlink" title="F. DeepRacer Hardware"></a>F. DeepRacer Hardware</h3><p><img src="https://i.imgur.com/ztntBk9.png" alt=""></p><p>Intel Atom 搭載內置 GPU，使用剛剛提到 5 層的 neural networks 可達到 &gt;15 inference per second。</p><p>使用 Intel OpenVINO 將 TensorFlow 的編譯成 binary 加速計算時間。</p><p>Camera 所取得到的影像會直接丟給 OpenVINO 做計算，同時透過 WiFi 在他們提供的 web interface 上做 live streaming，這個 web interface 也提供可以讓你手動操控車車的介面。</p><h2 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h2><p>為了讓 agent 能夠更好的 generalization，他們在模擬和真實的測試環境都加入不同的 domian randomization 來進行測試。</p><p>真實環境的部分，他們使用白色跟黃色膠帶製作跑道，分別在地毯或水泥地上、在周圍圍上檔板或沒有檔板、不同的光照條件、不同跑道形狀。</p><h3 id="A-Training-with-Multiple-Rollouts"><a href="#A-Training-with-Multiple-Rollouts" class="headerlink" title="A. Training with Multiple Rollouts"></a>A. Training with Multiple Rollouts</h3><p>他們在以下三種情境下訓練 policy</p><ol><li>Track A 最高時速 1 m/s</li><li>Track A 最高時速 1.67 m/s </li><li>Track B 最高時速 1.67 m/s</li></ol><p>依次對車車來說難度越來越高，Track B 難度高因為背景還有建築物之類的干擾。</p><p>每一個 episode 都會在跑道不同的位置重生，讓不同段的跑道都有機會被 agent 看到。</p><p>他們使用 p3.2x 來訓練，每次實驗都跑兩次，一次跑 2 個小時，實驗結果和預期相同，同時 rollout 的 worker 越多模型收斂越快，而且他們發現增加油門在 Track A 反而讓模型收斂更快，猜測是速度快讓 agent 能夠一次蒐集更多資料</p><p><img src="https://i.imgur.com/5nBUQHm.png" alt=""></p><h3 id="B-Robust-Evaluation"><a href="#B-Robust-Evaluation" class="headerlink" title="B. Robust Evaluation"></a>B. Robust Evaluation</h3><p>這部分是測試 robust evaluation (也就是在各種 domain randomization 下測試) 是否能夠有效的反應模型在真實世界的表現，如果可以的話，我們可以就可以直接在模擬環境下看 robust evaluation 來調整超參數而不用經常反覆的在現實環境中測試。</p><p>使用的 baseline 是 Track A w/ no domain randomization &amp; 油門 1 m/s，實驗組為訓練時加入<br>(i). 在油門跟轉向加入至多 10% 的 uniform random noise<br>(ii). 轉換跑道方向<br>(iii). 同時使用 1. 和 2.<br>(iv). 同時使用 1. 和 2. 並且在 Track B 訓練</p><p>Robust evaluation 部分則是在測試的時後加入</p><ol><li>uniform random noise to actions</li><li>in multiple starting position</li><li>both direction of travel</li></ol><p>與其對照的是 naive evaluation，在固定的起始點且不做 randomization。</p><p>每個 checkpoint 都會對兩種測是各自執行 10 次，每 5 個 checkpoint 會取 6 個 policy 出來做 sim2real 的測試，sim2real 是用現實的車車在 Track A replica 上兩個方向各測試 3 次，模型表現與車子速度有關，但現實的車車售電量影響很難維持等速，且模型也會改變車子油門，最後他們想辦法盡量讓車子稍微比模擬快一點 (沒解釋為什麼)</p><p>實驗結果如下</p><p><img src="https://i.imgur.com/JcjKh4I.png" alt=""></p><p>有以下結論</p><ol><li>robust evaluation 表現好的 sim2real 表現也會比較好</li><li>reversing 對模型表現有很大的幫助</li><li>只有 action noise 沒什麼幫助，但加入 reversing 之後看起來的幫助 (有嗎?)</li><li>Track B 一開始表現差，但隨著訓練越久表現越來越好</li></ol><p>除此之外他們也發現速度低的話模型收斂速度更快而且很容易 generalization (這不是跟之前速度變快時收斂變快的想法相違背了嗎)，他們發現 0.5 m/s 時，checkpoint 5 中 baseline model 已經可以完成跑道。</p><h3 id="C-Robust-Sim2Real"><a href="#C-Robust-Sim2Real" class="headerlink" title="C. Robust Sim2Real"></a>C. Robust Sim2Real</h3><p>最後他們研究如何才能夠訓練出最 robust 的 agent，他們嘗試在訓練時調整以下因素</p><ol><li>multiple track</li><li>multiple speeds</li><li>regularization</li><li>domain randomization in action</li><li>domain randomization in observation</li></ol><p>他們先在 Track B 用 1 m/s 的油門，加入 action noise 和 reversing 訓練，然後根據 robust evaluation 挑選模型並在 Track A replica 加入以下情境測試其 sim2real 表現</p><ol><li>two speeds (0.5 m/s, 1 m/s)</li><li>with bright sunlight</li><li>with no barriers</li><li>on tape track</li></ol><p>以下結果<br><img src="https://i.imgur.com/3AYzS0W.png" alt=""></p><p>以下結論</p><ol><li>在不同的跑道上訓練 sim2real 會比較好，但並不一定都比較好</li><li>Regularization 他們使用 L2 norm, dropout, BN, entropy bonus to policy loss，其中最顯著改善的是 entropy bonus 0.001, dropout w/ p=0.3.</li><li>訓練時油門速度高有助於增加 robustness，但也會加長收斂的時間</li><li>同時使用不同的跑道訓練沒什麼幫助</li><li>observation noise 他們使用 random color, horizontal translation, shadow, salt and pepper noise，其中 random color 是最有效的，random color 的作法是隨機指定 hue, saturation, brightness, contract 等</li></ol><p>最後他們認為表現最好的是 Track C + L2 regularization + low entropy bouns + dropout + color randomization + 最高速度 2.33 m/s，可以在 11 秒內跑完 Track A 一圈</p><h2 id="Conclustion"><a href="#Conclustion" class="headerlink" title="Conclustion"></a>Conclustion</h2><p>總之就是 DeepRacer 架構設計很棒讓他們可以做各式各樣的測試，並且他們用 PPO 在蔗平台上訓練出了一個 end-to-end 基於影像的 navigation model，而且訓練速度很快。</p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>這篇就是在為自家服務打廣告，不過他們的架構設計和 sim2real 的技巧都是很好的參考。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/1911.01562v1.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PDF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h2&gt;&lt;p&gt;這篇主要是講 DeepRacer 的動機、分散式計算架構、模擬環境架構、robust evaluation 的方法、還有他們在上面訓練一個搭載單鏡頭，大小 1/18 的小型自動駕駛車成功的實驗架構，並包含他們怎麼做到 Sim2Real。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/awslabs/amazon-sagemaker-examples/tree/master/reinforcement_learning/rl_deepracer_robomaker_coach_gazebo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;要開發機器人的 RL 演算法需要很多方面的知識和工具，如&lt;/p&gt;
    
    </summary>
    
      <category term="robotics" scheme="https://blog.danielchen.cc/categories/robotics/"/>
    
    
      <category term="neural network" scheme="https://blog.danielchen.cc/tags/neural-network/"/>
    
      <category term="robotics" scheme="https://blog.danielchen.cc/tags/robotics/"/>
    
      <category term="autonomus car" scheme="https://blog.danielchen.cc/tags/autonomus-car/"/>
    
      <category term="reinforcement learning" scheme="https://blog.danielchen.cc/tags/reinforcement-learning/"/>
    
      <category term="artifical intelligence" scheme="https://blog.danielchen.cc/tags/artifical-intelligence/"/>
    
  </entry>
  
  <entry>
    <title>C Array Function Parameter 全攻略</title>
    <link href="https://blog.danielchen.cc/2020/05/30/C-Array-Function-Parameter/"/>
    <id>https://blog.danielchen.cc/2020/05/30/C-Array-Function-Parameter/</id>
    <published>2020-05-30T22:03:39.000Z</published>
    <updated>2021-08-11T00:36:31.518Z</updated>
    
    <content type="html"><![CDATA[<p>這是嘗試把 C 的 array function parameter 搞懂的一篇筆記。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>從很久以前剛開始學 C 的時候就對如何讓 function 接收 array parameter 有很大的疑問，此外 C++ 的 array paramter 又有不太一樣的行為，因此後來學 C++ 之後更亂了，這次花點時間嘗試把所有東西搞懂，如果有人發現我哪邊還是搞錯的話歡迎大家指正。</p><p>文中引用 C 語言標準中的章節如果沒特別註明以 C99 為主。</p><h2 id="C-Array-Type"><a href="#C-Array-Type" class="headerlink" title="C Array Type"></a>C Array Type</h2><h3 id="C-Types"><a href="#C-Types" class="headerlink" title="C Types"></a>C Types</h3><p>在講 array parameter 之前來複習一下 C 的 array type，C types (6.2.5) 可以分類成以下幾種</p><ul><li>Basic types</li><li>Void type</li><li>Enumerated type</li><li>Derived types</li></ul><p>其中 Derived types 包含</p><ul><li>Array type</li><li>Struct type</li><li>Union type</li><li>Function type</li><li>Pointer type</li></ul><p>Arrary Type 定義如下</p><blockquote><p>An array type describes a <strong>contiguously allocated nonempty set of objects</strong> with a particular member object type, called the element type. Array types are characterized by their <strong>element type</strong> and by the <strong>number of elements</strong> in the array. An array type is said to be derived from its element type, and if its element type is <strong>T</strong>,the <strong>array type</strong> is sometimes called <strong>“array of T”</strong>. The construction of an array type from an element type is called “array type derivation”.</p></blockquote><p>array type 由 element type 和 number of elements 決定，這兩個都是必要資訊，不同的 element type 和 number of elements 決定不同的 array type，例如說 <code>int [3]</code> 和 <code>int [10]</code> 是不同的 array type。</p><p>有一些網路上的教學會說 array 就是一個指標，這句話對也不對，而且經常讓初學者有錯誤的觀念，我就是被搞混的那個，其實 array type 和 pointer type 在 C 裡面是兩個截然不同的東西。</p><p>array 是代表一塊連續且大小固定的記憶體空間，就像 <code>int</code> 代表一塊大小為 4 bytes 的記憶體空間，pointer 也是一塊記憶體，只是記憶體的內容是另外一塊記憶體的地址，如果在 32-bits 系統底下 pointer 的大小是 4 bytes，64-bits 底下大小是 8 bytes。</p><p>問題在於 array 可以用 pointer 相同的語法來存取記憶體，所以他們看起來很像，但實際上是不同的東西。此外 array type 可以 cast 成 pointer type，例如 <code>int [10]</code> cast 成 <code>int *</code>，但有一些 array type 的性質會消失，這稱為 array to pointer decay。</p><p><strong>^^^ 注意上面這觀念很重要，function array paramter 的行為和 array to pointer decay 有很大的關聯 ^^^</strong></p><h4 id="Scalar-vs-Aggregate-types"><a href="#Scalar-vs-Aggregate-types" class="headerlink" title="Scalar vs Aggregate types"></a>Scalar vs Aggregate types</h4><p>有關於 type 的分類還有另一個值得知道的是</p><ul><li>Scalar types<ul><li>包含 arithmetic types and pointer types</li></ul></li><li>Aggregate types<ul><li>包含 array types and struct types</li></ul></li></ul><p>簡單來說 scalar types 就是簡單的一個值，而 aggregate type 是多個值組合起來的。</p><h4 id="Incomplete-types"><a href="#Incomplete-types" class="headerlink" title="Incomplete types"></a>Incomplete types</h4><p>另外 C 語言將所有 type 分為 object types、function type、incomplete types，object types 表示定義明確的物件，function type 就是 function，incomplete types 表式大小不明確的物件，所有非 incomplete types 或 function type 的物件都是 object types。C 語言中的 incomplete type 只有以下三種</p><ul><li>void</li><li>arrays of unspecified length</li><li>structures and unions with unspecified content</li></ul><p>以下幾個例子為 incomplete type<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> []</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br></pre></td></tr></table></figure></p><p>以下幾個例子為 complete type<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [<span class="number">10</span>]</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span> </span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下幾種宣告必須要使用 complete type，後面會看到 array elements 不允許 incomplete type 的例子</p><ul><li>array elements</li><li>members of structures or unions</li><li>objects local to a function</li></ul><p>incomplete type 被允許出現在以下幾種宣告</p><ul><li><strong>Pointers</strong> to incomplete types</li><li><strong>Functions returning</strong> incomplete types</li><li>Incomplete <strong>function parameter</strong> types</li><li><code>typedef</code> names for incomplete types</li></ul><h3 id="宣告一個-Array-6-7-5-2-6-7-8"><a href="#宣告一個-Array-6-7-5-2-6-7-8" class="headerlink" title="宣告一個 Array (6.7.5.2, 6.7.8)"></a>宣告一個 Array (6.7.5.2, 6.7.8)</h3><p>array 有兩種常見的宣告方式，<code>incomplete array declaration with array initializer</code> 和 <code>explicit sized array declaration</code></p><p>要宣告一個 array 你必須明確的指定他的大小，或是指定初始值讓編譯器幫你計算所需要的大小<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// incomplete array declaration with array initializer</span></span><br><span class="line"><span class="keyword">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line"><span class="comment">// explicit sized array declaration</span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">4</span>];</span><br></pre></td></tr></table></figure></p><p>你也可以為已知大小的 array 指定 initializer<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> b[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br></pre></td></tr></table></figure></p><p><code>char []</code> 可以用 string literal 初始化<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s[] = <span class="string">"Hello!"</span>;</span><br></pre></td></tr></table></figure></p><p>剛才有提到不同 size 的 array 視為不同的 type，因此應該無法將 array assign 給不同 size 的 array，但事實上所有的 array assignment 都是不允許的，即便是相同 size<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">c = a; <span class="comment">// error: array type 'int [4]' is not assignable</span></span><br><span class="line">c = b; <span class="comment">// error: array type 'int [4]' is not assignable</span></span><br></pre></td></tr></table></figure></p><h4 id="Variable-Length-Array"><a href="#Variable-Length-Array" class="headerlink" title="Variable Length Array"></a>Variable Length Array</h4><p>C99 支援可變長度的 array，這類 array 的長度是由一個變數而非常數決定，在 run time 時決定而非 compile time</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> d[i];</span><br></pre></td></tr></table></figure><p> VLA 無法使用 initializer 初始化<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> e[i] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;; <span class="comment">// error: variable-sized object may not be initialized</span></span><br></pre></td></tr></table></figure></p><h2 id="Function-Declaration-with-Array-Parameter-6-7-5-3-6-9-1"><a href="#Function-Declaration-with-Array-Parameter-6-7-5-3-6-9-1" class="headerlink" title="Function Declaration with Array Parameter (6.7.5.3, 6.9.1)"></a>Function Declaration with Array Parameter (6.7.5.3, 6.9.1)</h2><h3 id="Function-Declaration"><a href="#Function-Declaration" class="headerlink" title="Function Declaration"></a>Function Declaration</h3><p>先來談 function declarator，declarator 在 C 裡面表示宣告某一個物件 (變數) 的語法中指定物件名稱 (identifier) 和 derivated type 相關特性的語法，例如<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span></span><br></pre></td></tr></table></figure><br>中 <code>i</code> 為 declarator，而 <code>int</code> 為 declaration-specifier，表示這行宣告要宣告物件是什麼類型，而 <code>=</code> 後面的稱為 initializer，用來指定初始值，這整行稱為 declaration，即宣告。</p><p>上面看到的是最簡單的 declarator，再更早我們有看到 array declarator <code>arr[N]</code>，而以下語法為 function declarator<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func(parameter-type-<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure></p><p>其中 parameter-type-list 為<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declaration-specifiers declarator , declaration-specifiers declarator , ...</span><br></pre></td></tr></table></figure></p><p>function declarator 前面加上 declaration-specifier 表示函式的 return type<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declaration-<span class="function">specifiers <span class="title">func</span><span class="params">(parameter-type-<span class="built_in">list</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>只宣告 return type 和 parameter list 稱為 function prototype，例<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br></pre></td></tr></table></figure></p><p>function prototype 可以不用包含變數名稱<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br></pre></td></tr></table></figure></p><p>若包含 code block 稱為 function definition<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Array-Parameter"><a href="#Array-Parameter" class="headerlink" title="Array Parameter"></a>Array Parameter</h3><p>如果想宣告 array parameter 語法如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a[<span class="number">3</span>])</span></span>;</span><br></pre></td></tr></table></figure></p><p>但是 6.7.5.3.7 提到</p><blockquote><p>A declaration of a parameter as “array of type” shall be adjusted to “qualified <strong>pointer to type</strong>“</p></blockquote><p>qualified 等一下再談，我們可以看到 array type 如果被宣告在 parameter list 裡面的話會被轉換成 pointer type，這時候就會有 array to pointer decay 的問題。</p><p>array to pointer decay 最常碰到的一個問題就是 <code>sizeof</code> 的執行結果，我們知道如果對一個變數使用 <code>sizeof</code> 會得到該變數的記憶體大小 (in bytes)，剛剛有提到 array type 是一整塊的記憶體，所以 <code>sizeof</code> 會回傳整塊記憶體的大小，例如 <code>sizeof int [10]</code> 會得到 40，但 pointer 是一個儲存地址的記憶體，所以 <code>sizeof</code> 會得到儲存該地址的記憶體大小，例如 <code>sizeof int *</code> 在 64 位元的系統下會得到 8。</p><p>回到 function declaration，因為 array type 在 function declaration 時會被 decay 成 pointer，所以以下程式的執行結果印出的會是 8 而不是 24<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a[<span class="number">3</span>])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lu\n"</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>事實上如果你對 array paramter 做 sizeof，編譯器會有 warning<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">warning: sizeof on<span class="built_in"> array </span>function parameter will<span class="built_in"> return </span>size of 'int *' instead of 'int [3]'</span><br></pre></td></tr></table></figure></p><p>因為是 pointer type，所以可以帶入任意長度的 array<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">fn(a); <span class="comment">// working, of course, printout = 8</span></span><br><span class="line">fn(b); <span class="comment">// still working, printout = 8</span></span><br></pre></td></tr></table></figure></p><p>所以其實在 parameter list 中的 size 是沒有作用的，也可以直接省略不寫，或直接宣告成 pointer<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> *a)</span></span>;</span><br></pre></td></tr></table></figure></p><p>以上宣告方式都是等價的</p><h3 id="Type-Qualifier-static-N-and"><a href="#Type-Qualifier-static-N-and" class="headerlink" title="Type Qualifier, [static N], and [*]"></a>Type Qualifier, <code>[static N]</code>, and <code>[*]</code></h3><p>array declarator 完整的定義如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D[type-qualifier-<span class="built_in">list</span>(opt) assignment-expression(opt)]</span><br><span class="line">D[<span class="keyword">static</span> type-qualifier-<span class="built_in">list</span>(opt) assignment-expression]</span><br><span class="line">D[type-qualifier-<span class="built_in">list</span> <span class="keyword">static</span> assignment-expression]</span><br><span class="line">D[type-qualifier-<span class="built_in">list</span>(opt) *]</span><br></pre></td></tr></table></figure></p><p>我們常見的 <code>arr[N]</code> 是不包含 type qualifier 的第一種，其他所有的可能都只能被用在 function declaration 的 parameter list 裡面 (6.7.5.2.1)</p><blockquote><p>The optional type qualifiers and the keyword static shall <strong>appear only in a declaration of a function parameter with an array type</strong>, and then <strong>only in the outer most array type derivation</strong>.</p></blockquote><p>type qualifier 就是指 <code>const</code> <code>restrict</code> <code>volatile</code> 這三個關鍵字，代表該變數在記憶體中的特性，有興趣可以自己研究，改天嘗試看看寫一篇介紹。</p><p>第二、三個基本上是同一件事，也就是「在 function parameter 中的 array type 可以在大小之前加入 <code>static</code> 關鍵字，且可以加上 type qualifier」，兩句只是想表達 <code>static</code> 跟 type qualifier 可以交換順序。</p><p>最後一個與 VLA 有關，表示你可以這樣在 parameter 中宣告 VLA <code>fn(int a[*])</code> 不過這只能在 function prototype 中使用，function definition 中是不允許的，待會再詳細說明。</p><p>後半段 outer most array 的部分和超過一維的矩陣有關，最後會提到。</p><h4 id="Type-Qualifier"><a href="#Type-Qualifier" class="headerlink" title="Type Qualifier"></a>Type Qualifier</h4><p>type qualifier 會作用在轉換過後的 pointer，例如以下兩個宣告是等價的<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn1</span><span class="params">(<span class="keyword">int</span> a[<span class="keyword">const</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn1</span><span class="params">(<span class="keyword">int</span> *<span class="keyword">const</span> a)</span></span>;</span><br></pre></td></tr></table></figure></p><blockquote><p>註：<code>int const *a</code> 和 <code>int *const a</code> 是不一樣的，前者為該 pointer 指向的空間為 const，後者表示該 pointer 所在的記憶體空間為 const，可以將前者讀做 “pointer to const” 後者讀做 “const pointer” 方便記憶。</p></blockquote><h4 id="static-N"><a href="#static-N" class="headerlink" title="[static N]"></a><code>[static N]</code></h4><p>static 關鍵字後面一定要接一個數字，表示傳入的 array 至少要大於這個大小，這是由編譯器進行檢查的，如果傳入小於該大小的 array (包含 null) 會有 warning (而非 error)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn2</span><span class="params">(<span class="keyword">int</span> arr[<span class="keyword">static</span> <span class="number">4</span>])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">fn2(b); <span class="comment">// working without warning or error</span></span><br><span class="line">fn2(a); <span class="comment">// warning: array argument is too small; contains 3 elements, callee requires at least 4 [-Warray-bounds]</span></span><br><span class="line">fn2(<span class="literal">NULL</span>); <span class="comment">// warning: null passed to a callee that requires a non-null argument [-Wnonnull]</span></span><br></pre></td></tr></table></figure></p><h4 id=""><a href="#" class="headerlink" title="[*]"></a><code>[*]</code></h4><p>這是給 VLA 用的，如果你的 array 是個 VLA 的話，可以在 function prototype 用 <code>[*]</code> 宣告，如果你不知道 VLA 用哪個變數宣告大小<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn3</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span> [*])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn3</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> arr[n])</span></span>;</span><br></pre></td></tr></table></figure></p><p>到這你可能會想個問題，既然 array 會被 decay 成 pointer，那 VLA 有什麼意義?</p><p>沒錯，上述例子等價<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn3</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> arr[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn3</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> *arr)</span></span>;</span><br></pre></td></tr></table></figure></p><p>因此這裡使用 VLA 是沒有意義的，但如果宣告的是一個二維的 array type 的話，就有差別了，在那之前先來看看二維陣列會有什麼樣的行為</p><h3 id="2D-Array"><a href="#2D-Array" class="headerlink" title="2D Array"></a>2D Array</h3><p>宣告一個二維陣列，宣告方式和一維的類似<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> b2[<span class="number">4</span>][<span class="number">4</span>];</span><br></pre></td></tr></table></figure></p><p>首先並不存在「二維陣列」這種型別，上面這樣的宣告應該解讀為「以 “長度為 4 的 int 陣列”  element type，長度是 4 的陣列」所以他還是一個 array type，只是他的 element type 也是個 array type。</p><p>還記得前面有提到 element type 不能是 incomplete 嗎? <code>int []</code> 做為 incomplete type 不能出現在 element type 中，因此 <code>int [][]</code> 是不合法的。因為這個規定，兩層的 incomplete type + initializer 是行不通的，但只有第一層是 incomplete type 是沒問題的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a2[][] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">    &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">&#125;; <span class="comment">// error: array has incomplete element type 'int []'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a2[][<span class="number">3</span>] = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">    &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">&#125;; <span class="comment">// working</span></span><br></pre></td></tr></table></figure><h3 id="2D-Array-as-Function-Parameter"><a href="#2D-Array-as-Function-Parameter" class="headerlink" title="2D Array as Function Parameter"></a>2D Array as Function Parameter</h3><p>那麼如果將 2D array 做為參數會發生什麼事情呢<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn4</span><span class="params">(<span class="keyword">int</span> arr[<span class="number">10</span>][<span class="number">10</span>])</span></span>;</span><br></pre></td></tr></table></figure></p><p>首先最外層的 array type 會 decay 成指向陣列第一個元素的 pointer，也就是指向第一個 <code>int [10]</code> array 的 <strong>pointer</strong>，接下來因為他已經是 pointer type 而不是 array type，所以並不會繼續 decay 下去，因此上面與以下宣告等價<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn4</span><span class="params">(<span class="keyword">int</span> (*arr)[<span class="number">10</span>])</span></span>;</span><br></pre></td></tr></table></figure><br>且與以下宣告不等價<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn5</span><span class="params">(<span class="keyword">int</span> **arr)</span></span>;  <span class="comment">// try to change fn5 to fn4, you'll get conflict definition</span></span><br></pre></td></tr></table></figure></p><blockquote><p>註：<code>int *arr[N]</code> 和 <code>int (*arr)[N]</code> 不等價，前者等價 <code>int *(arr[N])</code>，是 <code>int *</code> 的 array，後者是指向 <code>int [N]</code> 的 pointer，可以將前者讀做 “array of pointers” 後者讀做 “pointer to an array” 方便記憶。</p></blockquote><p>回到 VLA，考慮以下例子<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> arr[n][m])</span></span>;</span><br></pre></td></tr></table></figure></p><p><code>arr</code> 會被 decay 成 pointer，指向的是一個長度是 m 的 VLA。其 function prototype 可以這樣宣告<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn6</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span> arr[*][*])</span></span>;</span><br></pre></td></tr></table></figure><br>且與以下宣告等價<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn6</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span> arr[][*])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn6</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span> (*arr)[*])</span></span>;</span><br></pre></td></tr></table></figure><br>與以下宣告不等價<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn7</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span> arr[][])</span></span>; <span class="comment">// error: array has incomplete element type 'int []'</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn8</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span> **arr)</span></span>; <span class="comment">// try to change fn8 to fn6, you'll get conflict definition</span></span><br></pre></td></tr></table></figure><br>其中第一個是不允許的，前面已經解釋過了</p><p>除此之外，剛剛提到的 type-specifier 和 static 關鍵字也只能寫在最外層的中括號裡，因為其他的並不會被 cast 成 pointer，在裡面指定 type-specifier 和 static 並沒有意義，可以回去看剛剛提到的 (6.7.5.2.1) 的後半句。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn9</span><span class="params">(<span class="keyword">int</span> arr[<span class="keyword">const</span> <span class="number">10</span>][<span class="number">10</span>])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn10</span><span class="params">(<span class="keyword">int</span> arr[<span class="keyword">static</span> <span class="number">10</span>][<span class="number">10</span>])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn11</span><span class="params">(<span class="keyword">int</span> arr[][<span class="keyword">const</span> <span class="number">10</span>])</span></span>; <span class="comment">// error: type qualifier used in non-outermost array type derivation</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn12</span><span class="params">(<span class="keyword">int</span> arr[][<span class="keyword">static</span> <span class="number">10</span>])</span></span>; <span class="comment">// error: 'static' used in non-outermost array type derivation</span></span><br></pre></td></tr></table></figure></p><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>如果是 C++ 可以用 pass by reference 來避免 array to pointer decay<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> (&amp;arr)[<span class="number">10</span>])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span> arr; <span class="comment">// 40!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>因為 array parameter 的 array to pointer decay 的特性，你無法使用常見的 <a href="https://stackoverflow.com/questions/37538/how-do-i-determine-the-size-of-my-array-in-c" target="_blank" rel="noopener">用 sizeof 去計算 array 的長度</a> 的方法來得到 array 長度<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn13</span><span class="params">(<span class="keyword">int</span> arr[<span class="number">10</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span> = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lu\n"</span>, <span class="built_in">size</span>); <span class="comment">// get 2 instead of 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果你想這麼做的話你必須讓 callee 去做這件事情並把 size 作為參數傳入<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn14</span><span class="params">(<span class="keyword">int</span> <span class="built_in">size</span>, <span class="keyword">int</span> arr[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lu\n"</span>, <span class="built_in">size</span>); <span class="comment">// get 10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">size</span> = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">fn14(<span class="built_in">size</span>, arr);</span><br></pre></td></tr></table></figure></p><p>或是利用 C++ 的 pass by reference<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> (&amp;arr)[<span class="number">10</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span> = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">size</span>; <span class="comment">// get 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>就是這個問題困擾了我許久，不知道該怎麼在 function 裡面得到長度的資訊，此外讓二維陣列做為參數傳入的方法也是不太好理解的東西。</p><p>以上！</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>所有測試程式碼都在這裡面，可以直接執行執行，並嘗試把會錯誤的幾行註解拿掉編譯看看<br><a href="https://repl.it/join/wzkmjaqm-d4n1el" target="_blank" rel="noopener">https://repl.it/join/wzkmjaqm-d4n1el</a></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf" target="_blank" rel="noopener">ISO/IEC 9899:1999 - N1256 (C99)</a></li><li><a href="https://stackoverflow.com/questions/36071441/what-is-a-full-declarator-in-c" target="_blank" rel="noopener">What is a full declarator in C? - Stack Overflow</a></li><li><a href="https://stackoverflow.com/questions/32985424/is-the-operand-of-sizeof-evaluated-with-a-vla" target="_blank" rel="noopener">Is the operand of <code>sizeof</code> evaluated with a VLA? - Stack Overflow</a></li><li><a href="https://stackoverflow.com/questions/41538342/pointer-to-array-as-function-argument-in-c" target="_blank" rel="noopener">pointer to array as function argument in C - Stack Overflow</a></li><li><a href="https://stackoverflow.com/questions/33291624/why-do-arrays-in-c-decay-to-pointers" target="_blank" rel="noopener">Why do arrays in C decay to pointers? - Stack Overflow</a></li><li><a href="https://stackoverflow.com/questions/17371645/why-use-an-asterisk-instead-of-an-integer-for-a-vla-array-parameter-of-a-f" target="_blank" rel="noopener">Why use an asterisk “[*]” instead of an integer for a VLA array parameter of a function? - Stack Overflow</a></li><li><a href="https://stackoverflow.com/questions/10007986/c-pass-an-array-by-reference" target="_blank" rel="noopener">C++ pass an array by reference - Stack Overflow</a></li><li><a href="https://docs.oracle.com/cd/E19205-01/819-5265/bjals/index.html" target="_blank" rel="noopener">6.11 Incomplete Types (Sun Studio 12: C User’s Guide)</a></li><li><a href="https://en.cppreference.com/w/cpp/language/array#Array-to-pointer_decay" target="_blank" rel="noopener">Array declaration#Array to pointer decay (cppreference.com)</a></li><li><a href="https://en.cppreference.com/w/cpp/language/aggregate_initialization" target="_blank" rel="noopener">Aggregate initialization (cppreference.com)</a></li><li><a href="https://en.cppreference.com/w/c/language/type" target="_blank" rel="noopener">Type (cppreference.com)</a></li><li><a href="https://hamberg.no/erlend/posts/2013-02-18-static-array-indices.html" target="_blank" rel="noopener">A nice, little known C feature: Static array indices in parameter declarations</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這是嘗試把 C 的 array function parameter 搞懂的一篇筆記。&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;從很久以前剛開始學 C 的時候就對如何讓 function 接收 array parameter 有很大的疑問，此外 C++ 的 array paramter 又有不太一樣的行為，因此後來學 C++ 之後更亂了，這次花點時間嘗試把所有東西搞懂，如果有人發現我哪邊還是搞錯的話歡迎大家指正。&lt;/p&gt;
&lt;p&gt;文中引用 C 語言標準中的章節如果沒特別註明以 C99 為主。&lt;/p&gt;
&lt;h2 id=&quot;C-Array-Type&quot;&gt;&lt;a href=&quot;#C-Array-Type&quot; class=&quot;headerlink&quot; title=&quot;C Array Type&quot;&gt;&lt;/a&gt;C Array Type&lt;/h2&gt;&lt;h3 id=&quot;C-Types&quot;&gt;&lt;a href=&quot;#C-Types&quot; class=&quot;headerlink&quot; title=&quot;C Types&quot;&gt;&lt;/a&gt;C Types&lt;/h3&gt;
    
    </summary>
    
      <category term="c" scheme="https://blog.danielchen.cc/categories/c/"/>
    
    
      <category term="c" scheme="https://blog.danielchen.cc/tags/c/"/>
    
      <category term="c++" scheme="https://blog.danielchen.cc/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>[文章分享] 卷積神經網路 (Convolutional Neural Nets) 及物件偵測 (Object Detection) 方法演化史</title>
    <link href="https://blog.danielchen.cc/2020/05/26/conv-nets-object-detection-history/"/>
    <id>https://blog.danielchen.cc/2020/05/26/conv-nets-object-detection-history/</id>
    <published>2020-05-26T21:19:53.000Z</published>
    <updated>2021-08-11T00:36:31.534Z</updated>
    
    <content type="html"><![CDATA[<p>分享 18 年的兩篇文章，有關 ConvNet 以及基於 ConvNets 的物件偵測方法的演化史，適合對 CNN 有一定程度了解的人作為深入學習 CNN 結構改進的方法與背後的數學思考的入門，以及有 CNN 基礎者的物件偵測方法入門，或是對這兩個領域都很熟悉，可以作為複習或參考筆記使用。</p><p>因為這兩篇是 18 年的文章，這兩年這兩個領域有更多後續的發展，但 18 年可說是 CNN 跟 ObjectDetection 的頂峰之年，許多關鍵的演算法都在 12~18 年間提出，若想了解整個領域的發展過程，節至 18 年的內容已經很全面，對最新的技術有興趣者可另外再找資料。</p><h3 id="卷积神经网络结构演变（form-Hubel-and-Wiesel-to-SENet）——学习总结，文末附参考论文"><a href="#卷积神经网络结构演变（form-Hubel-and-Wiesel-to-SENet）——学习总结，文末附参考论文" class="headerlink" title="卷积神经网络结构演变（form Hubel and Wiesel to SENet）——学习总结，文末附参考论文"></a><a href="https://zhuanlan.zhihu.com/p/34621135" target="_blank" rel="noopener">卷积神经网络结构演变（form Hubel and Wiesel to SENet）——学习总结，文末附参考论文</a></h3><p>這篇文章講解了 CNN 從最早啟發卷積神經網路研究，由 Hubel 和 Wiesel 等人發表建模貓視覺神經系統的文章開始，至 LeNet、AlexNet、VGG、Inception、ResNet、SENet，文末還有對輕量化網路如 MobileNet、ShuffleNet 的討論，可說是相當全面。文章中講解各個網路的發明的動機為何，解決了什麼問題，以及有哪些缺陷，對於理解 CNN 中各種工具的作用相當有幫助。</p><p><strong>[Table of Content]</strong></p><ol><li>早期的嘗試<ol><li>Hubel and Wiesel 的貓實驗 [<a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1557912/pdf/jphysiol01104-0228.pdf" target="_blank" rel="noopener">Hubel and Wiesel (1968)</a>]</li><li>NeoCognitron [<a href="https://www.rctn.org/bruno/public/papers/Fukushima1980.pdf" target="_blank" rel="noopener">Fukushima (1980)</a>]</li><li>LeCun 的早期研究 [<a href="http://yann.lecun.com/exdb/publis/pdf/lecun-89e.pdf" target="_blank" rel="noopener">LeCun (1989)</a>]</li><li>LeNet [<a href="http://yann.lecun.com/exdb/publis/pdf/lecun-01a.pdf" target="_blank" rel="noopener">LeCun (1998)</a>]</li></ol></li><li>歷史轉折<ol><li>AlexNet <a href="https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf" target="_blank" rel="noopener">Krizhevsky (2012)</a>]</li></ol></li><li>網路加深<ol><li>VGG [<a href="https://arxiv.org/pdf/1409.1556.pdf" target="_blank" rel="noopener">Simonyan (2014)</a>]</li><li>PReLU Net (MSRA-Net) [<a href="https://arxiv.org/pdf/1502.01852.pdf" target="_blank" rel="noopener">He (2015)</a>]</li></ol></li><li>卷積模組 (Conv Modules)<ol><li>NIN [<a href="https://arxiv.org/pdf/1312.4400.pdf" target="_blank" rel="noopener">Lin (2013)</a>]</li><li>GoogleNet [<a href="https://arxiv.org/pdf/1409.4842.pdf" target="_blank" rel="noopener">Szegedy (2014)</a>]</li><li>Inception V3 [<a href="https://arxiv.org/pdf/1512.00567.pdf" target="_blank" rel="noopener">Szegedy (2015)</a>]</li><li>Inception V4 (Inception ResNet) [<a href="https://arxiv.org/pdf/1602.07261.pdf" target="_blank" rel="noopener">Szegedy (2016)</a>]</li></ol></li><li>集成線路 (應該是 Ensemble Connection)<ol><li>ResNet [<a href="https://arxiv.org/pdf/1512.03385.pdf" target="_blank" rel="noopener">He (2015)</a>]</li><li>Identity Mappings in ResNet (改進 ResNet 的缺點) [<a href="https://arxiv.org/pdf/1603.05027.pdf" target="_blank" rel="noopener">He (2016)</a>]</li><li>ResNeXt [<a href="https://arxiv.org/pdf/1611.05431.pdf" target="_blank" rel="noopener">Xie (2016)</a>]</li><li>DenseNet [<a href="https://arxiv.org/pdf/1608.06993.pdf" target="_blank" rel="noopener">Huang (2016)</a>]</li><li>Xception [<a href="https://arxiv.org/pdf/1610.02357.pdf" target="_blank" rel="noopener">Chollet (2016)</a>]</li><li>SENet [<a href="https://arxiv.org/pdf/1709.01507.pdf" target="_blank" rel="noopener">Hu (2017)</a>]</li></ol></li><li>輕量化模型<ol><li>MobileNet V1 [<a href="https://arxiv.org/pdf/1704.04861.pdf" target="_blank" rel="noopener">Howard (2017)</a>]</li><li>MobileNet V2 [<a href="https://arxiv.org/pdf/1801.04381.pdf" target="_blank" rel="noopener">Sandler (2018)</a>]</li><li>SuffleNet [<a href="https://arxiv.org/pdf/1707.01083.pdf" target="_blank" rel="noopener">Zhang (2017)</a>]</li></ol></li></ol><h3 id="關於影像辨識，所有你應該知道的深度學習模型"><a href="#關於影像辨識，所有你應該知道的深度學習模型" class="headerlink" title="關於影像辨識，所有你應該知道的深度學習模型"></a><a href="https://medium.com/cubo-ai/%E7%89%A9%E9%AB%94%E5%81%B5%E6%B8%AC-object-detection-740096ec4540" target="_blank" rel="noopener">關於影像辨識，所有你應該知道的深度學習模型</a></h3><p>這篇則是針對 NN-based 的物件偵測演算法的介紹，從 R-CNN、Fast R-CNN、Faster R-CNN、Mask R-CNN 至 YOLO，做詳細的演進過程介紹。</p><p><strong>[Table of Content]</strong></p><ol><li>R-CNN [<a href="https://arxiv.org/abs/1311.2524" target="_blank" rel="noopener">Girshick (2014)</a>]</li><li>Fast R-CNN [<a href="https://arxiv.org/abs/1504.08083" target="_blank" rel="noopener">Girshick (2015)</a>]</li><li>Faster R-CNN [<a href="https://arxiv.org/abs/1506.01497" target="_blank" rel="noopener">Ren (2016)</a>]</li><li>Mask R-CNN [<a href="https://arxiv.org/pdf/1703.06870.pdf" target="_blank" rel="noopener">He (2017)</a>]</li><li>YOLO [<a href="https://arxiv.org/pdf/1506.02640.pdf" target="_blank" rel="noopener">Redmon (2015)</a>]</li><li>YOLOv2 [<a href="https://arxiv.org/pdf/1612.08242.pdf" target="_blank" rel="noopener">Redmon (2016)</a>]</li></ol><p>另外補充一篇 19 年的文章 <a href="https://heartbeat.fritz.ai/a-2019-guide-to-object-detection-9509987954c3" target="_blank" rel="noopener">A 2019 Guide to Object Detection</a>，英文的，但內容大致上相同，除了下列幾個模型 </p><ol><li>SSD [<a href="https://arxiv.org/pdf/1512.02325" target="_blank" rel="noopener">Liu (2015)</a>]</li><li>CenterNet [<a href="https://arxiv.org/pdf/1904.07850v2.pdf" target="_blank" rel="noopener">Zhou (2019)</a>]</li></ol><p>此外下列論文是比較新的，也值得去看看</p><ol><li>RetinaNet [<a href="https://arxiv.org/pdf/1708.02002.pdf" target="_blank" rel="noopener">Lin (2017)</a>]</li><li>FPN [<a href="https://arxiv.org/pdf/1612.03144.pdf" target="_blank" rel="noopener">Lin 2017</a>]</li><li>YOLOv3 [<a href="https://arxiv.org/pdf/1804.02767.pdf" target="_blank" rel="noopener">Redmon (2018)</a>]</li><li>Casecade R-CNN [<a href="https://arxiv.org/pdf/1906.09756.pdf" target="_blank" rel="noopener">Cai (2019)</a>]</li><li>ResNeSt [<a href="https://arxiv.org/pdf/2004.08955.pdf" target="_blank" rel="noopener">Zhang (2020)</a>]</li></ol><p>Object Detection 的 Network Architecture Search (NAS)</p><ol><li>NAS-FPN [<a href="https://arxiv.org/pdf/1904.07392.pdf" target="_blank" rel="noopener">Ghaisi (2019)</a>]</li><li>NAS-FCOS [<a href="https://arxiv.org/pdf/1906.04423.pdf" target="_blank" rel="noopener">Wang (2019)</a>]</li><li>DetNAS [<a href="https://arxiv.org/pdf/1903.10979.pdf" target="_blank" rel="noopener">Chen (2019)</a>]</li></ol><h3 id="Other-references"><a href="#Other-references" class="headerlink" title="Other references"></a>Other references</h3><ul><li><a href="https://lilianweng.github.io/lil-log/2017/10/29/object-recognition-for-dummies-part-1.html" target="_blank" rel="noopener">Object Detection for Dummies Part 1: Gradient Vector, HOG, and SS</a></li><li><a href="https://lilianweng.github.io/lil-log/2017/12/31/object-recognition-for-dummies-part-3.html" target="_blank" rel="noopener">Object Detection for Dummies Part 3: R-CNN Family</a></li><li><a href="https://lilianweng.github.io/lil-log/2017/12/15/object-recognition-for-dummies-part-2.html" target="_blank" rel="noopener">Object Detection for Dummies Part 2: CNN, DPM and Overfeat</a></li><li><a href="https://lilianweng.github.io/lil-log/2018/12/27/object-detection-part-4.html" target="_blank" rel="noopener">Object Detection Part 4: Fast Detection Models</a></li><li><a href="http://deeplearning.net/tutorial/contents.html" target="_blank" rel="noopener">DeepLearning Tutorial</a></li><li><a href="https://blog.netcetera.com/object-detection-and-tracking-in-2020-f10fb6ff9af3" target="_blank" rel="noopener">Object Detection and Tracking in 2020</a></li><li><a href="https://paperswithcode.com/task/object-detection" target="_blank" rel="noopener">Object Detection | Paper with Code</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享 18 年的兩篇文章，有關 ConvNet 以及基於 ConvNets 的物件偵測方法的演化史，適合對 CNN 有一定程度了解的人作為深入學習 CNN 結構改進的方法與背後的數學思考的入門，以及有 CNN 基礎者的物件偵測方法入門，或是對這兩個領域都很熟悉，可以作為複習或參考筆記使用。&lt;/p&gt;
&lt;p&gt;因為這兩篇是 18 年的文章，這兩年這兩個領域有更多後續的發展，但 18 年可說是 CNN 跟 ObjectDetection 的頂峰之年，許多關鍵的演算法都在 12~18 年間提出，若想了解整個領域的發展過程，節至 18 年的內容已經很全面，對最新的技術有興趣者可另外再找資料。&lt;/p&gt;
&lt;h3 id=&quot;卷积神经网络结构演变（form-Hubel-and-Wiesel-to-SENet）——学习总结，文末附参考论文&quot;&gt;&lt;a href=&quot;#卷积神经网络结构演变（form-Hubel-and-Wiesel-to-SENet）——学习总结，文末附参考论文&quot; class=&quot;headerlink&quot; title=&quot;卷积神经网络结构演变（form Hubel and Wiesel to SENet）——学习总结，文末附参考论文&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/34621135&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;卷积神经网络结构演变（form Hubel and Wiesel to SENet）——学习总结，文末附参考论文&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;這篇文章講解了 CNN 從最早啟發卷積神經網路研究，由 Hubel 和 Wiesel 等人發表建模貓視覺神經系統的文章開始，至 LeNet、AlexNet、VGG、Inception、ResNet、SENet，文末還有對輕量化網路如 MobileNet、ShuffleNet 的討論，可說是相當全面。文章中講解各個網路的發明的動機為何，解決了什麼問題，以及有哪些缺陷，對於理解 CNN 中各種工具的作用相當有幫助。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Table of Content]&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;早期的嘗試&lt;ol&gt;
&lt;li&gt;Hubel and Wiesel 的貓實驗 [&lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1557912/pdf/jphysiol01104-0228.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hubel and Wiesel (1968)&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;NeoCognitron [&lt;a href=&quot;https://www.rctn.org/bruno/public/papers/Fukushima1980.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fukushima (1980)&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;LeCun 的早期研究 [&lt;a href=&quot;http://yann.lecun.com/exdb/publis/pdf/lecun-89e.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeCun (1989)&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;LeNet [&lt;a href=&quot;http://yann.lecun.com/exdb/publis/pdf/lecun-01a.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeCun (1998)&lt;/a&gt;]&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;歷史轉折&lt;ol&gt;
&lt;li&gt;AlexNet &lt;a href=&quot;https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Krizhevsky (2012)&lt;/a&gt;]&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;網路加深&lt;ol&gt;
&lt;li&gt;VGG [&lt;a href=&quot;https://arxiv.org/pdf/1409.1556.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Simonyan (2014)&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;PReLU Net (MSRA-Net) [&lt;a href=&quot;https://arxiv.org/pdf/1502.01852.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;He (2015)&lt;/a&gt;]&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;卷積模組 (Conv Modules)&lt;ol&gt;
&lt;li&gt;NIN [&lt;a href=&quot;https://arxiv.org/pdf/1312.4400.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lin (2013)&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;GoogleNet [&lt;a href=&quot;https://arxiv.org/pdf/1409.4842.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Szegedy (2014)&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Inception V3 [&lt;a href=&quot;https://arxiv.org/pdf/1512.00567.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Szegedy (2015)&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Inception V4 (Inception ResNet) [&lt;a href=&quot;https://arxiv.org/pdf/1602.07261.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Szegedy (2016)&lt;/a&gt;]&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;集成線路 (應該是 Ensemble Connection)&lt;ol&gt;
&lt;li&gt;ResNet [&lt;a href=&quot;https://arxiv.org/pdf/1512.03385.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;He (2015)&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Identity Mappings in ResNet (改進 ResNet 的缺點) [&lt;a href=&quot;https://arxiv.org/pdf/1603.05027.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;He (2016)&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;ResNeXt [&lt;a href=&quot;https://arxiv.org/pdf/1611.05431.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Xie (2016)&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;DenseNet [&lt;a href=&quot;https://arxiv.org/pdf/1608.06993.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Huang (2016)&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Xception [&lt;a href=&quot;https://arxiv.org/pdf/1610.02357.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Chollet (2016)&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;SENet [&lt;a href=&quot;https://arxiv.org/pdf/1709.01507.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hu (2017)&lt;/a&gt;]&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;輕量化模型&lt;ol&gt;
&lt;li&gt;MobileNet V1 [&lt;a href=&quot;https://arxiv.org/pdf/1704.04861.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Howard (2017)&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;MobileNet V2 [&lt;a href=&quot;https://arxiv.org/pdf/1801.04381.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sandler (2018)&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;SuffleNet [&lt;a href=&quot;https://arxiv.org/pdf/1707.01083.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Zhang (2017)&lt;/a&gt;]&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="machine learning" scheme="https://blog.danielchen.cc/categories/machine-learning/"/>
    
    
      <category term="machine learning" scheme="https://blog.danielchen.cc/tags/machine-learning/"/>
    
      <category term="object detection" scheme="https://blog.danielchen.cc/tags/object-detection/"/>
    
      <category term="neural networks" scheme="https://blog.danielchen.cc/tags/neural-networks/"/>
    
  </entry>
  
  <entry>
    <title>Entropy、Cross-Entropy 與 KL-Divergence (2)</title>
    <link href="https://blog.danielchen.cc/2020/05/20/entropy-cross-entropy-and-KL-divergence-2/"/>
    <id>https://blog.danielchen.cc/2020/05/20/entropy-cross-entropy-and-KL-divergence-2/</id>
    <published>2020-05-20T07:28:12.000Z</published>
    <updated>2021-08-11T00:36:31.534Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇我們討論了 Entroy 的觀念以及如何從 Entropy 延伸出 Cross Entropy 的概念，有了以上兩個背景知識之後 KL Divergence 其實相當簡單，KL Divergence 用資訊熵的角度來衡量兩個 Distribution 的差異程度，其定義如下</p><script type="math/tex; mode=display">D_{KL}(P || Q) = H(P, Q) - H(P)</script><p>或</p><script type="math/tex; mode=display">\begin{align}D_{KL}(P || Q) &= E_P[logQ(x)] - E_P[logP(x)] \\&= E_P[logQ(x) - logP(x)] \\&= E_P[log \frac{Q(x)}{P(x)}]\end{align}</script><p>表示「以分佈 P 為參考，P 和 Q 的差異程度」，要注意第一句話很重要不可省略，因為 KL Divergence 是非對稱的，即 $D_{KL}(P || Q) \neq D_{KL}(Q || P)$。</p><p>根據上一篇文章的觀點，$H(P, Q)$ 是為欲以分布 $Q$ 編碼分布 $P$ 所需的資料長度，又 $H(P)$ 為欲對分布 $P$ 編碼所需的理想(最小)資料長度，那麼 KL Divergence 即為以 $Q$ 編碼 $P$ 所需「額外」的資料長度，也就是其距離理想編碼還差多少，若 $Q = P$ 則 KL Divergence 為 0 且 $H(P, Q) = H(P, P) = H(P)$，因此當 P 和 Q 越接近，則 KL Divergence 會越小。</p><h1 id="KL-Divergence-的非對稱性"><a href="#KL-Divergence-的非對稱性" class="headerlink" title="KL Divergence 的非對稱性"></a>KL Divergence 的非對稱性</h1><p>雖然 KL Divergence 也常作為 loss function 使用，但必須注意到一點是 KL Divergence 是非對稱的，我們可以觀察其定義</p><script type="math/tex; mode=display">\begin{align}D_{KL}(P || Q) &= E_P[log \frac{Q(x)}{P(x)}] \\D_{KL}(Q || P) &= E_Q[log \frac{P(x)}{Q(x)}] \\&= - E_Q[log \frac{Q(x)}{P(x)}]\end{align}</script><p>其中 $D_{KL}(P || Q)$ 使用 $P$ 來計算期望值，而 $D_{KL}(Q || P)$ 使用 $Q$ 來計算期望值，兩者並不相等，其意義也不同。</p><p>以 Supervised classification learner 觀點來看，我們的問題經常是要以類神經網路或其他模型去近似某一個真實的分布 $P_{real}$，使用從 $P_{real}$ 取樣的資料，樣本的資料分布為 $P_{data}$，我們通常假設 (或可以證明當樣本數越多時) $P_{real} \approx P_{data}$，Supervised classification learner 就是盡量讓模型的機率分布 $Q$ 與 $P_{data}$ 接近，因此我們可以用 $D_{KL}(P_{data} || Q)$ 來衡量 $Q$ 與 $P_{data}$ 的差異，即以 $Q$ 來表達 $P_{data}$ 距離最佳表達還差多少。</p><p>但單純以評估「兩個分布的差異」而言的話 KL Divergence 似乎不那麼理想，因為距離直覺上應該是對稱的，但以 Supervised classification learner 來說 KL Divergence 已足夠，因為我們有個明顯的參考對象，對於此問題有另一個評估兩分佈差異且具有對稱性值的 metrics 叫做 JS Divergence，即 GAN 所使用的 loss function，GAN 的成功有一部分說法是認為其採用了 JS Divergence，容我到下一篇再作介紹。</p><h1 id="KL-Divergence-與-Cross-Entropy"><a href="#KL-Divergence-與-Cross-Entropy" class="headerlink" title="KL Divergence 與 Cross-Entropy"></a>KL Divergence 與 Cross-Entropy</h1><p>延續上一個小節的範例，Supervised classification learner 的目標就是最小化 $D_{KL}(P_{data} || Q)$，但我們再次觀察 KL Divergence 的定義</p><script type="math/tex; mode=display">D_{KL}(P_{data} || Q) = H(P_{data}, Q) - H(P_{data})</script><p>你可以發現在我們的問題裡 data 是已知的，因此 $H(P_{data})$ 是定值，最小化 $D_{KL}(P_{data} || Q)$ 等價 $H(P_{data}, Q)$。</p><p>我們更常使用 $H(P_{data}, Q)$，因為 $D_{KL}(P_{data} || Q)$ 有除法運算，若分母值很小的話計算經常會出問題。</p><p>但是如果 $P$ 是不確定或不固定的，則兩者是不等價的，因為 $H(P, Q)$ 包含了 $P$ 的訊息量而 $D_{KL}(P || Q)$ 沒有。</p><h1 id="小節"><a href="#小節" class="headerlink" title="小節"></a>小節</h1><p>KL Divergence 的概念與 Cross Entropy 有相當大的關聯，若能夠理解 Cross Entropy 則 KL Divergence 只是其延伸而已，回憶一下資訊熵最初欲描述的問題，即<strong>對於編碼一已知機率分布的隨機事件，所需的最少位元數</strong>，Entropy 為最佳解，Cross Entropy 為使用另一個分佈近似的最佳解，KL Divergence 則是使用另一個分佈近似與最佳解的差距。</p><p>下一篇有機會的話可以來講解 JS Divergence 與 Wasserstein distance，另外兩個評估兩分佈差異的指標。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://towardsdatascience.com/demystifying-entropy-f2c3221e2550" target="_blank" rel="noopener">Demystifying Entropy - Naoki Shibuya</a></li><li><a href="https://towardsdatascience.com/demystifying-cross-entropy-e80e3ad54a8" target="_blank" rel="noopener">Demystifying Cross-Entropy - Naoki Shibuya</a></li><li><a href="https://towardsdatascience.com/demystifying-kl-divergence-7ebe4317ee68" target="_blank" rel="noopener">Demystifying KL Divergence - Naoki Shibuya</a></li><li><a href="https://stats.stackexchange.com/questions/357963/what-is-the-difference-cross-entropy-and-kl-divergence" target="_blank" rel="noopener">What is the difference Cross-entropy and KL divergence?</a></li><li><a href="https://stats.stackexchange.com/questions/265966/why-do-we-use-kullback-leibler-divergence-rather-than-cross-entropy-in-the-t-sne" target="_blank" rel="noopener">Why do we use Kullback-Leibler divergence rather than cross entropy in the t-SNE objective function?</a></li><li><a href="https://lilianweng.github.io/lil-log/2017/08/20/from-GAN-to-WGAN.html" target="_blank" rel="noopener">From GAN to WGAN</a></li></ul>]]></content>
    
    <summary type="html">
    
      
&lt;p&gt;在上一篇我們討論了 Entroy 的觀念以及如何從 Entropy 延伸出 Cross Entropy 的概念，有了以上兩個背景知識之後 KL Divergence 其實相當簡單，KL Divergence 用資訊熵的角度來衡量兩個 Distribution 的差異程度，其定義如下&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
D_{KL}(P || Q) = H(P, Q) - H(P)&lt;/script&gt;&lt;p&gt;或&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{align}
D_{KL}(P || Q) &amp;= E_P[logQ(x)] - E_P[logP(x)] \\
&amp;= E_P[logQ(x) - logP(x)] \\
&amp;= E_P[log \frac{Q(x)}{P(x)}]
\end{align}&lt;/script&gt;&lt;p&gt;表示「以分佈 P 為參考，P 和 Q 的差異程度」，要注意第一句話很重要不可省略，因為 KL Divergence 是非對稱的，即 $D_{KL}(P || Q) \neq D_{KL}(Q || P)$。&lt;/p&gt;
&lt;p&gt;根據上一篇文章的觀點，$H(P, Q)$ 是為欲以分布 $Q$ 編碼分布 $P$ 所需的資料長度，又 $H(P)$ 為欲對分布 $P$ 編碼所需的理想(最小)資料長度，那麼 KL Divergence 即為以 $Q$ 編碼 $P$ 所需「額外」的資料長度，也就是其距離理想編碼還差多少，若 $Q = P$ 則 KL Divergence 為 0 且 $H(P, Q) = H(P, P) = H(P)$，因此當 P 和 Q 越接近，則 KL Divergence 會越小。&lt;/p&gt;
&lt;h1 id=&quot;KL-Divergence-的非對稱性&quot;&gt;&lt;a href=&quot;#KL-Divergence-的非對稱性&quot; class=&quot;headerlink&quot; title=&quot;KL Divergence 的非對稱性&quot;&gt;&lt;/a&gt;KL Divergence 的非對稱性&lt;/h1&gt;&lt;p&gt;雖然 KL Divergence 也常作為 loss function 使用，但必須注意到一點是 KL Divergence 是非對稱的，我們可以觀察其定義&lt;/p&gt;
    
    </summary>
    
      <category term="machine learning" scheme="https://blog.danielchen.cc/categories/machine-learning/"/>
    
    
      <category term="machine learning" scheme="https://blog.danielchen.cc/tags/machine-learning/"/>
    
      <category term="math" scheme="https://blog.danielchen.cc/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>RaceOn Note - Simulation</title>
    <link href="https://blog.danielchen.cc/2020/03/10/RaceOn-Note-Simulation/"/>
    <id>https://blog.danielchen.cc/2020/03/10/RaceOn-Note-Simulation/</id>
    <published>2020-03-10T00:11:52.000Z</published>
    <updated>2021-08-11T00:36:31.534Z</updated>
    
    <content type="html"><![CDATA[<p>It is quite common to do experiment in a simulation environment when doing robotics research because you don’t want to break your hardware or injure people during tuning your algorithm.</p><p>I built a simulation environment for RaceOn competition. This post will provide instructions for setting up the environment and starting the RaceOn simulation.</p><h2 id="Simulation-software-Gazebo"><a href="#Simulation-software-Gazebo" class="headerlink" title="Simulation software - Gazebo"></a>Simulation software - Gazebo</h2><p>Gazebo is a free simulation software widely used in robotics research. It provide lots of built-in plugins for different type of sensors, actuators, and basic physics engine. Gazebo also works well with ROS. There’s a lot of ROS packages that help you control the model and retrieve information of your simulation environment through ROS framework.</p><h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><p>The environment I use is Ubuntu Mate 18.04 + ROS Melodic desktop-full installation. With desktop-full installation, Gazebo is included.</p><p>If you don’t have Ubuntu and ROS installed, you can try the Virtual Box image I built.</p><p><a href="https://drive.google.com/a/usc.edu/file/d/1FRY4Ysx_p8Ss7IdHxm0CgqmswSTQfGZk/view?usp=sharing" target="_blank" rel="noopener">Download the Image</a></p><h2 id="RACECAR"><a href="#RACECAR" class="headerlink" title="RACECAR"></a>RACECAR</h2><p><a href="https://mit-racecar.github.io/" target="_blank" rel="noopener">RACECAR</a> is an opensource project from MIT, designed for robotics research and teaching. The RACECAR itself is the name of a 1/10-scale mini race car with some common sensors such as LiDar, Camera, Depth Camera, and IMU. The mechanical configuration of that race car is quite similar to the one RaceOn use. Moreover, they also build a simulation environment based on Gazebo. Most of my works are based on their code.</p><h2 id="raceon-simulation"><a href="#raceon-simulation" class="headerlink" title="raceon-simulation"></a><code>raceon-simulation</code></h2><p>Let’s get start to setup a catkin workspace for raceon simulation.</p><p>The following are copied from <a href="https://github.com/d4n1elchen/raceon_simulation" target="_blank" rel="noopener"><code>d4n1elchen/raceon_simulation</code></a>. If there’s inconsistency between my repo and this post, please refer to the one in repo as the latest.</p><h3 id="Make-a-workspace-for-simulation"><a href="#Make-a-workspace-for-simulation" class="headerlink" title="Make a workspace for simulation"></a>Make a workspace for simulation</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/raceon_sim_ws/src</span><br><span class="line">cd ~/raceon_sim_ws</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure><h3 id="Source-the-workspace"><a href="#Source-the-workspace" class="headerlink" title="Source the workspace"></a>Source the workspace</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span> ~<span class="regexp">/raceon_sim_ws/</span>devel<span class="regexp">/setup.bash</span></span><br></pre></td></tr></table></figure><p>(Optional) Add it to bashrc<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"source ~/raceon_sim_ws/devel/setup.bash"</span> &gt;&gt; ~<span class="string">/.bashrc</span></span><br></pre></td></tr></table></figure></p><h3 id="Set-ROS-PYTHON-VERSION-to-3"><a href="#Set-ROS-PYTHON-VERSION-to-3" class="headerlink" title="Set ROS_PYTHON_VERSION to 3"></a>Set ROS_PYTHON_VERSION to 3</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">ROS_PYTHON_VERSION</span>=3</span><br></pre></td></tr></table></figure><p>(Optional) Add it to bashrc<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"export ROS_PYTHON_VERSION=3"</span> &gt;&gt; ~<span class="string">/.bashrc</span></span><br></pre></td></tr></table></figure></p><h3 id="Install-dependencies"><a href="#Install-dependencies" class="headerlink" title="Install dependencies"></a>Install dependencies</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ros-melodic-ros-control ros-melodic-gazebo-ros-control ros-melodic-ros-controllers python3-opencv ros-melodic-ackermann-msgs</span><br><span class="line">pip3 install pynput</span><br></pre></td></tr></table></figure><h3 id="Clone-dependencies"><a href="#Clone-dependencies" class="headerlink" title="Clone dependencies"></a>Clone dependencies</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd ~/raceon_sim_ws/src</span><br><span class="line">git clone https://github.com/wjwwood/serial.git</span><br><span class="line">git clone https://github.com/ros-drivers/ackermann_msgs.git</span><br><span class="line">git clone https://github.com/mit-racecar/racecar.git</span><br><span class="line">git clone https://github.com/mit-racecar/vesc.git</span><br><span class="line">git clone https://github.com/d4n1elchen/raceon.git</span><br><span class="line">git clone https://github.com/d4n1elchen/raceon_simulation.git</span><br><span class="line">git clone https://github.com/d4n1elchen/raceon_visualizer.git</span><br><span class="line">git clone https://github.com/d4n1elchen/racecar_gazebo.git</span><br></pre></td></tr></table></figure><h3 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/raceon_sim_ws</span></span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure><h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch raceon_simulation raceon_simulation.launch speed:=<span class="number">180</span> kp:=<span class="number">10</span></span><br></pre></td></tr></table></figure><p>If you got python module not found error, install missing packages using <code>pip3 install &lt;package_name&gt;</code>.</p><h2 id="Video-demo"><a href="#Video-demo" class="headerlink" title="Video demo"></a>Video demo</h2><style>.embed-container {    position: relative;    padding-bottom: 56.25%;    height: 0;    overflow: hidden;    max-width: 100%;  }  .embed-container iframe, .embed-container object, .embed-container embed {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;  }  </style><div class="embed-container"><iframe src="https://www.youtube.com/embed/U3WNZOiOz7Q" allowfullscreen frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"></iframe></div><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>To tune the simulation parameter to fit the real world well is not an easy work. For now, the car can replicate approximately 80% behavior of a real car. I use the same position estimation and control node running on the real car to control the simulated car. These nodes are from <code>raceon</code> repository, which is the same as the one in each team’s raspberry pi. You can try to adjust the parameters in <code>raceon_simulation/launch/raceon_simulation.launch</code> to see how the car react to those parameters, and verify the result by running the same parameters on a real car.</p><p>This post is just for setting up environment. I’ll write another post to explain how to modify the parameters or how I built this environment in detail … if I have time. XD</p><p>If you feel this is cool or find it helpful for your work, please don’t hesitate to give me a star and follow my GitHub profile!</p><p>Repository: <a href="https://github.com/d4n1elchen/raceon_simulation" target="_blank" rel="noopener">https://github.com/d4n1elchen/raceon_simulation</a><br>GitHub Profile: <a href="https://github.com/d4n1elchen" target="_blank" rel="noopener">https://github.com/d4n1elchen</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It is quite common to do experiment in a simulation environment when doing robotics research because you don’t want to break your hardware or injure people during tuning your algorithm.&lt;/p&gt;
&lt;p&gt;I built a simulation environment for RaceOn competition. This post will provide instructions for setting up the environment and starting the RaceOn simulation.&lt;/p&gt;
&lt;h2 id=&quot;Simulation-software-Gazebo&quot;&gt;&lt;a href=&quot;#Simulation-software-Gazebo&quot; class=&quot;headerlink&quot; title=&quot;Simulation software - Gazebo&quot;&gt;&lt;/a&gt;Simulation software - Gazebo&lt;/h2&gt;&lt;p&gt;Gazebo is a free simulation software widely used in robotics research. It provide lots of built-in plugins for different type of sensors, actuators, and basic physics engine. Gazebo also works well with ROS. There’s a lot of ROS packages that help you control the model and retrieve information of your simulation environment through ROS framework.&lt;/p&gt;
&lt;h2 id=&quot;Environment&quot;&gt;&lt;a href=&quot;#Environment&quot; class=&quot;headerlink&quot; title=&quot;Environment&quot;&gt;&lt;/a&gt;Environment&lt;/h2&gt;&lt;p&gt;The environment I use is Ubuntu Mate 18.04 + ROS Melodic desktop-full installation. With desktop-full installation, Gazebo is included.&lt;/p&gt;
    
    </summary>
    
      <category term="robotics" scheme="https://blog.danielchen.cc/categories/robotics/"/>
    
    
      <category term="robotics" scheme="https://blog.danielchen.cc/tags/robotics/"/>
    
      <category term="RaceOn" scheme="https://blog.danielchen.cc/tags/RaceOn/"/>
    
  </entry>
  
  <entry>
    <title>RaceOn Note - Live camera view</title>
    <link href="https://blog.danielchen.cc/2020/03/09/RaceOn-Note-Live-camera-view/"/>
    <id>https://blog.danielchen.cc/2020/03/09/RaceOn-Note-Live-camera-view/</id>
    <published>2020-03-09T02:26:21.000Z</published>
    <updated>2021-08-11T00:36:31.534Z</updated>
    
    <content type="html"><![CDATA[<p>The most useful feature of ROS that benefits our team is the realtime camera view. We use it a lot for tuning and calibrating the camera. It is also very useful for debugging. This post will explain how we get the realtime camera view on the laptop.</p><h2 id="Basic-concepts"><a href="#Basic-concepts" class="headerlink" title="Basic concepts"></a>Basic concepts</h2><p>Generally, ROS is nothing to do with “Operating System”. It is just a message communication framework. You can transfer data between nodes through ethernet by the three default messaging model in ROS: Publish/Subscribe, Service/Client, and Action. The pub/sub model is the mostly used one.</p><h3 id="Publish-Subscribe-model"><a href="#Publish-Subscribe-model" class="headerlink" title="Publish/Subscribe model"></a>Publish/Subscribe model</h3><p>This is a really simple conceptual communication model. It’s similar to newspaper or magazine subscription. The subscribers can subscribe “topics” they’re interested in. The publisher of a certain topic will publish messages to all subscribers that subscribe the topic. All the message passing goes through ethernet. So the publishing/subscribing can happen between nodes within the same machine, as well as transferring through nodes on different machines.</p><h3 id="Master-node"><a href="#Master-node" class="headerlink" title="Master node"></a>Master node</h3><p>To implement this protocol, ROS design a central node call “master node” that keeps all information about the topics, including the address of its publisher and subscriber. When a subscriber wants to subscribe a topic, it needs to register it through the master node, and then the master node will pass this information to publisher. When a publisher has something to submit, it will send the messages to the subscriber list provided by master node.</p><h2 id="Setup-a-ROS-Melodic-environment-on-your-laptop"><a href="#Setup-a-ROS-Melodic-environment-on-your-laptop" class="headerlink" title="Setup a ROS Melodic environment on your laptop"></a>Setup a ROS Melodic environment on your laptop</h2><p>If you’re using Ubuntu Linux, you can directly install ROS Melodic by going through this <a href="https://wiki.ros.org/melodic/Installation/Ubuntu" target="_blank" rel="noopener">official tutorial</a>.</p><p>If you’re running Windows or other operating system, you may want to use Virtual Machine to setup an environment. You can setup a brand new VM from scratch, install Ubuntu, and go through the tutorial mentioned above to setup one. But if you’re lazy or are afraid of making mistake. You can use the VirtualBox image we build for you.</p><p><a href="https://drive.google.com/a/usc.edu/file/d/1FRY4Ysx_p8Ss7IdHxm0CgqmswSTQfGZk/view?usp=sharing" target="_blank" rel="noopener">Download the Image</a></p><p>The image has Ubuntu Mate 18.04 installed with ROS Melodic and some essential package. Just import it into VirtualBox and launch.</p><p>The default password for user <code>raceon</code> is <code>Fight On!</code>. If you need to grant sudo permission.</p><h2 id="Locating-your-master-node"><a href="#Locating-your-master-node" class="headerlink" title="Locating your master node"></a>Locating your master node</h2><p>In the pre-built race-on-ros code delivered to all teams, we start a master node by <code>roscore</code> command when the raspberry pi boot. So you already have a master node running on raspberry pi. What you need here is to tell the ROS on your laptop “where is the master node”.</p><p>This is done by setup an environment variable called <a href="http://wiki.ros.org/ROS/EnvironmentVariables#ROS_MASTER_URI" target="_blank" rel="noopener"><code>ROS_MASTER_URI</code></a>.</p><p>If you use my VBox image above, open <code>~/.bashrc</code> and you’ll see the following line at the bottom of the file.<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">ROS_MASTER_URL</span>=http://localhost:11311</span><br></pre></td></tr></table></figure></p><p>By default, the master node address is set to <code>localhost</code>, which means the current machine. You need to change <code>localhost</code> to your raspberry pi’s hostname. (i.e. the host part of the link to your jupyter notebook: <code>raspberry-xxx</code> or <code>raspberry-xxx.local</code>).</p><p>Once you changed, restart your terminal or run following command:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>Then, try the following command to test the connection<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rostopic <span class="built_in">list</span></span><br></pre></td></tr></table></figure></p><p>You’ll see at list two default topic (if you already have some nodes other than master running, you will see corresponding topic listed also)<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/rosout</span></span><br><span class="line"><span class="string">/rosout_agg</span></span><br></pre></td></tr></table></figure></p><p>If you see an error states that cannot connect to master, it means that the uri you set is incorrect or there’s some network issue between your laptop and rpi.</p><p>For more information about setting up multiple machine connection, see this <a href="http://wiki.ros.org/ROS/Tutorials/MultipleMachines" target="_blank" rel="noopener">official tutorial</a>.</p><h2 id="Launch-the-camera-node"><a href="#Launch-the-camera-node" class="headerlink" title="Launch the camera node"></a>Launch the camera node</h2><p>You can start the nodes by running the launch file we provided and set speed to zero to prevent your car from running into a car accident. Or launch just the camera node by <code>rosrun</code>:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">rosrun</span> <span class="selector-tag">raceon</span> <span class="selector-tag">camera</span><span class="selector-class">.py</span></span><br></pre></td></tr></table></figure></p><p>If you launch it by the launch file, the default topic name for camera image is <code>/raceon/camera/image</code>. If you use <code>rosrun</code>, the default topic name is <code>/camera/image</code>.</p><h2 id="Use-rqt-image-view-to-see-the-realtime-streaming"><a href="#Use-rqt-image-view-to-see-the-realtime-streaming" class="headerlink" title="Use rqt_image_view to see the realtime streaming"></a>Use <code>rqt_image_view</code> to see the realtime streaming</h2><p>Go back to your laptop, execute <code>rostopic list</code> again and you’ll see the topic name for camera image showing up.</p><p>Then execute <code>rqt_image_view</code> from the terminal and you’ll see the following. If all your setup is correct, you’ll see the camera’s topic name listed on the drop-down menu (red box), select it, and the live view will show up below. If you don’t see it, try to hit the refresh button (green box) and check again. If you still cannot see anything in the drop-down menu, that means there’s something wrong with the connection between your laptop and rpi.</p><img src="/2020/03/09/RaceOn-Note-Live-camera-view/rqt_image_view.png" class=""><p>Sometimes you may see the topic name but the image won’t show after you select the topic. This is probably the situation that your laptop can connect to rpi but not for the reversed direction (rpi-&gt;laptop). Check if you can ping your laptop by using laptop’s hostname. By default, nodes are communicated by hostname.</p><h2 id="Summary-and-Future-works"><a href="#Summary-and-Future-works" class="headerlink" title="Summary and Future works"></a>Summary and Future works</h2><p>Thanks to ROS, we can easily transfer information from our devices to laptop, helping us to debug the hardware, but there’s one thing should be considered is I/O operation is always slow. If you want to push your code to have higher performance, you may want to decrease the data transfer happens in your stack.</p><p>To get more information help us figuring out the possible problem during race, I use opencv to wrote a visualizer that subscribe not only the camera image but other useful data, and visualize it. We use this little tool to debug and calibrate the camera before each race so that we can make sure every lap the car perform is almost identical. If you’re interested in that, the code is available on GitHub (<a href="https://github.com/d4n1elchen/raceon_visualizer" target="_blank" rel="noopener">d4n1elchen/raceon_visualizer</a>). It is a ROS package. Clone it into the <code>src</code> folder in your catkin workspace, <code>catkin_make</code>, and run <code>roslaunch raceon_visualizer visualizer.launch</code>. By default, it is listening to <code>/raceon/camera/image</code>. You can change it in the launch file. If that helps you, don’t hesitate to give me a star or follow my GitHub profile! Thanks!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The most useful feature of ROS that benefits our team is the realtime camera view. We use it a lot for tuning and calibrating the camera. It is also very useful for debugging. This post will explain how we get the realtime camera view on the laptop.&lt;/p&gt;
&lt;h2 id=&quot;Basic-concepts&quot;&gt;&lt;a href=&quot;#Basic-concepts&quot; class=&quot;headerlink&quot; title=&quot;Basic concepts&quot;&gt;&lt;/a&gt;Basic concepts&lt;/h2&gt;&lt;p&gt;Generally, ROS is nothing to do with “Operating System”. It is just a message communication framework. You can transfer data between nodes through ethernet by the three default messaging model in ROS: Publish/Subscribe, Service/Client, and Action. The pub/sub model is the mostly used one.&lt;/p&gt;
&lt;h3 id=&quot;Publish-Subscribe-model&quot;&gt;&lt;a href=&quot;#Publish-Subscribe-model&quot; class=&quot;headerlink&quot; title=&quot;Publish/Subscribe model&quot;&gt;&lt;/a&gt;Publish/Subscribe model&lt;/h3&gt;&lt;p&gt;This is a really simple conceptual communication model. It’s similar to newspaper or magazine subscription. The subscribers can subscribe “topics” they’re interested in. The publisher of a certain topic will publish messages to all subscribers that subscribe the topic. All the message passing goes through ethernet. So the publishing/subscribing can happen between nodes within the same machine, as well as transferring through nodes on different machines.&lt;/p&gt;
&lt;h3 id=&quot;Master-node&quot;&gt;&lt;a href=&quot;#Master-node&quot; class=&quot;headerlink&quot; title=&quot;Master node&quot;&gt;&lt;/a&gt;Master node&lt;/h3&gt;
    
    </summary>
    
      <category term="robotics" scheme="https://blog.danielchen.cc/categories/robotics/"/>
    
    
      <category term="robotics" scheme="https://blog.danielchen.cc/tags/robotics/"/>
    
      <category term="RaceOn" scheme="https://blog.danielchen.cc/tags/RaceOn/"/>
    
  </entry>
  
  <entry>
    <title>Create ROS publisher node using rospy on Raspberry Pi</title>
    <link href="https://blog.danielchen.cc/2020/01/16/Create-ROS-publisher-node-using-rospy-on-Raspberry-Pi/"/>
    <id>https://blog.danielchen.cc/2020/01/16/Create-ROS-publisher-node-using-rospy-on-Raspberry-Pi/</id>
    <published>2020-01-16T22:10:26.000Z</published>
    <updated>2021-08-11T00:36:31.518Z</updated>
    
    <content type="html"><![CDATA[<p>This tutorial will cover some tips about writing publisher using python on the system we setup.</p><h2 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h2><p>In this tutorial, we need <code>rospy</code> and <code>std_msg</code> to create our publisher/subscriber node.</p><p>Usually, these two package is included in the basic ROS installation. But if you do not have these two packages install, please refer to <a href="https://industrial-training-master.readthedocs.io/en/melodic/_source/session1/Installing-Existing-Packages.html" target="_blank" rel="noopener">Installing Packages</a> if your ROS run on ubuntu on laptop and <a href="/2020/01/14/ROS-melodic-on-Raspbian-Buster/" title="ROS melodic on Raspbian Buster">ROS melodic on Raspbian Buster</a> if your ROS is on RPi for package installation.</p><h2 id="Master-Node"><a href="#Master-Node" class="headerlink" title="Master Node"></a>Master Node</h2><p>Be sure that your master node is up during the following step. Please refer to <a href="/2020/01/16/Multiple-machine-setup-for-ROS-melodic/" title="Multiple machine setup for ROS melodic">Multiple machine setup for ROS melodic</a></p><h2 id="Create-a-catkin-workspace"><a href="#Create-a-catkin-workspace" class="headerlink" title="Create a catkin workspace"></a>Create a catkin workspace</h2><p>If you didn’t have a catkin workspace, create one first. (Please do not use the one for building ROS distribution, i.e. <code>ros_catkin_ws</code> in the previous tutorial. It will cause re-build for every package when you run <code>catking_make</code> and waste time)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/catkin_ws/src</span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws/</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure><p>Source the workspace setup<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span> ~<span class="regexp">/catkin_ws/</span>devel<span class="regexp">/setup.bash</span></span><br></pre></td></tr></table></figure></p><p>Or you can add it to your <code>.bashrc</code> to save time<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"source ~/catkin_ws/devel/setup.bash"</span> &gt;&gt; ~<span class="string">/.bashrc</span></span><br></pre></td></tr></table></figure></p><h2 id="Publisher-Node"><a href="#Publisher-Node" class="headerlink" title="Publisher Node"></a>Publisher Node</h2><p>(Ref <a href="http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28python%29" target="_blank" rel="noopener">WritingPublisherSubscriber(python)</a>)</p><p>We’ll add a publisher node called talker on RPi, so all the following steps are performed on RPi.</p><h3 id="Create-pakcage-for-talker"><a href="#Create-pakcage-for-talker" class="headerlink" title="Create pakcage for talker"></a>Create pakcage for talker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">catkin_create_pkg talker std_msgs rospy</span><br></pre></td></tr></table></figure><h3 id="Create-a-python-script-for-talker"><a href="#Create-a-python-script-for-talker" class="headerlink" title="Create a python script for talker"></a>Create a python script for talker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">roscd talker</span><br><span class="line">mkdir scripts</span><br><span class="line"><span class="built_in">cd</span> scripts</span><br><span class="line">wget https://raw.github.com/ros/ros_tutorials/kinetic-devel/rospy_tutorials/001_talker_listener/talker.py</span><br><span class="line">chmod +x talker.py</span><br></pre></td></tr></table></figure><p>You can check the file content<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># license removed for brevity</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talker</span><span class="params">()</span>:</span></span><br><span class="line">    pub = rospy.Publisher(<span class="string">'chatter'</span>, String, queue_size=<span class="number">10</span>)</span><br><span class="line">    rospy.init_node(<span class="string">'talker'</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line">    rate = rospy.Rate(<span class="number">10</span>) <span class="comment"># 10hz</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">        hello_str = <span class="string">"hello world %s"</span> % rospy.get_time()</span><br><span class="line">        rospy.loginfo(hello_str)</span><br><span class="line">        pub.publish(hello_str)</span><br><span class="line">        rate.sleep()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        talker()</span><br><span class="line">    <span class="keyword">except</span> rospy.ROSInterruptException:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>Read the explaination for the code in <a href="http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28python%29" target="_blank" rel="noopener">Writing a Simple Publisher and Subscriber (Python)</a></p><h3 id="Build-and-start-the-talker-node"><a href="#Build-and-start-the-talker-node" class="headerlink" title="Build and start the talker node"></a>Build and start the talker node</h3><p>Build workspace<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure></p><p>Start the node<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun talker talker.py</span><br></pre></td></tr></table></figure></p><p>If things work correctly, you’ll see<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pi@rpi:~/catkin_ws $ rosrun talker talker.py</span><br><span class="line">[INFO] [1579244074.678847]: hello world 1579244074.68</span><br><span class="line">[INFO] [1579244074.778945]: hello world 1579244074.78</span><br><span class="line">[INFO] [1579244074.878956]: hello world 1579244074.88</span><br><span class="line">[INFO] [1579244074.978917]: hello world 1579244074.98</span><br><span class="line">[INFO] [1579244075.079286]: hello world 1579244075.08</span><br><span class="line">[INFO] [1579244075.179355]: hello world 1579244075.18</span><br><span class="line">[INFO] [1579244075.279409]: hello world 1579244075.28</span><br><span class="line">[INFO] [1579244075.379345]: hello world 1579244075.38</span><br><span class="line">[INFO] [1579244075.479343]: hello world 1579244075.48</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>The talker node is sending mseeages every 100ms.</p><h3 id="Check-rostopic"><a href="#Check-rostopic" class="headerlink" title="Check rostopic"></a>Check rostopic</h3><p>After the node has started succefully, we can check topic list on both machies.<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">daniel@ubuntu-vm:~ $ rostopic list</span><br><span class="line"><span class="string">/chatter</span></span><br><span class="line"><span class="string">/rosout</span></span><br><span class="line"><span class="string">/rosout_agg</span></span><br></pre></td></tr></table></figure></p><p><code>/chatter</code> is the one talker publishing to.</p><h2 id="Subscriber-node"><a href="#Subscriber-node" class="headerlink" title="Subscriber node"></a>Subscriber node</h2><p>We’ll add a subscriber node called listener on laptop, so all the following steps are performed on laptop.</p><h3 id="Create-pakcage-for-listener"><a href="#Create-pakcage-for-listener" class="headerlink" title="Create pakcage for listener"></a>Create pakcage for listener</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">catkin_create_pkg listener std_msgs rospy</span><br></pre></td></tr></table></figure><h3 id="Create-a-python-script-for-listener"><a href="#Create-a-python-script-for-listener" class="headerlink" title="Create a python script for listener"></a>Create a python script for listener</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">roscd listener</span><br><span class="line">mkdir scripts</span><br><span class="line"><span class="built_in">cd</span> scripts</span><br><span class="line">wget https://raw.github.com/ros/ros_tutorials/kinetic-devel/rospy_tutorials/001_talker_listener/listener.py</span><br><span class="line">chmod +x listener.py</span><br></pre></td></tr></table></figure><p>You can check the file content<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(data)</span>:</span></span><br><span class="line">    rospy.loginfo(rospy.get_caller_id() + <span class="string">"I heard %s"</span>, data.data)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listener</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># In ROS, nodes are uniquely named. If two nodes with the same</span></span><br><span class="line">    <span class="comment"># name are launched, the previous one is kicked off. The</span></span><br><span class="line">    <span class="comment"># anonymous=True flag means that rospy will choose a unique</span></span><br><span class="line">    <span class="comment"># name for our 'listener' node so that multiple listeners can</span></span><br><span class="line">    <span class="comment"># run simultaneously.</span></span><br><span class="line">    rospy.init_node(<span class="string">'listener'</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    rospy.Subscriber(<span class="string">"chatter"</span>, String, callback)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># spin() simply keeps python from exiting until this node is stopped</span></span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    listener()</span><br></pre></td></tr></table></figure></p><p>Read the explaination for the code in <a href="http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28python%29" target="_blank" rel="noopener">Writing a Simple Publisher and Subscriber (Python)</a></p><h3 id="Build-and-start-the-listener-node"><a href="#Build-and-start-the-listener-node" class="headerlink" title="Build and start the listener node"></a>Build and start the listener node</h3><p>Build workspace<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure></p><p>Start the node<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun listener listener.py</span><br></pre></td></tr></table></figure></p><p>If things work correctly, you’ll see<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">daniel@ubuntu-vm:~ $ rosrun listener listener.py</span><br><span class="line">[INFO] [1579244845.721338]: /listener_2836_1579244845478I heard hello world 1579244846.14</span><br><span class="line">[INFO] [1579244845.820093]: /listener_2836_1579244845478I heard hello world 1579244846.24</span><br><span class="line">[INFO] [1579244845.935054]: /listener_2836_1579244845478I heard hello world 1579244846.34</span><br><span class="line">[INFO] [1579244846.020669]: /listener_2836_1579244845478I heard hello world 1579244846.44</span><br><span class="line">[INFO] [1579244846.133621]: /listener_2836_1579244845478I heard hello world 1579244846.54</span><br><span class="line">[INFO] [1579244846.241096]: /listener_2836_1579244845478I heard hello world 1579244846.64</span><br><span class="line">[INFO] [1579244846.347801]: /listener_2836_1579244845478I heard hello world 1579244846.74</span><br><span class="line">[INFO] [1579244846.424322]: /listener_2836_1579244845478I heard hello world 1579244846.84</span><br><span class="line">[INFO] [1579244846.551422]: /listener_2836_1579244845478I heard hello world 1579244846.94</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>The listener node is receiving mseeages every 100ms.</p><h2 id="Node-diagram"><a href="#Node-diagram" class="headerlink" title="Node diagram"></a>Node diagram</h2><p>Run <code>rqt_graph</code> on laptop to observe the node diagram</p><img src="/2020/01/16/Create-ROS-publisher-node-using-rospy-on-Raspberry-Pi/rqt_graph.png" class=""><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In this tutorial, we leart how to create workspace, create package, and create publisher/subscribe nodes on different machine. In this example, we use rospy to write the node. There’s another official example using roscpp. You can check it if interest you <a href="http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29" target="_blank" rel="noopener">Writing a Simple Publisher and Subscriber (C++)</a></p><h2 id="Link-to-other-relavant-post"><a href="#Link-to-other-relavant-post" class="headerlink" title="Link to other relavant post"></a>Link to other relavant post</h2><ul><li><a href="/2020/01/14/ROS-melodic-on-Raspbian-Buster/" title="ROS melodic on Raspbian Buster">ROS melodic on Raspbian Buster</a></li><li><a href="/2020/01/16/Multiple-machine-setup-for-ROS-melodic/" title="Multiple machine setup for ROS melodic">Multiple machine setup for ROS melodic</a></li><li><a href="/2020/01/16/Create-ROS-publisher-node-using-rospy-on-Raspberry-Pi/" title="Create ROS publisher node using rospy on Raspberry Pi">Create ROS publisher node using rospy on Raspberry Pi</a> (this post)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This tutorial will cover some tips about writing publisher using python on the system we setup.&lt;/p&gt;
&lt;h2 id=&quot;Dependencies&quot;&gt;&lt;a href=&quot;#Dependencies&quot; class=&quot;headerlink&quot; title=&quot;Dependencies&quot;&gt;&lt;/a&gt;Dependencies&lt;/h2&gt;&lt;p&gt;In this tutorial, we need &lt;code&gt;rospy&lt;/code&gt; and &lt;code&gt;std_msg&lt;/code&gt; to create our publisher/subscriber node.&lt;/p&gt;
&lt;p&gt;Usually, these two package is included in the basic ROS installation. But if you do not have these two packages install, please refer to &lt;a href=&quot;https://industrial-training-master.readthedocs.io/en/melodic/_source/session1/Installing-Existing-Packages.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Installing Packages&lt;/a&gt; if your ROS run on ubuntu on laptop and &lt;a href=&quot;/2020/01/14/ROS-melodic-on-Raspbian-Buster/&quot; title=&quot;ROS melodic on Raspbian Buster&quot;&gt;ROS melodic on Raspbian Buster&lt;/a&gt; if your ROS is on RPi for package installation.&lt;/p&gt;
&lt;h2 id=&quot;Master-Node&quot;&gt;&lt;a href=&quot;#Master-Node&quot; class=&quot;headerlink&quot; title=&quot;Master Node&quot;&gt;&lt;/a&gt;Master Node&lt;/h2&gt;&lt;p&gt;Be sure that your master node is up during the following step. Please refer to &lt;a href=&quot;/2020/01/16/Multiple-machine-setup-for-ROS-melodic/&quot; title=&quot;Multiple machine setup for ROS melodic&quot;&gt;Multiple machine setup for ROS melodic&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="robotics" scheme="https://blog.danielchen.cc/categories/robotics/"/>
    
    
      <category term="robotics" scheme="https://blog.danielchen.cc/tags/robotics/"/>
    
      <category term="docker" scheme="https://blog.danielchen.cc/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Multiple machine setup for ROS melodic</title>
    <link href="https://blog.danielchen.cc/2020/01/16/Multiple-machine-setup-for-ROS-melodic/"/>
    <id>https://blog.danielchen.cc/2020/01/16/Multiple-machine-setup-for-ROS-melodic/</id>
    <published>2020-01-16T01:46:41.000Z</published>
    <updated>2021-08-11T00:36:31.518Z</updated>
    
    <content type="html"><![CDATA[<p>The setup steps for multi-machine configuration (master node on laptop + raspberry pi node) will be included in this tutorial.</p><h2 id="Multiple-Machine"><a href="#Multiple-Machine" class="headerlink" title="Multiple Machine"></a>Multiple Machine</h2><p>It’s very common to run multiple machine on the same ROS network. There’re some network settings to be configured before nodes can communicate to each other.</p><p>In ROS1, there should be a master node in every ROS network. Every topic or command will send to master node first and then deliver to other nodes that needs. So you should decide which node is your master node. In my configuration, I use laptop running Ubuntu Mate with ROS melodic installed as master node, and the RPi will start a publisher node publishing messages.</p><h3 id="Decide-to-use-hostname-or-IP"><a href="#Decide-to-use-hostname-or-IP" class="headerlink" title="Decide to use hostname or IP"></a>Decide to use hostname or IP</h3><p>You can explictly specify IP or use hostname for node discovery. If hostname works in your system, I would recommend to use hostname. Otherwise, you’ll need to set the environment variables everytime when your network environment is changed. This tutorial will cover both methods.</p><p>If you’re running your master node in a virtual machine, you may want to use bridge mode for the virtual network adapter so that the VM and RPi are in the same network. I use VM to run Ubuntu. However, I have problem discovering other devices on the same network with hostname in VM and still not find a solution, so I use IP to configure. But I’ll use hostname as example mainly.</p><h3 id="Environment-Variables"><a href="#Environment-Variables" class="headerlink" title="Environment Variables"></a>Environment Variables</h3><p>There’re two environment variables related to this topic. <code>ROS_MASTER_URI</code> and <code>ROS_HOSTNAME</code>/<code>ROS_IP</code></p><h4 id="ROS-MASTER-URI"><a href="#ROS-MASTER-URI" class="headerlink" title="ROS_MASTER_URI"></a><code>ROS_MASTER_URI</code></h4><p>This is to specify the address of master node. You can use hostname or ip for the URI.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ROS_MASTER_URI=http://&amp;lthostname or ip of your master node&amp;gt:11311</span><br></pre></td></tr></table></figure><p>11311 is the default port. If you change the default master node port, please remember to modify it.</p><p>This variable should be set to the same value for all the nodes so that they connect to the same master node. For master node itself, this is optional, but it will use as a reference when starting the master node or other nodes on the same machine, so it’d better to set it on the master node machine as well.</p><h4 id="ROS-HOSTNAME-ROS-IP"><a href="#ROS-HOSTNAME-ROS-IP" class="headerlink" title="ROS_HOSTNAME/ROS_IP"></a><code>ROS_HOSTNAME</code>/<code>ROS_IP</code></h4><p>When you’re running publisher nodes, this variable is for subscribers to back reference to the publisher node. So this should be set to the hostname/ip of each machines. If this variable isn’t properly set or set to some value that other nodes cannot connect through it, you’ll encounter problem receving massages.</p><p>You can set <code>ROS_HOSTNAME</code> or <code>ROS_IP</code> based on your environment.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ROS_HOSTNAME=&amp;lthostname of the machine&amp;gt</span><br></pre></td></tr></table></figure><h4 id="Set-variable-in-bashrc"><a href="#Set-variable-in-bashrc" class="headerlink" title="Set variable in .bashrc"></a>Set variable in <code>.bashrc</code></h4><p>You can include these settings in <code>.bashrc</code> so that you don’t need to set variables everything you start a new terminal session.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"export ROS_MASTER_URI=http://&amp;lthostname of your master node&amp;gt:11311"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export ROS_HOSTNAME=&amp;lthostname of the machine&amp;gt"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><p>On laptop<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"export ROS_MASTER_URI=http://ubuntu-vm:11311"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export ROS_HOSTNAME=ubuntu-vm"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><br>On RPi<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"export ROS_MASTER_URI=http://ubuntu-vm:11311"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export ROS_HOSTNAME=rpi"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></p><h3 id="Start-a-master-node"><a href="#Start-a-master-node" class="headerlink" title="Start a master node"></a>Start a master node</h3><p>Open a terminal on master node and run<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure></p><p>You’ll see some starting messages<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SUMMARY</span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">PARAMETERS</span><br><span class="line"> * /rosdistro: melodic</span><br><span class="line"> * /rosversion: 1.14.3</span><br><span class="line"></span><br><span class="line">NODES</span><br><span class="line"></span><br><span class="line">auto-starting new master</span><br><span class="line">process[master]: started with pid [2439]</span><br><span class="line"><span class="attribute">ROS_MASTER_URI</span>=http://ubuntu-vm:11311/</span><br><span class="line"></span><br><span class="line">setting /run_id <span class="keyword">to</span> 74ca6d36-38ee-11ea-8948-08002788615a</span><br><span class="line">process[rosout-1]: started with pid [2450]</span><br><span class="line">started core<span class="built_in"> service </span>[/rosout]</span><br></pre></td></tr></table></figure></p><p>You can check <code>ROS_MASTER_URI</code> on the 4th last line.</p><p>If it starts correctly and the environment variable settings are correct on all the machines, runing <code>rostopic list</code> on all the machines will result in the same topic list.<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">daniel<span class="variable">@ubuntu</span>-<span class="symbol">vm:</span>~ <span class="variable">$ </span>rostopic list</span><br><span class="line">/rosout</span><br><span class="line">/rosout_agg</span><br></pre></td></tr></table></figure><br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pi<span class="variable">@rpi</span><span class="symbol">:~</span> <span class="variable">$ </span>rostopic list</span><br><span class="line">/rosout</span><br><span class="line">/rosout_agg</span><br></pre></td></tr></table></figure></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>It’s not so complicated to setup multiple machine network. Just need to make sure the address you specified can be access by other machine on the same network.</p><p>Next, I’ll write a publisher node on RPi and a subscriber node on laptop to test our setup.</p><h2 id="Link-to-other-relavant-post"><a href="#Link-to-other-relavant-post" class="headerlink" title="Link to other relavant post"></a>Link to other relavant post</h2><ul><li><a href="/2020/01/14/ROS-melodic-on-Raspbian-Buster/" title="ROS melodic on Raspbian Buster">ROS melodic on Raspbian Buster</a></li><li><a href="/2020/01/16/Multiple-machine-setup-for-ROS-melodic/" title="Multiple machine setup for ROS melodic">Multiple machine setup for ROS melodic</a> (this post)</li><li><a href="/2020/01/16/Create-ROS-publisher-node-using-rospy-on-Raspberry-Pi/" title="Create ROS publisher node using rospy on Raspberry Pi">Create ROS publisher node using rospy on Raspberry Pi</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The setup steps for multi-machine configuration (master node on laptop + raspberry pi node) will be included in this tutorial.&lt;/p&gt;
&lt;h2 id=&quot;Multiple-Machine&quot;&gt;&lt;a href=&quot;#Multiple-Machine&quot; class=&quot;headerlink&quot; title=&quot;Multiple Machine&quot;&gt;&lt;/a&gt;Multiple Machine&lt;/h2&gt;&lt;p&gt;It’s very common to run multiple machine on the same ROS network. There’re some network settings to be configured before nodes can communicate to each other.&lt;/p&gt;
&lt;p&gt;In ROS1, there should be a master node in every ROS network. Every topic or command will send to master node first and then deliver to other nodes that needs. So you should decide which node is your master node. In my configuration, I use laptop running Ubuntu Mate with ROS melodic installed as master node, and the RPi will start a publisher node publishing messages.&lt;/p&gt;
&lt;h3 id=&quot;Decide-to-use-hostname-or-IP&quot;&gt;&lt;a href=&quot;#Decide-to-use-hostname-or-IP&quot; class=&quot;headerlink&quot; title=&quot;Decide to use hostname or IP&quot;&gt;&lt;/a&gt;Decide to use hostname or IP&lt;/h3&gt;&lt;p&gt;You can explictly specify IP or use hostname for node discovery. If hostname works in your system, I would recommend to use hostname. Otherwise, you’ll need to set the environment variables everytime when your network environment is changed. This tutorial will cover both methods.&lt;/p&gt;
    
    </summary>
    
      <category term="robotics" scheme="https://blog.danielchen.cc/categories/robotics/"/>
    
    
      <category term="robotics" scheme="https://blog.danielchen.cc/tags/robotics/"/>
    
      <category term="docker" scheme="https://blog.danielchen.cc/tags/docker/"/>
    
      <category term="ROS" scheme="https://blog.danielchen.cc/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS melodic on Raspbian Buster</title>
    <link href="https://blog.danielchen.cc/2020/01/14/ROS-melodic-on-Raspbian-Buster/"/>
    <id>https://blog.danielchen.cc/2020/01/14/ROS-melodic-on-Raspbian-Buster/</id>
    <published>2020-01-14T22:49:21.000Z</published>
    <updated>2021-08-11T00:36:31.522Z</updated>
    
    <content type="html"><![CDATA[<p>This tutorial is to install ROS melodic on latest (Mon 2020) version of Raspbian.</p><h2 id="Hardware"><a href="#Hardware" class="headerlink" title="Hardware"></a>Hardware</h2><p>The hardware I use is Raspberry Pi 4</p><img src="/2020/01/14/ROS-melodic-on-Raspbian-Buster/rpi4.jpg" class=""><h2 id="Install-Raspbian-Buster"><a href="#Install-Raspbian-Buster" class="headerlink" title="Install Raspbian Buster"></a>Install Raspbian Buster</h2><p>Download the latest Raspbian Buster image from the <a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="noopener">official website</a> and follow the <a href="https://www.raspberrypi.org/documentation/installation/installing-images/README.md" target="_blank" rel="noopener">Installation Guide</a> to flash the image into a SD card.</p><p>For Windows users, I would recommend using <a href="https://www.balena.io/etcher/" target="_blank" rel="noopener">Etcher</a> to do such work. It’s really easy to use and reliable. (I usually use my Windows laptop to flash a SD card, so I don’t know what’s the best approach on other system. Please refer to the official guide and follow the steps carefully).</p><h3 id="Headless-installation"><a href="#Headless-installation" class="headerlink" title="Headless installation"></a>Headless installation</h3><p>(Ref <a href="https://www.raspberrypi.org/documentation/configuration/wireless/headless.md" target="_blank" rel="noopener">Setting up a Raspberry Pi headless</a>)</p><p>If you do not have a computer screen for your Pi, you need to setup the wifi beforehand. </p><p>Firstly, plug back your SD card reader with the SD card you just flashed to your laptop.</p><p>In Windows, you’ll see a disk named “boot” in the navigator of File Explorer. (You’ll also see a popup window saying that you need to format a disk. Be careful NOT to format it, otherwise you’ll need to flash again)</p><img src="/2020/01/14/ROS-melodic-on-Raspbian-Buster/boot.png" class=""><p>Create a txt file with filename “wpa_supplicant.conf”.</p><p>Use some advanced text editor (eg: Visual Studio Code) to open the file, change the EoF sequence from CRLF to LF and insert following content (replace ssid and psk with your wireless network setup)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line">country=US</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line"> ssid=<span class="string">"&amp;ltName of your WiFi&amp;gt"</span></span><br><span class="line"> psk=<span class="string">"&amp;ltPassword for your WiFi&amp;gt"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Create a blank txt file with filename “ssh” (no extention)</p><img src="/2020/01/14/ROS-melodic-on-Raspbian-Buster/headlessfile.png" class=""><p>Eject the SD card from laptop and boot your Pi using modified SD card.</p><p>If your setup is correct, you can find your Pi in the local network. (Using IP scanner or whatever you used to find your Pi usually)</p><h2 id="Upgrade-system-and-install-common-software"><a href="#Upgrade-system-and-install-common-software" class="headerlink" title="Upgrade system and install common software"></a>Upgrade system and install common software</h2><p>Run following commands<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt -y dist-upgrade &amp;&amp; sudo apt -y upgrade</span><br><span class="line">sudo apt install -y vim curl wget git tmux unzip</span><br></pre></td></tr></table></figure></p><p>Reboot your Pi after installation<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure></p><h2 id="Install-ROS-melodic"><a href="#Install-ROS-melodic" class="headerlink" title="Install ROS melodic"></a>Install ROS melodic</h2><p>(Ref <a href="http://wiki.ros.org/ROSberryPi/Installing%20ROS%20Kinetic%20on%20the%20Raspberry%20Pi" target="_blank" rel="noopener">Installing ROS Kinetic on the Raspberry Pi</a>, please note that the link is for ROS Kinetic)</p><h3 id="Setup-ROS-Repository"><a href="#Setup-ROS-Repository" class="headerlink" title="Setup ROS Repository"></a>Setup ROS Repository</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" &amp;gt /etc/apt/sources.list.d/ros-latest.list'</span></span><br><span class="line">sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get -y upgrade</span><br></pre></td></tr></table></figure><h3 id="Install-dependencies"><a href="#Install-dependencies" class="headerlink" title="Install dependencies"></a>Install dependencies</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y python-rosdep python-rosinstall-generator python-wstool python-rosinstall build-essential cmake</span><br></pre></td></tr></table></figure><h3 id="Initialize-rosdep"><a href="#Initialize-rosdep" class="headerlink" title="Initialize rosdep"></a>Initialize <code>rosdep</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rosdep init</span><br><span class="line">rosdep update</span><br></pre></td></tr></table></figure><h3 id="Compile-ROS-melodic-from-source-code"><a href="#Compile-ROS-melodic-from-source-code" class="headerlink" title="Compile ROS melodic from source code"></a>Compile ROS melodic from source code</h3><blockquote><p>If you want to try the pre-build install, skip this and go to next section.</p></blockquote><h4 id="Create-catkin-workspace-for-compiling-and-installing-ROS-melodic"><a href="#Create-catkin-workspace-for-compiling-and-installing-ROS-melodic" class="headerlink" title="Create catkin workspace for compiling and installing ROS melodic"></a>Create catkin workspace for compiling and installing ROS melodic</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/ros_catkin_ws</span><br><span class="line"><span class="built_in">cd</span> ~/ros_catkin_ws</span><br></pre></td></tr></table></figure><h4 id="Fetch-source-code-by-wstool"><a href="#Fetch-source-code-by-wstool" class="headerlink" title="Fetch source code by wstool"></a>Fetch source code by wstool</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rosinstall_generator ros_comm --rosdistro melodic --deps --wet-only --tar &amp;gt melodic-ros_comm-wet.rosinstall</span><br><span class="line">wstool init src melodic-ros_comm-wet.rosinstall</span><br></pre></td></tr></table></figure><blockquote><p><strong>NOTE</strong><br>The above is fetching “ros_comm” package which includes basic ROS commnication libs without GUI tools such as rqt, rviz. If you want to install GUI tools, change “ros_comm” to “desktop”. Or you can find more ROS variant <a href="https://www.ros.org/reps/rep-0131.html#variants" target="_blank" rel="noopener">here</a></p><p><strong>NOTE</strong><br>If <code>wstool init</code> got interrupted, you can resume downloading process by <code>wstool update -j4 -t src</code></p></blockquote><h4 id="Resolve-dependencies-with-rosdep"><a href="#Resolve-dependencies-with-rosdep" class="headerlink" title="Resolve dependencies with rosdep"></a>Resolve dependencies with rosdep</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosdep install -y --from-paths src --ignore-src --rosdistro melodic -r --os=debian:buster</span><br></pre></td></tr></table></figure><h4 id="Build-and-install-ROS"><a href="#Build-and-install-ROS" class="headerlink" title="Build and install ROS!"></a>Build and install ROS!</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./src/catkin/bin/catkin_make_isolated --install -DCMAKE_BUILD_TYPE=Release --install-space /opt/ros/melodic</span><br></pre></td></tr></table></figure><h4 id="Add-ROS-to-your-bashrc​"><a href="#Add-ROS-to-your-bashrc​" class="headerlink" title="Add ROS to your bashrc​"></a>Add ROS to your bashrc​</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"source /opt/ros/melodic/setup.bash"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="Pre-build-workspace"><a href="#Pre-build-workspace" class="headerlink" title="Pre-build workspace"></a>Pre-build workspace</h3><blockquote><p>If you already proceed through last section, skip this.</p></blockquote><h4 id="Download-pre-build-worksapce-and-unzip-it"><a href="#Download-pre-build-worksapce-and-unzip-it" class="headerlink" title="Download pre-build worksapce and unzip it"></a>Download pre-build worksapce and unzip it</h4><p><a href="https://drive.google.com/open?id=16qR3dG7ebRj2Eq4TAh7yL_DznRKaO37A&amp;authuser=daniel@ccns.ncku.edu.tw&amp;usp=drive_fs" target="_blank" rel="noopener">ros_melodic_raspbian_buster.zip</a></p><p>Upload to your RPi and place in home directory.</p><p>Unzip it<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">unzip ros_melodic_raspbian_buster.zip</span><br></pre></td></tr></table></figure></p><p>After that, you’ll get a folder called <code>ros_catkin_ws</code></p><h4 id="Resolve-dependencies-with-rosdep-1"><a href="#Resolve-dependencies-with-rosdep-1" class="headerlink" title="Resolve dependencies with rosdep"></a>Resolve dependencies with rosdep</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/ros_catkin_ws</span><br><span class="line">rosdep install -y --from-paths src --ignore-src --rosdistro melodic -r --os=debian:buster</span><br></pre></td></tr></table></figure><h4 id="Install-ROS"><a href="#Install-ROS" class="headerlink" title="Install ROS"></a>Install ROS</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./src/catkin/bin/catkin_make_isolated --install -DCMAKE_BUILD_TYPE=Release --install-space /opt/ros/melodic</span><br></pre></td></tr></table></figure><h4 id="Add-ROS-to-your-bashrc​-1"><a href="#Add-ROS-to-your-bashrc​-1" class="headerlink" title="Add ROS to your bashrc​"></a>Add ROS to your bashrc​</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"source /opt/ros/melodic/setup.bash"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="About-ROS-package-management-on-Raspbian"><a href="#About-ROS-package-management-on-Raspbian" class="headerlink" title="About ROS package management on Raspbian"></a>About ROS package management on Raspbian</h2><p>If you use Ubuntu, apt is used to manage ROS packages. However, this approach does not works on RPi currently. We need to build from the source code of the package you want to install.</p><p>The process to add new package is as follow</p><h3 id="Generate-rosinstall-file-with-rosinstall-generator"><a href="#Generate-rosinstall-file-with-rosinstall-generator" class="headerlink" title="Generate rosinstall file with rosinstall_generator"></a>Generate rosinstall file with rosinstall_generator</h3><p>You may see similar command above somewhere during the installation. This is to generate a list of package source link.<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/ros_catkin_ws</span><br><span class="line">rosinstall_generator &amp;ltpackage names seperated by space&amp;gt --rosdistro melodic --deps --wet-only --tar &amp;gt &amp;ltcustom file name&amp;gt.rosinstall</span><br></pre></td></tr></table></figure></p><p>Example (to install <a href="http://wiki.ros.org/sensor_msgs" target="_blank" rel="noopener">sensor_msgs</a>)<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosinstall_generator sensor_msgs --rosdistro melodic --deps --wet-only --tar &amp;gt melodic-sensor_msgs.rosinstall</span><br></pre></td></tr></table></figure></p><h3 id="Merge-and-update-the-workspace"><a href="#Merge-and-update-the-workspace" class="headerlink" title="Merge and update the workspace"></a>Merge and update the workspace</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wstool merge -t src &amp;ltrosinstall file you just generated&amp;gt.rosinstall</span><br><span class="line">wstool update -t src</span><br></pre></td></tr></table></figure><p>This will fetch all the source code listed in rosinstall files</p><p>Example<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wstool merge -t src melodic-sensor_msgs.rosinstall</span><br><span class="line">wstool update -t src</span><br></pre></td></tr></table></figure></p><h3 id="Resolve-dependency-by-rosdep"><a href="#Resolve-dependency-by-rosdep" class="headerlink" title="Resolve dependency by rosdep"></a>Resolve dependency by rosdep</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">rosdep</span> <span class="comment">install</span> --<span class="comment">from</span><span class="literal">-</span><span class="comment">paths</span> <span class="comment">src</span> --<span class="comment">ignore</span><span class="literal">-</span><span class="comment">src</span> --<span class="comment">rosdistro</span> <span class="comment">melodic</span> <span class="literal">-</span><span class="comment">y</span> <span class="literal">-</span><span class="comment">r</span> --<span class="comment">os=debian:buster</span></span><br></pre></td></tr></table></figure><h3 id="Rebuild-the-workspace"><a href="#Rebuild-the-workspace" class="headerlink" title="Rebuild the workspace"></a>Rebuild the workspace</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./src/catkin/bin/catkin_make_isolated --install -DCMAKE_BUILD_TYPE=Release --install-space /opt/ros/melodic</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>It’s a bit tedious installing ROS and managing pakcage on RPi and the build time is long. So I wrote this post for memo and future reference.</p><p>Next post I’ll talk about how to setup the multi-machine environment and then create a publisher node on RPi.</p><h2 id="Link-to-other-relavant-post"><a href="#Link-to-other-relavant-post" class="headerlink" title="Link to other relavant post"></a>Link to other relavant post</h2><ul><li><a href="/2020/01/14/ROS-melodic-on-Raspbian-Buster/" title="ROS melodic on Raspbian Buster">ROS melodic on Raspbian Buster</a> (this post)</li><li><a href="/2020/01/16/Multiple-machine-setup-for-ROS-melodic/" title="Multiple machine setup for ROS melodic">Multiple machine setup for ROS melodic</a></li><li><a href="/2020/01/16/Create-ROS-publisher-node-using-rospy-on-Raspberry-Pi/" title="Create ROS publisher node using rospy on Raspberry Pi">Create ROS publisher node using rospy on Raspberry Pi</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This tutorial is to install ROS melodic on latest (Mon 2020) version of Raspbian.&lt;/p&gt;
&lt;h2 id=&quot;Hardware&quot;&gt;&lt;a href=&quot;#Hardware&quot; class=&quot;headerlink&quot; title=&quot;Hardware&quot;&gt;&lt;/a&gt;Hardware&lt;/h2&gt;&lt;p&gt;The hardware I use is Raspberry Pi 4&lt;/p&gt;
&lt;img src=&quot;/2020/01/14/ROS-melodic-on-Raspbian-Buster/rpi4.jpg&quot; class&gt;
&lt;h2 id=&quot;Install-Raspbian-Buster&quot;&gt;&lt;a href=&quot;#Install-Raspbian-Buster&quot; class=&quot;headerlink&quot; title=&quot;Install Raspbian Buster&quot;&gt;&lt;/a&gt;Install Raspbian Buster&lt;/h2&gt;&lt;p&gt;Download the latest Raspbian Buster image from the &lt;a href=&quot;https://www.raspberrypi.org/downloads/raspbian/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;official website&lt;/a&gt; and follow the &lt;a href=&quot;https://www.raspberrypi.org/documentation/installation/installing-images/README.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Installation Guide&lt;/a&gt; to flash the image into a SD card.&lt;/p&gt;
    
    </summary>
    
      <category term="robotics" scheme="https://blog.danielchen.cc/categories/robotics/"/>
    
    
      <category term="robotics" scheme="https://blog.danielchen.cc/tags/robotics/"/>
    
      <category term="docker" scheme="https://blog.danielchen.cc/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Note - Inordered BST Iterator</title>
    <link href="https://blog.danielchen.cc/2019/09/25/LeetCode-Note-653-Inordered-BST-Iterator/"/>
    <id>https://blog.danielchen.cc/2019/09/25/LeetCode-Note-653-Inordered-BST-Iterator/</id>
    <published>2019-09-25T23:40:34.000Z</published>
    <updated>2021-08-11T00:36:31.518Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/two-sum-iv-input-is-a-bst/" target="_blank" rel="noopener">LC 653. Two Sum IV - Input is a BST</a></p><h2 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h2><blockquote><p>Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.</p></blockquote><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span></span><br><span class="line">    <span class="number">5</span></span><br><span class="line">   <span class="string">/</span> <span class="string">\</span></span><br><span class="line">  <span class="number">3</span>   <span class="number">6</span></span><br><span class="line"> <span class="string">/</span> <span class="string">\</span>   <span class="string">\</span></span><br><span class="line"><span class="number">2</span>   <span class="number">4</span>   <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="string">Target</span> <span class="string">=</span> <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Output:</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Input:</span></span><br><span class="line">    <span class="number">5</span></span><br><span class="line">   <span class="string">/</span> <span class="string">\</span></span><br><span class="line">  <span class="number">3</span>   <span class="number">6</span></span><br><span class="line"> <span class="string">/</span> <span class="string">\</span>   <span class="string">\</span></span><br><span class="line"><span class="number">2</span>   <span class="number">4</span>   <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="string">Target</span> <span class="string">=</span> <span class="number">28</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Output:</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="Thought"><a href="#Thought" class="headerlink" title="Thought"></a>Thought</h2><p>The strategy is the same as finding two elements in a sorted array that sum of them equals to k. But we cannot perform random access on a BST. The key point of this question is to either rebuild the sorted array by inorder traversal through BST or iteratively go through the BST also in inorder order.</p><p>There’s a clear and efficient solution posted in the discussion that he implemented a BST Iterator to simulate the two pointer sweeping in the sorted array version.</p><p>I try to implement one with some modification to make it more clear and readable.</p><h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h2><p>The traverse operation cost O(1) and the loop stop when all the elements are visited once. So overall complexity is O(N).</p><h2 id="Full-Solution"><a href="#Full-Solution" class="headerlink" title="Full Solution"></a>Full Solution</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSTIterator</span> &#123;</span></span><br><span class="line">    TreeNode *curr;</span><br><span class="line">    TreeNode *next;</span><br><span class="line">    <span class="built_in">stack</span>&lt;TreeNode*&gt; st;</span><br><span class="line">    <span class="keyword">bool</span> forward;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BSTIterator(TreeNode *root, <span class="keyword">bool</span> forward) : curr(root), next(root), forward(forward) &#123;</span><br><span class="line">        <span class="keyword">while</span>(next) &#123;</span><br><span class="line">            curr = next;</span><br><span class="line">            st.push(curr);</span><br><span class="line">            next = forward? curr-&gt;left: curr-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">operator</span>*() &#123; <span class="keyword">return</span> curr-&gt;val; &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(next) &#123;</span><br><span class="line">            curr = next;</span><br><span class="line">            st.push(curr);</span><br><span class="line">            next = forward? curr-&gt;left: curr-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        curr = st.top(); st.pop();</span><br><span class="line">        next = forward? curr-&gt;right: curr-&gt;left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">findTarget</span><span class="params">(TreeNode* root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        BSTIterator l(root, true), r(root, false);</span><br><span class="line">        <span class="keyword">while</span>(*l &lt; *r) &#123;</span><br><span class="line">            <span class="keyword">if</span>(*l + *r == k) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(*l + *r &gt; k) r++;</span><br><span class="line">            <span class="keyword">else</span> l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/two-sum-iv-input-is-a-bst/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LC 653. Two Sum IV - Input is a BST&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Problem-Statement&quot;&gt;&lt;a href=&quot;#Problem-Statement&quot; class=&quot;headerlink&quot; title=&quot;Problem Statement&quot;&gt;&lt;/a&gt;Problem Statement&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Examples&quot;&gt;&lt;a href=&quot;#Examples&quot; class=&quot;headerlink&quot; title=&quot;Examples&quot;&gt;&lt;/a&gt;Examples&lt;/h2&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Input:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;string&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;\&lt;/span&gt;   &lt;span class=&quot;string&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;Target&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Output:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Input:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;string&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;\&lt;/span&gt;   &lt;span class=&quot;string&quot;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;Target&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;28&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Output:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="algorithm" scheme="https://blog.danielchen.cc/categories/algorithm/"/>
    
    
      <category term="ICPC" scheme="https://blog.danielchen.cc/tags/ICPC/"/>
    
      <category term="algorithm" scheme="https://blog.danielchen.cc/tags/algorithm/"/>
    
      <category term="programming contest" scheme="https://blog.danielchen.cc/tags/programming-contest/"/>
    
      <category term="Leetcode" scheme="https://blog.danielchen.cc/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Entropy、Cross-Entropy 與 KL-Divergence (1)</title>
    <link href="https://blog.danielchen.cc/2019/06/19/entropy-cross-entropy-and-KL-divergence-1/"/>
    <id>https://blog.danielchen.cc/2019/06/19/entropy-cross-entropy-and-KL-divergence-1/</id>
    <published>2019-06-19T11:23:00.000Z</published>
    <updated>2021-08-11T00:36:31.534Z</updated>
    
    <content type="html"><![CDATA[<p>在過去我曾撰文討論過  的計量方式，其中提到可利用資訊熵來衡量一組資料的亂數程度，在當時的文章中提到了一些熵的基本特性，例如與發生機率成反比、疊加性等，但對於熵的實際數值的意義並沒有太深的理解，當熵的概念延伸到交叉熵時便碰到了障礙。</p><p>最近讀到了幾篇寫得很棒的文章，從 Entropy 開始談，推到 Cross-Entropy，最後是 KL-Divergence，讀完後總算是有比較合理的理解，因此重新撰文討論這些概念，內容和思考邏輯基本和我參考的那幾篇文章相同，但稍微用我自己的理解方式敘述，有興趣可以直接跳到最後 Refereces 去看原文。</p><p>Cross-Entropy 在 ML 中評估分類模型的 Loss 用得相當多，在多數的 ML 教學中多略過 Cross-Entropy 的解釋，但其實如果了解 Entropy 的實際意義之後來看並不是那麼難理解。</p><p>這篇文章將會討論 Entropy 及 Cross-Entropy，KL Divergence 留到下次。</p><h1 id="Entropy"><a href="#Entropy" class="headerlink" title="Entropy"></a>Entropy</h1><p>Entropy 由資訊理論之父 Claude Shannon 發明，因此資訊熵又稱 Shannon’s Information Entropy，資訊理論當時發展的背景是通訊技術發展初期，傳輸訊息的資源有限，人們在研究怎樣傳遞訊息是最有效率的，要提升資訊的傳輸效率，有兩個切入點，一是提升訊息傳遞技術本身的效率，如更快的傳輸設備，另一是提升單位資料傳輸可傳遞的資訊量，而後者就是資訊理論研究的對象。</p><p>換句話說，我們在訊找一個最有效率的編碼方式，用最少的資料表達最多的資訊，資訊熵的提出就是用來評估一套編碼系統的效率。</p><p>假設我們現在要對英文字母 A~Z 以 0 和 1 的位元資料編碼，直覺來說我們至少可以用 5 個 bits 來進行編碼，因為 5 個 bits 最多可以表達 32 個值，選其中 26 個出來一一對應就可以表達出 A~Z。</p><p>這個例子裡面 A~Z 這 26 個字母所使用的編碼長度都是 5 bits，因此對於這個編碼系統而言，我們平均需要 5 bits 來表達 A~Z。</p><p>但實際上 A~Z 出現的頻率並不是一致的，如果我們用較少的 bits 來表達較常見的字母，是不是能夠降低平均所需要的位元數呢？根據維基百科條目 <a href="https://en.wikipedia.org/wiki/Letter_frequency" target="_blank" rel="noopener">Letter frequency</a> 中所提供的資料，我們有 26 個字母發生的機率</p><div class="table-container"><table><thead><tr><th>Letter</th><th>P(l)</th><th>Coding</th></tr></thead><tbody><tr><td>a</td><td>8.167%</td><td>00001</td></tr><tr><td>b</td><td>1.492%</td><td>00010</td></tr><tr><td>c</td><td>2.782%</td><td>00011</td></tr><tr><td>d</td><td>4.253%</td><td>00100</td></tr><tr><td>e</td><td>12.702%</td><td>00101</td></tr><tr><td>f</td><td>2.228%</td><td>00110</td></tr><tr><td>g</td><td>2.015%</td><td>00111</td></tr><tr><td>h</td><td>6.094%</td><td>01000</td></tr><tr><td>i</td><td>6.966%</td><td>01001</td></tr><tr><td>j</td><td>0.153%</td><td>01010</td></tr><tr><td>k</td><td>0.772%</td><td>01011</td></tr><tr><td>l</td><td>4.025%</td><td>01100</td></tr><tr><td>m</td><td>2.406%</td><td>01101</td></tr><tr><td>n</td><td>6.749%</td><td>01110</td></tr><tr><td>o</td><td>7.507%</td><td>01111</td></tr><tr><td>p</td><td>1.929%</td><td>10000</td></tr><tr><td>q</td><td>0.095%</td><td>10001</td></tr><tr><td>r</td><td>5.987%</td><td>10010</td></tr><tr><td>s</td><td>6.327%</td><td>10011</td></tr><tr><td>t</td><td>9.056%</td><td>10100</td></tr><tr><td>u</td><td>2.758%</td><td>10101</td></tr><tr><td>v</td><td>0.978%</td><td>10110</td></tr><tr><td>w</td><td>2.360%</td><td>10111</td></tr><tr><td>x</td><td>0.150%</td><td>11000</td></tr><tr><td>y</td><td>1.974%</td><td>11001</td></tr><tr><td>z</td><td>0.074%</td><td>11010</td></tr></tbody></table></div><p>有了機率分布可以計算一下編碼系統的位元數期望值</p><script type="math/tex; mode=display">\mathbb{E}_{l \in letters}[\text{required bits for letter l}] = \sum_{l \in letters} P(l) (\text{required bits for letter l})</script><p>對於剛剛的 5 bits 系統，應該不難計算出期望值等於 5。</p><p>觀察下公式可以發現我們如果用越少的 bits 數來表達，整體的期望值會越小，但我們可以這樣任意的刪減位元數嗎？首先你可能會想到，如果把整個編碼系統的位元數都減掉一個 bit 的話，那我們可以用的映射只剩下 16 個，不夠 26 個字母使用。如果只挑幾個字母來縮減呢？</p><p>假設今天我們想減少頻率最高的字母 e 所需要位元數到 4 bits，計算一下會發現位元數的期望值降低了，大約是 4.87 (bits)，但很快的你會發現問題，假設我們從原本的編碼去做刪減，例如去掉第一個 bit，變成 0100，那麼當 e 和其他字母並排在一起時，會發生混淆，例如</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">010010100</span></span><br></pre></td></tr></table></figure><p>有兩種解碼方式<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0100 </span><span class="number">10100</span> et</span><br><span class="line"><span class="symbol">01001 </span><span class="number">0010</span> ie</span><br></pre></td></tr></table></figure></p><p>當然你可以選擇不會混淆的編碼，例如 1111，這是因為我們並沒有充足的使用 5 bits 的編碼系統，還有一些額外的空間可以使用，但很快地當你想要再進一步縮減時就會出現問題。</p><p>一個可能的解決方法是在可能會混淆的編碼中加上額外的 bit 來標示區別，但你可能會想，這樣不就增加了編碼長度了嗎？別忘了我們的目標是降低總體期望值，我們可以把這些比較長的編碼指定給頻率較低的字母，這樣整體而言期望值還是有機會降低的，也就是說，頻率越高的我們用較少的位元數表達，頻率越低的可以犧牲點用較多的位元數表達，整體的利用效率有機會可以最大化。</p><p>那麼怎樣才是理想上最佳的表達呢？考慮上表中 e 的出現機率 12.7%，為了簡化運算和直觀理解，我們近似成 12.5%，這機率的意思是，每 8 個字母中可能出現 e 一次，也就是說我們的編碼系統至少需要能分辨 8 個值，才有可能表達出機率是 12.5% 的事件，而分辨 8 個值所需要的 bit 數為 $log_2(8) = 3$，整理一下這個最低所需 bit 數的公式，假設我們需要分辨 N 個值</p><script type="math/tex; mode=display">log N = - log \frac{1}{N} = - log P</script><p>也就是說要能夠分辨發生機率為 P 的事件所需要的位元數是 $- log P$ 個，這就是前篇文中所提到的 Self information 的公式。</p><p>有了這個我們可以根據上表中每個字母的發生機率計算要分辨該字母的發生最少需要的位元數，乘上機率後相加，便是最理想的編碼系統，平均最小所需的位元數，這就是 Entropy，公式如下</p><script type="math/tex; mode=display">Entropy = \mathbb{E}_{X}[-log P(X)] = -\sum_{x \sim X} P(x) log P(x)</script><p>用一句話來說的話，資訊熵表示對於編碼一<strong>已知機率分布</strong>的隨機事件，所需的最少位元數。</p><p>對於機率分布 P 的 Entropy 也常被寫作 $H(P)$。</p><h1 id="資訊量？亂度？"><a href="#資訊量？亂度？" class="headerlink" title="資訊量？亂度？"></a>資訊量？亂度？</h1><p>在前一篇文章中我們提到我們可以用熵來評估亂數程度，一些直觀的理解我已經在前一篇文中敘述過了，可以過去看看，這邊根據上述的定義嘗試討論看看以資訊理論的角度來看熵的亂度涵義，我們可以透過數學證明均勻分布的資訊熵為最大值，證明如下</p><p>我們知道一個離散的完全隨機的事件其機率分布應為均勻分布，我們可以計算其資訊熵之值</p><script type="math/tex; mode=display">Entropy(\text{Uniform distribution}) = - \sum^N \frac{1}{N} log \frac{1}{N} = log N</script><p>如果分布不均勻的話，假設我們有以下分布</p><script type="math/tex; mode=display">\{P_1, P_2, P_3, P_4, ...\}=\{\frac{1}{N} + \epsilon_1, \frac{1}{N} + \epsilon_2, \frac{1}{N} + \epsilon_3, \frac{1}{N} + \epsilon_4, \dots\}</script><p>其中</p><script type="math/tex; mode=display">-\frac{1}{N} \leq \epsilon_n \leq \frac{N-1}{N} \\\sum \epsilon_n = 0</script><p>計算其資訊熵</p><script type="math/tex; mode=display">\begin{align}Entropy(\{P_1, P_2, P_3, P_4, ...\}) &= - \sum_{n=1}^N P_n log P_n \\&= - [(\frac{1}{N} + \epsilon_1) log(\frac{1}{N} + \epsilon_1) + (\frac{1}{N} + \epsilon_2) log(\frac{1}{N} + \epsilon_2) + \dots] \\&= - [\frac{1}{N}(log(\frac{1}{N} + \epsilon_1) + log(\frac{1}{N} + \epsilon_2) + \dots) \\& \qquad + \epsilon_1 log(\frac{1}{N} + \epsilon_1) + \epsilon_2 log(\frac{1}{N} + \epsilon_2) + \dots] \\&= - [\frac{1}{N}(Nlog \frac{1}{N} + log(1 + N\epsilon_1) + log(1 + N\epsilon_2) + \dots) \\& \qquad + \sum \epsilon_n log \frac{1}{N} + \epsilon_1 log(1 + N\epsilon_1) + \epsilon_2 log(1 + N\epsilon_2) + \dots] \\&= log N - [\frac{1}{N}(log(1 + N\epsilon_1) + log(1 + N\epsilon_2) + \dots) \\& \qquad + \epsilon_1 log(1 + N\epsilon_1) + \epsilon_2 log(1 + N\epsilon_2) + \dots] \\&= log N - [(\frac{1}{N} + \epsilon_1)log(1 + N\epsilon_1) + (\frac{1}{N} + \epsilon_2)log(1 + N\epsilon_2) + \dots] \\&= log N - \frac{1}{N}[(1 + N\epsilon_1)log(1 + N\epsilon_1) + (1 + N\epsilon_2)log(1 + N\epsilon_2) + \dots] \\\end{align}</script><p>其中因為</p><script type="math/tex; mode=display">-\frac{1}{N} \leq \epsilon_n \leq \frac{N-1}{N} \\0 \leq 1 + N\epsilon_n \leq N</script><p>又</p><script type="math/tex; mode=display">\lim_{x \to 0} x log(x) = 0</script><p>我們得到</p><script type="math/tex; mode=display">(1 + N\epsilon_n) log (1 + N\epsilon_n) > 0</script><p>使得</p><script type="math/tex; mode=display">[(1 + N\epsilon_1)log(1 + N\epsilon_1) + (1 + N\epsilon_2)log(1 + N\epsilon_2) + \dots] > 0 \\\begin{align}Entropy(\{P_1, P_2, P_3, P_4, ...\}) &= log N - \frac{1}{N}[(1 + N\epsilon_1)log(1 + N\epsilon_1) + (1 + N\epsilon_2)log(1 + N\epsilon_2) + \dots] \\&< logN\end{align}</script><p>我們證明對於離散的隨機事件，完全隨機的 Entropy 會是最大的，此外當機率集中於某個事件時，考慮極端狀況 ${P_k = 1, P_{n\neq k}=0}$，Entropy 會等於零，也就是說事件越確定 Entropy 會越低，這性質亦可以推廣至連續的分佈。</p><p>總之到目前為止我們總算清楚了 Entropy 的實際涵義以及其可測量亂度的特性。</p><h1 id="Cross-Entropy"><a href="#Cross-Entropy" class="headerlink" title="Cross-Entropy"></a>Cross-Entropy</h1><p>上一個章節我們計算了一個隨機事件的熵，但各位要注意到熵的計算假設我們知道事件的機率分布，可實際上很多時候我們並不知道實際的機率分布，我們可能會假設一個機率分布來做編碼系統的設計。</p><p>例如說我們有個假定的機率分布 Q</p><p>我們可以計算 Q 的 Entropy</p><script type="math/tex; mode=display">Entropy(Q) = \mathbb{E}_{x\sim Q}[-logQ(x)] = - \sum_{x\sim Q} Q(x)logQ(x)</script><p>是為編碼以 Q 為機率分布的隨機事件所需的最小位元數。</p><p>但當我們知道實際的機率分布為 P 之後，我們可以評估看看以 Q 所設計出的編碼系統在真實分布下的位元數期望值</p><script type="math/tex; mode=display">CrossEntropy(P,Q) = \mathbb{E}_{x\sim P}[-logQ(x)] = - \sum_{x\sim P} P(x)logQ(x)</script><p>這就是交叉熵，用來評估以另一個機率分布設計編碼系統描述真實機率分布的能力，又記做 $H(P,Q)$。</p><h1 id="H-P-Q-ge-H-P"><a href="#H-P-Q-ge-H-P" class="headerlink" title="$H(P,Q) \ge H(P)$"></a>$H(P,Q) \ge H(P)$</h1><p>交叉熵一個重要的特性是其值必大於機率分布 P 的資訊熵，證明大家可以自己嘗試看看，但直觀上意義就是，機率分布 P 的最理想編碼長度就是 H(P)，用其他不準確的分布來編碼其效率必小於此編碼 (也就是說需要更多的位元數來表達)。</p><h1 id="Cross-Entropy-作為-loss-function"><a href="#Cross-Entropy-作為-loss-function" class="headerlink" title="Cross-Entropy 作為 loss function"></a>Cross-Entropy 作為 loss function</h1><p>在分類問題中最常被拿來當作 loss function 的就是 Cross-Entropy，但通常一般的 ML 教學都會略過 Cross Entropy 的解釋，不過理解了 Entropy 和 Cross Entropy 的概念之後其實不難理解為什麼可以用交叉熵來作為分類問題的 loss function。</p><p>分類模型其實可以看成是去近似一個條件機率分布 Q，給定資料 X，每個 Class 發生的機率為何，即 $Q(Class_i|X)$，而每次訓練時，我們都有實際的 (GT) 和近似的 (Model) 機率分布，實際的分布以 One-hot encoding 表達，例如某個資料 $x$ 屬於 $Class_k$，其實際的條件機率分布為 $P(Class_{i\ne k}|x) = 0, P(Class_{k}|x) = 1$，而模型的輸出為 $Q(Class_i|x) = {Q_1, Q_2, \dots, Q_n}$</p><p>透過計算 H(P,Q)，我們可以得到以 Q 來表達 P 的能力，當 Q 越接近 P 時 H(P,Q) 會越小，因此可以將其作為衡量 P、Q 兩分佈相似的程度。</p><p>而 Logistic Regression 所用的 Binary Cross-Entropy 公式也可以從 Cross-Entropy 推得</p><script type="math/tex; mode=display">\begin{align}H(P,Q) &= - \sum_{x\sim P} P(x)logQ(x) \\&= - (P(1)logQ(1) + P(0)logQ(0)) \\&= - (P(1)logQ(1) + (1-P(1))log(1-Q(1))) \\&= - (y\ log\ y' + (1-y)\ log\ (1-y'))\end{align}</script><h1 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h1><p>以上，應該對 Entropy 和 Cross Entropy 有比較有條理的理解了，KL Divergence 留到下次再寫，KL Divergence 是 Generative model 中用非常多的一個指標，其概念也是從 Entropy 延伸出去的，欲了解 Generative model 必須先理解 KL Divergence，KL Divergence 和 Cross Entropy 類似，都可以評估兩個分佈的差異程度，實際應用上這兩者也經常是等價的，下一篇將詳細解說。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul><li><a href="https://towardsdatascience.com/demystifying-entropy-f2c3221e2550" target="_blank" rel="noopener">Demystifying Entropy - Naoki Shibuya</a></li><li><a href="https://towardsdatascience.com/demystifying-cross-entropy-e80e3ad54a8" target="_blank" rel="noopener">Demystifying Cross-Entropy - Naoki Shibuya</a></li><li><a href="https://towardsdatascience.com/demystifying-kl-divergence-7ebe4317ee68" target="_blank" rel="noopener">Demystifying KL Divergence - Naoki Shibuya</a></li><li><a href="https://stats.stackexchange.com/questions/265966/why-do-we-use-kullback-leibler-divergence-rather-than-cross-entropy-in-the-t-sne/265989" target="_blank" rel="noopener">Why do we use Kullback-Leibler divergence rather than cross entropy in the t-SNE objective function?</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在過去我曾撰文討論過  的計量方式，其中提到可利用資訊熵來衡量一組資料的亂數程度，在當時的文章中提到了一些熵的基本特性，例如與發生機率成反比、疊加性等，但對於熵的實際數值的意義並沒有太深的理解，當熵的概念延伸到交叉熵時便碰到了障礙。&lt;/p&gt;
&lt;p&gt;最近讀到了幾篇寫得很棒的文章，從 Entropy 開始談，推到 Cross-Entropy，最後是 KL-Divergence，讀完後總算是有比較合理的理解，因此重新撰文討論這些概念，內容和思考邏輯基本和我參考的那幾篇文章相同，但稍微用我自己的理解方式敘述，有興趣可以直接跳到最後 Refereces 去看原文。&lt;/p&gt;
&lt;p&gt;Cross-Entropy 在 ML 中評估分類模型的 Loss 用得相當多，在多數的 ML 教學中多略過 Cross-Entropy 的解釋，但其實如果了解 Entropy 的實際意義之後來看並不是那麼難理解。&lt;/p&gt;
&lt;p&gt;這篇文章將會討論 Entropy 及 Cross-Entropy，KL Divergence 留到下次。&lt;/p&gt;
&lt;h1 id=&quot;Entropy&quot;&gt;&lt;a href=&quot;#Entropy&quot; class=&quot;headerlink&quot; title=&quot;Entropy&quot;&gt;&lt;/a&gt;Entropy&lt;/h1&gt;&lt;p&gt;Entropy 由資訊理論之父 Claude Shannon 發明，因此資訊熵又稱 Shannon’s Information Entropy，資訊理論當時發展的背景是通訊技術發展初期，傳輸訊息的資源有限，人們在研究怎樣傳遞訊息是最有效率的，要提升資訊的傳輸效率，有兩個切入點，一是提升訊息傳遞技術本身的效率，如更快的傳輸設備，另一是提升單位資料傳輸可傳遞的資訊量，而後者就是資訊理論研究的對象。&lt;/p&gt;
    
    </summary>
    
      <category term="machine learning" scheme="https://blog.danielchen.cc/categories/machine-learning/"/>
    
    
      <category term="machine learning" scheme="https://blog.danielchen.cc/tags/machine-learning/"/>
    
      <category term="math" scheme="https://blog.danielchen.cc/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>Day 9 Vue class 以及 style 綁定</title>
    <link href="https://blog.danielchen.cc/2019/03/07/Day-9-Vue-class-and-style-bind/"/>
    <id>https://blog.danielchen.cc/2019/03/07/Day-9-Vue-class-and-style-bind/</id>
    <published>2019-03-07T16:09:51.000Z</published>
    <updated>2021-08-11T00:36:31.518Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ithelp.ithome.com.tw/articles/10211132" target="_blank" rel="noopener">原文章</a></p><p>今天要講的是和網站外貌很有關係的 <code>class</code> 及 <code>style</code> 綁定</p><p>我們有幾種方式為 DOM 設定樣式，其中兩種常用的是 <code>.css</code> 檔案和 <code>inline style</code>，前者通常會使用 class 來作為 selector。</p><p>在 vue 中也有提供相關的綁定讓你可以將樣式的設定程式化。</p><h1 id="Class-綁定"><a href="#Class-綁定" class="headerlink" title="Class 綁定"></a>Class 綁定</h1><p>class 也是一種 DOM 屬性，因此語法和屬性綁定一樣使用 <code>v-bind:</code>，但我們可以利用一些布林參數來切換 class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  isActive: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我們用 <code>isActive</code> 這個 data 屬性來切換 <code>active</code> 這個 class</p><p><code>v-bind:class</code> 也可以和一般固定寫死的 <code>class</code> 混用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"static"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError &#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  isActive: <span class="literal">true</span>,</span><br><span class="line">  hasError: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果為</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static active"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>和其他各種綁定一樣，當 data 更新的時候也會做出相關的更新，例如將 <code>hasError</code> 設定為 true，則上述元素會變為</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static active text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>註: js object key name 不能使用 hypen，例如 <code>{ hey-yo: 666 }</code> 這是不合法的，如果要使用 hypen 的話必須明確用 string 當作 key，如 <code>{ &#39;hey-yo&#39;: 666 }</code>，這就是為什麼上面的 <code>text-danger</code> 要加引號其他的不用，當然其他的加引號也是沒問題的。</p></blockquote><p>我們也可以直接在 data 宣告一個 object 綁進去<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  classObject: &#123;</span><br><span class="line">    active: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">'text-danger'</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>前一篇講的 computed property 也是沒問題的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  isActive: <span class="literal">true</span>,</span><br><span class="line">  error: <span class="literal">null</span></span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  classObject: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      active: <span class="keyword">this</span>.isActive &amp;&amp; !<span class="keyword">this</span>.error,</span><br><span class="line">      <span class="string">'text-danger'</span>: <span class="keyword">this</span>.error &amp;&amp; <span class="keyword">this</span>.error.type === <span class="string">'fatal'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Array-syntax"><a href="#Array-syntax" class="headerlink" title="Array syntax"></a>Array syntax</h2><p>有另外一個寫法是傳一個 array 進去</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  activeClass: <span class="string">'active'</span>,</span><br><span class="line">  errorClass: <span class="string">'text-danger'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果是</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"active text-danger"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>這種寫法如果你想做 class 的切換可以用三元運算子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive ? activeClass : '', errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但這樣很不直觀，可以改用最一開始介紹的 object 的寫法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[&#123; active: isActive &#125;, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>這屬性也可以在自定義的 vue component 中使用，到時候介紹完 component 再回來看。</p><h1 id="Inline-style"><a href="#Inline-style" class="headerlink" title="Inline style"></a>Inline style</h1><p>一樣是對 <code>sylte</code> 使用 <code>v-bind:</code> 來做綁定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  activeColor: <span class="string">'red'</span>,</span><br><span class="line">  fontSize: <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起來和 css 非常相似，很方便，不過 css 中有一些用 hypen 連接的屬性名稱 (hypen 連接的變數命名方式稱為 <code>kebab-case</code>)，需要改寫成 <code>camelCase</code>，但其實也可以直接使用 <code>kebab-case</code>，只是需要記得加上引號 (和前面 class 使用 hypen 的例子一樣，可以翻回去看。</p><p>一樣可以做一個 object 丟進去<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"styleObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  styleObject: &#123;</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">    fontSize: <span class="string">'13px'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看起來更像 css 了，感覺還蠻像我們做一個一個小的樣式方塊，然後需要的時候可以套用進去，還蠻有趣的。</p><p><code>v-bind:style</code> 同樣也支援 array syntax，用法和 class 一樣<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> v-<span class="keyword">bind</span>:style=<span class="string">"[baseStyles, blueText]"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  baseStyles: &#123;</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">    fontSize: <span class="string">'13px'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  blueText: &#123;</span><br><span class="line">    color: <span class="string">'blue'</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有一些 css 屬性有針對瀏覽器相容性的 prefixes，在 Vue 2.3.0 以後的版本有支援這個部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123; display: ['-webkit-box', '-ms-flexbox', 'flex'] &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>render 時只會顯示瀏覽器支援的最後一個，例如多數瀏覽器目前應該都支援 <code>flex</code> 而不需要任何 prefixe，則上面的 code 執行結果為</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> style=<span class="string">"display: flex"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>Vue 提供給我們相當方便可以程式化樣式套用的方法，可以更靈活且模組化地去設計 css。</p><p>下一次將更詳細的介紹之前講解過的條件式 render: <code>v-if</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10211132&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天要講的是和網站外貌很有關係的 &lt;code&gt;class&lt;/code&gt; 及 &lt;code&gt;style&lt;/code&gt; 綁定&lt;/p&gt;
&lt;p&gt;我們有幾種方式為 DOM 設定樣式，其中兩種常用的是 &lt;code&gt;.css&lt;/code&gt; 檔案和 &lt;code&gt;inline style&lt;/code&gt;，前者通常會使用 class 來作為 selector。&lt;/p&gt;
&lt;p&gt;在 vue 中也有提供相關的綁定讓你可以將樣式的設定程式化。&lt;/p&gt;
&lt;h1 id=&quot;Class-綁定&quot;&gt;&lt;a href=&quot;#Class-綁定&quot; class=&quot;headerlink&quot; title=&quot;Class 綁定&quot;&gt;&lt;/a&gt;Class 綁定&lt;/h1&gt;&lt;p&gt;class 也是一種 DOM 屬性，因此語法和屬性綁定一樣使用 &lt;code&gt;v-bind:&lt;/code&gt;，但我們可以利用一些布林參數來切換 class&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://blog.danielchen.cc/categories/web/"/>
    
    
      <category term="web" scheme="https://blog.danielchen.cc/tags/web/"/>
    
      <category term="frontend" scheme="https://blog.danielchen.cc/tags/frontend/"/>
    
      <category term="vue.js" scheme="https://blog.danielchen.cc/tags/vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Day 8 Vue 計算屬性及屬性監看</title>
    <link href="https://blog.danielchen.cc/2019/03/06/Day-8-Vue-property/"/>
    <id>https://blog.danielchen.cc/2019/03/06/Day-8-Vue-property/</id>
    <published>2019-03-06T01:29:20.000Z</published>
    <updated>2021-08-11T00:36:31.518Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ithelp.ithome.com.tw/articles/10185324" target="_blank" rel="noopener">原文章</a></p><p>前幾篇介紹了如何將 vue 物件中的屬性綁定到模板中，其中在 Day 5 提到我們可以在模板中直接插入 js 語句，可以對要顯示的資料進行處理，但 vue 並不建議你這麼做，因為模板會顯得很亂而且非常不值觀，如下範例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">  &#123;&#123; message.split('').reverse().join('') &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除了使用 <code>filter</code> 以外，vue 提供了兩個可以對資料進行處理的方式 <code>computed property</code> 以及 <code>watch</code>。</p><h1 id="計算屬性-Computed-property"><a href="#計算屬性-Computed-property" class="headerlink" title="計算屬性 (Computed property)"></a>計算屬性 (Computed property)</h1><p>當有對資料進行複雜的處理的需求時，我們可以在 vue 物件的 computed 屬性加入自定義的 computed property，並定義其對應的函式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message: "&#123;&#123; message &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Computed reversed message: "&#123;&#123; reversedMessage &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// a computed getter</span></span><br><span class="line">    reversedMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// `this` points to the vm instance</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在 computed property 中，<code>this</code> 對應到的是該 vue 物件，可以看到這個例子裏面 <code>reversedMessage</code> 相依於 <code>message</code> 屬性，當 <code>message</code> 更新時，<code>reversedMessage</code> 就會重新計算，並更新到 DOM 中。</p><p>可以嘗試在 console 中修改 <code>message</code> 看看<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(vm.reversedMessage) <span class="comment">// =&gt; 'olleH'</span></span><br><span class="line">vm.message = <span class="string">'Goodbye'</span></span><br><span class="line"><span class="built_in">console</span>.log(vm.reversedMessage) <span class="comment">// =&gt; 'eybdooG'</span></span><br></pre></td></tr></table></figure></p><h1 id="計算快取-Computed-cache"><a href="#計算快取-Computed-cache" class="headerlink" title="計算快取 (Computed cache)"></a>計算快取 (Computed cache)</h1><p>從上述範例可以發現 computed property 會去監聽在其相依資料的更新，並在更新時重新計算，若資料沒有更新則該屬性的 DOM 會顯示上一次計算好的內容，稱為 computed cache。</p><p>這邊就可以指出使用 computed property 和定義一個 method 並在模板中呼叫最主要的差異，那就是 method 在每次 re-render 時都會重新執行，先考慮以下用 method 實作的 <code>reverseMessage</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Reversed message: "&#123;&#123; reverseMessage() &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in component</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  reverseMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次 rerender 時 <code>reverseMessage</code> 會重新計算結果，因此如果 <code>messag</code> 在過程中有變更，則 <code>reverseMesage</code> 的結果也會跟著改變。</p><p>而因為我們更新了 <code>message</code>，這個操作會更新 computed cache，因此如果用 computed property 的話，從 render 出的結果來看會與 computed property 一致。</p><p>但如果我們考慮以下範例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">computed</span>: &#123;</span><br><span class="line">  <span class="attribute">now</span>: function () &#123;</span><br><span class="line">    return Date.<span class="built_in">now</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這個 computed property 所參考的是一個 Date 物件，當他被建立後就不會再更新了。如果我們用 method 來實作一樣的功能，則每次 render 該物件時都會重新執行一次，now 就會不斷被更新，可是如果用 computed property 的話，因為這個物件不會被更新，所以 rerender 時會從 computed cache 拿上一次計算的結果，now 就不會被更新。</p><p>使用 computed cache 的時機是，當有個需要消耗較多運算資源的資料（例如 AJAX）需要被顯示在很多地方時，若用 method 則每個地方該方法都會被重新運算，會造成相當大的資源消耗，此時有 computed cache 可以大幅增進效能。</p><h1 id="Computed-setter"><a href="#Computed-setter" class="headerlink" title="Computed setter"></a>Computed setter</h1><p>一般我們只會對 computed property 設定 getter，但我們也能為它指定 setter</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    <span class="keyword">get</span>: function () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line">    <span class="keyword">set</span>: function (newValue) &#123;</span><br><span class="line">      <span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>)</span><br><span class="line">      <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>在 console 中執行 <code>vm.fullName = &#39;John Doe&#39;</code>，可以觀察到 <code>firstName</code> 和 <code>lastName</code> 被更新了。</p><h1 id="屬性監視-Watched-property"><a href="#屬性監視-Watched-property" class="headerlink" title="屬性監視 (Watched property)"></a>屬性監視 (Watched property)</h1><p>和 computed property 類似，我們可以建立一個函式來偵測某個屬性的更新</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Foo'</span>,</span><br><span class="line">    lastName: <span class="string">'Bar'</span>,</span><br><span class="line">    fullName: <span class="string">'Foo Bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    firstName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fullName = val + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    lastName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + <span class="string">' '</span> + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>當 <code>firstName</code> 或 <code>lastName</code> 被更新時，watch 會去執行對應的兩個函式，進而更新 <code>fullName</code>。</p><p>但這個例子用 computed property 可以寫得更簡潔</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Foo'</span>,</span><br><span class="line">    lastName: <span class="string">'Bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    fullName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最後官方給了一個複雜的 <a href="https://vuejs.org/v2/guide/computed.html#Watchers" target="_blank" rel="noopener">watch 範例</a>，大家可以自己研究一下，簡單來說我們可以用 watch 來偵測使用者輸入，詳細的資料流我覺得大家看著 code 自己在腦中跑過一次會對這兩個工具更加熟悉，不過看不懂沒關係，因為裡面牽扯到一個後面才會提到的用法 <code>v-model</code>。</p><p>最後提一下，watch 的應用時機應是當我們想對資料的更新做出複雜的反應和操作時使用。</p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>今天介紹了 computed 以及 watch 屬性，並介紹了 computed 的 computed cache 特性以及 computed/method 的應用時機。</p><p>下次將介紹 class 和 style 的綁定，為你的 DOM 加上生動的樣式吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10185324&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前幾篇介紹了如何將 vue 物件中的屬性綁定到模板中，其中在 Day 5 提到我們可以在模板中直接插入 js 語句，可以對要顯示的資料進行處理，但 vue 並不建議你這麼做，因為模板會顯得很亂而且非常不值觀，如下範例&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;example&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&amp;#123; message.split(&#39;&#39;).reverse().join(&#39;&#39;) &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了使用 &lt;code&gt;filter&lt;/code&gt; 以外，vue 提供了兩個可以對資料進行處理的方式 &lt;code&gt;computed property&lt;/code&gt; 以及 &lt;code&gt;watch&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;計算屬性-Computed-property&quot;&gt;&lt;a href=&quot;#計算屬性-Computed-property&quot; class=&quot;headerlink&quot; title=&quot;計算屬性 (Computed property)&quot;&gt;&lt;/a&gt;計算屬性 (Computed property)&lt;/h1&gt;&lt;p&gt;當有對資料進行複雜的處理的需求時，我們可以在 vue 物件的 computed 屬性加入自定義的 computed property，並定義其對應的函式&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://blog.danielchen.cc/categories/web/"/>
    
    
      <category term="web" scheme="https://blog.danielchen.cc/tags/web/"/>
    
      <category term="frontend" scheme="https://blog.danielchen.cc/tags/frontend/"/>
    
      <category term="vue.js" scheme="https://blog.danielchen.cc/tags/vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Day 7 Vue模板-3</title>
    <link href="https://blog.danielchen.cc/2019/03/05/Day-7-Vue-template-3/"/>
    <id>https://blog.danielchen.cc/2019/03/05/Day-7-Vue-template-3/</id>
    <published>2019-03-05T15:29:32.000Z</published>
    <updated>2021-08-11T00:36:31.518Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ithelp.ithome.com.tw/articles/10185322" target="_blank" rel="noopener">原文章</a></p><p>昨天談到了指示子的一些性質與用法，今天要介紹filter，寫過angular的應該對這語法不陌生</p><h1 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h1><p>filter直譯是過濾器，但寫過濾器好像有種要把不要的東西過濾掉的意思（雖然可以這麼做），不過一時也想不到更好的翻譯，簡單來說filter的用途是在資料顯示之前對資料進行前處理，以下是個簡單的範例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- in mustaches --&gt;</span></span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- in v-bind --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"rawId | formatId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  filters: &#123;</span><br><span class="line">    capitalize: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">      value = value.toString()</span><br><span class="line">      <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>這個範例將要顯示的字串的開頭第一個字都改成大寫，注意到formatId並沒有實做，那邊只是展示如果要在屬性裡面使用filter要怎麼寫而已</p><p>filter可以連續使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br></pre></td></tr></table></figure><p>filter是個js function，vue會將filter的對象當成第一個參數傳入filter，你也可以使用一個以上的參數</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA('arg1', arg2) &#125;&#125;</span><br></pre></td></tr></table></figure><p><code>&#39;arg1&#39;</code>這個字串會作為第二個參數（第一個是message）傳入filterA，<code>arg2</code>是第三個參數…以此類推</p><p>要注意的一點是filter在vue 2.x裡面只能使用於插入本文<code>{{}}</code>與插入屬性<code>v-bind</code>中，因為filter是被設計來進行文字處理的，如果要進行更複雜的計算或轉換，可使用<code>computed</code>屬性</p><h1 id="縮寫"><a href="#縮寫" class="headerlink" title="縮寫"></a>縮寫</h1><p>vue提供了縮寫給兩個最常用的語法：<code>v-bind</code> <code>v-on</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- full syntax --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- shorthand --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- full syntax --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- shorthand --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>vue的模板系統語法和其他框架大同小異，基本的功能就是內容插入、條件判斷、迴圈、filter，模板是動態生成內容一個很重要的部份，有了模板系統我們可以直接在html文本裡面寫入邏輯</p><p>模板系統大致上就到這邊，明天將提到兩個新的vue options，compute＆watch</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10185322&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;昨天談到了指示子的一些性質與用法，今天要介紹filter，寫過angular的應該對這語法不陌生&lt;/p&gt;
&lt;h1 id=&quot;filter&quot;&gt;&lt;a href=&quot;#filter&quot; class=&quot;headerlink&quot; title=&quot;filter&quot;&gt;&lt;/a&gt;filter&lt;/h1&gt;&lt;p&gt;filter直譯是過濾器，但寫過濾器好像有種要把不要的東西過濾掉的意思（雖然可以這麼做），不過一時也想不到更好的翻譯，簡單來說filter的用途是在資料顯示之前對資料進行前處理，以下是個簡單的範例&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- in mustaches --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#123; message | capitalize &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- in v-bind --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;v-bind:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;rawId | formatId&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vue(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  filters: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    capitalize: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!value) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      value = value.toString()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value.charAt(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).toUpperCase() + value.slice(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="web" scheme="https://blog.danielchen.cc/categories/web/"/>
    
    
      <category term="web" scheme="https://blog.danielchen.cc/tags/web/"/>
    
      <category term="frontend" scheme="https://blog.danielchen.cc/tags/frontend/"/>
    
      <category term="vue.js" scheme="https://blog.danielchen.cc/tags/vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Day 6 Vue模板-2</title>
    <link href="https://blog.danielchen.cc/2019/03/05/Day-6-Vue-template-2/"/>
    <id>https://blog.danielchen.cc/2019/03/05/Day-6-Vue-template-2/</id>
    <published>2019-03-05T15:19:31.000Z</published>
    <updated>2021-08-11T00:36:31.518Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ithelp.ithome.com.tw/articles/10185259" target="_blank" rel="noopener">原文章</a></p><p>昨天講到的模板語法都是跟插入內容有關，不管是插入文字內容、插入HTML內容、插入屬性內容</p><p>不過稍微修正一下昨天的說法，昨天說模板系統分成插入跟指令，今天仔細讀了一下發現原文”Directive”應該泛指所有<code>v-</code>開頭的特殊DOM屬性，所以這邊應該翻成「指示子」會比較好吧？（以下暫稱指示子，若有更好的翻譯歡迎指教）</p><p>今天要介紹的是這些特殊屬性的特性</p><h1 id="指示子-v"><a href="#指示子-v" class="headerlink" title="指示子 v-"></a>指示子 v-</h1><p>如前言所述，Vue的特殊DOM屬性都會以<code>v-</code>開頭，如<code>v-if</code>，這些特殊屬性的內容必須是單行的Javascript敘述（除了<code>v-for</code>之外），可以回憶一下之前的範例<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span>Now you see me<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="參數"><a href="#參數" class="headerlink" title="參數"></a>參數</h1><p>有些指示子會有參數，語法是在指示子後面加上<code>:</code>，然後接著參數，如<code>v-bind</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><br>這邊<code>href</code>是<code>v-bind</code>的參數，告訴<code>v-bind</code>要綁定的對象</p><p>又如<code>v-on</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span></span><br></pre></td></tr></table></figure><br><code>click</code>是<code>v-on</code>的參數，表示<code>v-on</code>的綁定對象</p><h1 id="修飾符"><a href="#修飾符" class="headerlink" title="修飾符"></a>修飾符</h1><p>有些指示子除了參數外還會有後綴，語法是加上<code>.</code>然後加修飾符，如<code>v-on</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><br>這可以讓事件被觸發時自動呼叫<code>event.preventDefault()</code></p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>以上是有關指示子的介紹，要注意的地方是並沒有把所有的例子舉出，如修飾符不只有<code>v-on</code>有而已，其他的等有碰到再介紹囉，明天將介紹模板中的filter</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10185259&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;昨天講到的模板語法都是跟插入內容有關，不管是插入文字內容、插入HTML內容、插入屬性內容&lt;/p&gt;
&lt;p&gt;不過稍微修正一下昨天的說法，昨天說模板系統分成插入跟指令，今天仔細讀了一下發現原文”Directive”應該泛指所有&lt;code&gt;v-&lt;/code&gt;開頭的特殊DOM屬性，所以這邊應該翻成「指示子」會比較好吧？（以下暫稱指示子，若有更好的翻譯歡迎指教）&lt;/p&gt;
&lt;p&gt;今天要介紹的是這些特殊屬性的特性&lt;/p&gt;
&lt;h1 id=&quot;指示子-v&quot;&gt;&lt;a href=&quot;#指示子-v&quot; class=&quot;headerlink&quot; title=&quot;指示子 v-&quot;&gt;&lt;/a&gt;指示子 v-&lt;/h1&gt;&lt;p&gt;如前言所述，Vue的特殊DOM屬性都會以&lt;code&gt;v-&lt;/code&gt;開頭，如&lt;code&gt;v-if&lt;/code&gt;，這些特殊屬性的內容必須是單行的Javascript敘述（除了&lt;code&gt;v-for&lt;/code&gt;之外），可以回憶一下之前的範例&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;v-if&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;seen&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Now you see me&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://blog.danielchen.cc/categories/web/"/>
    
    
      <category term="web" scheme="https://blog.danielchen.cc/tags/web/"/>
    
      <category term="frontend" scheme="https://blog.danielchen.cc/tags/frontend/"/>
    
      <category term="vue.js" scheme="https://blog.danielchen.cc/tags/vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Day 5 Vue模板</title>
    <link href="https://blog.danielchen.cc/2019/03/05/Day-5-Vue-template/"/>
    <id>https://blog.danielchen.cc/2019/03/05/Day-5-Vue-template/</id>
    <published>2019-03-05T15:01:55.000Z</published>
    <updated>2021-08-11T00:36:31.518Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ithelp.ithome.com.tw/articles/10185163" target="_blank" rel="noopener">原文章</a></p><p>今天要介紹Vue的模板語法，Vue使用HTML-based的模板語法，並將模板compile成virtual DOM，然後和vue物件中的data進行雙向綁定，這邊常會看到一個單字: reactivity，直譯的話是反應，我感覺意思大概有點像是DOM會對data的改變進行反應，Vue會自動計算更新DOM的最短路徑。</p><p>Vue其實也有提供JSX的Support，如果對JSX熟悉的話可以嘗試使用看看，這邊只介紹模板系統。</p><p>今天要介紹的是插入內容的語法。</p><h1 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h1><p>插入element的內容<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><br>Vue預設會對內容進行雙向綁定，若不想這麼做的話可使用<code>v-once</code>這個元素屬性<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>This will never change: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><br>這樣的話內容就只會被更新一次，不會隨著data的更新而更新</p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>雙大括號的內容會以純文字的形式插入，如果想插入HTML的話要使用<code>v-html</code>屬性<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"rawHtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>但注意動態插入HTML會有XSS攻擊的風險，所以記住插入的HTML一定要是被信任的，且盡量避免讓使用者插入HTML</p><h1 id="屬性"><a href="#屬性" class="headerlink" title="屬性"></a>屬性</h1><p>插入屬性的方式是<code>v-bind:attr</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"dynamicId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>若綁定的資料型態是boolean的話，可以做屬性的切換<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:disabled</span>=<span class="string">"someDynamicCondition"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><br>若值是false的話這個屬性會被移除</p><h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1><p>你可以在模板語法中使用JS的語法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line">&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;</span><br><span class="line">&#123;&#123; message.split('').reverse().join('') &#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"'list-' + id"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>但只能是單行的敘述，像以下語法就是不合法的(不會執行)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- this is a statement, not an expression: --&gt;</span></span><br><span class="line">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- flow control won't work either, use ternary expressions --&gt;</span></span><br><span class="line">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure><br>而且只能執行在白名單內的全域函式像是Math跟Date，無法使用自定義函式</p><blockquote><p>這點回應了  中無法直接使用 alert() 的原因</p></blockquote><p>以上是內容插入的部分，明天將繼續討論指令語法</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10185163&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天要介紹Vue的模板語法，Vue使用HTML-based的模板語法，並將模板compile成virtual DOM，然後和vue物件中的data進行雙向綁定，這邊常會看到一個單字: reactivity，直譯的話是反應，我感覺意思大概有點像是DOM會對data的改變進行反應，Vue會自動計算更新DOM的最短路徑。&lt;/p&gt;
&lt;p&gt;Vue其實也有提供JSX的Support，如果對JSX熟悉的話可以嘗試使用看看，這邊只介紹模板系統。&lt;/p&gt;
&lt;p&gt;今天要介紹的是插入內容的語法。&lt;/p&gt;
&lt;h1 id=&quot;文字&quot;&gt;&lt;a href=&quot;#文字&quot; class=&quot;headerlink&quot; title=&quot;文字&quot;&gt;&lt;/a&gt;文字&lt;/h1&gt;&lt;p&gt;插入element的內容&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;Message: &amp;#123;&amp;#123; msg &amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;Vue預設會對內容進行雙向綁定，若不想這麼做的話可使用&lt;code&gt;v-once&lt;/code&gt;這個元素屬性&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;v-once&lt;/span&gt;&amp;gt;&lt;/span&gt;This will never change: &amp;#123;&amp;#123; msg &amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;這樣的話內容就只會被更新一次，不會隨著data的更新而更新&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://blog.danielchen.cc/categories/web/"/>
    
    
      <category term="web" scheme="https://blog.danielchen.cc/tags/web/"/>
    
      <category term="frontend" scheme="https://blog.danielchen.cc/tags/frontend/"/>
    
      <category term="vue.js" scheme="https://blog.danielchen.cc/tags/vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Day 4 Vue物件</title>
    <link href="https://blog.danielchen.cc/2019/03/05/Day-4-Vue-instance/"/>
    <id>https://blog.danielchen.cc/2019/03/05/Day-4-Vue-instance/</id>
    <published>2019-03-05T01:54:34.000Z</published>
    <updated>2021-08-11T00:36:31.518Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ithelp.ithome.com.tw/articles/10185036" target="_blank" rel="noopener">原文章</a></p><p>vue的基本介紹與語法前三天已經介紹完了，基本過程是先載入vue.js，然後在html裡面寫templete，在js裡面宣告vue物件綁定至dom並寫入data，或是要使用自定義的dom元件的話要先在js裡面宣告元件。</p><p>第四天開始將深入了解前三天所提到的語法結構與各屬性的意義。</p><h1 id="Vue物件"><a href="#Vue物件" class="headerlink" title="Vue物件"></a>Vue物件</h1><p>本節的原文是Vue Instance，第一次見到Instance這個單字，拿去google翻譯是翻實例，不過詳細查了一下它有物件的意思，但又跟Object有些為差距，有興趣的人可以研究看看，在這邊先不討論。</p><p>Vue物件本身可視為<a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel" target="_blank" rel="noopener">MVVM</a>架構中的ViewModel（雖然vue本身並非完全遵照MVVM架構設計），所以有時候會以<code>vm</code>作為變數名稱指向vue物件。</p><p>vue物件扮演著data(model)及dom(view)之間的溝通橋樑，建立雙向的綁定。</p><h1 id="建構子"><a href="#建構子" class="headerlink" title="建構子"></a>建構子</h1><p>Vue物件的建構子大致長得像這樣<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// options</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>只有一個傳入參數: Options object</p><p>options的屬性有: data, template, element to mount on(el), methods, lifecycle callbacks 及<a href="https://vuejs.org/v2/api/" target="_blank" rel="noopener">其他</a></p><p>前幾次的範例有用到的有: el, data, methods, template(宣告componet時）</p><p>可以利用<code>.extent</code>方法來自定義建構子並加入一些預設的options<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyComponent = Vue.extend(&#123;</span><br><span class="line">  <span class="comment">// extension options</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// all instances of `MyComponent` are created with</span></span><br><span class="line"><span class="comment">// the pre-defined extension options</span></span><br><span class="line"><span class="keyword">var</span> myComponentInstance = <span class="keyword">new</span> MyComponent()</span><br></pre></td></tr></table></figure><br>但vue建議以自定義元件的方式來做這件事，並在template裡面直接使用自定義元件，過幾天會來討論vue的component系統，到時候會有詳細的解說</p><h1 id="Vue物件的屬性與方法"><a href="#Vue物件的屬性與方法" class="headerlink" title="Vue物件的屬性與方法"></a>Vue物件的屬性與方法</h1><p>vue物件會將data裡面的屬性proxy到vue物件本身<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line">vm.a === data.a <span class="comment">// -&gt; true</span></span><br><span class="line"><span class="comment">// setting the property also affects original data</span></span><br><span class="line">vm.a = <span class="number">2</span></span><br><span class="line">data.a <span class="comment">// -&gt; 2</span></span><br><span class="line"><span class="comment">// ... and vice-versa</span></span><br><span class="line">data.a = <span class="number">3</span></span><br><span class="line">vm.a <span class="comment">// -&gt; 3</span></span><br></pre></td></tr></table></figure></p><blockquote><p>註: javascript中===和==的差別在於三個等於會檢查兩者是否為同樣的類型，最常舉的例子就是，<code>1==&#39;1&#39;</code>: true，<code>1===&#39;1&#39;</code>: false</p></blockquote><p>除了data之外，vue也expose了一些方便的屬性跟方法，為了和被proxy的data屬性區隔，這些其他的屬性跟方法前面會加上$來區隔</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span>,</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line">vm.$data === data <span class="comment">// -&gt; true</span></span><br><span class="line">vm.$el === <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>) <span class="comment">// -&gt; true</span></span><br><span class="line"><span class="comment">// $watch is an instance method</span></span><br><span class="line">vm.$watch(<span class="string">'a'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// this callback will be called when `vm.a` changes</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>Vue在這節特別提到不要使用<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">arrow functions</a>作為vue物件方法的傳入參數或callback，詳細原因可以參考<a href="https://vuejs.org/v2/guide/instance.html" target="_blank" rel="noopener">原文</a></p></blockquote><h1 id="生命週期"><a href="#生命週期" class="headerlink" title="生命週期"></a>生命週期</h1><p>下圖展示了一個vue物件的生命週期<br><img src="https://vuejs.org/images/lifecycle.png" alt=""><br>大致先看過就行了，不必全部都理解，要注意的地方只有用紅線拉出來的框框，這些表示各個生命週期的state，我們可以在option中為這些state加上callback<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// `this` points to the vm instance</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a is: '</span> + <span class="keyword">this</span>.a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// -&gt; "a is: 1"</span></span><br></pre></td></tr></table></figure></p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>今天簡介了vue物件、他的建構子、屬性方法，最後介紹了vue物件的生命週期</p><p>下週將介紹vue的模板系統</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10185036&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;vue的基本介紹與語法前三天已經介紹完了，基本過程是先載入vue.js，然後在html裡面寫templete，在js裡面宣告vue物件綁定至dom並寫入data，或是要使用自定義的dom元件的話要先在js裡面宣告元件。&lt;/p&gt;
&lt;p&gt;第四天開始將深入了解前三天所提到的語法結構與各屬性的意義。&lt;/p&gt;
&lt;h1 id=&quot;Vue物件&quot;&gt;&lt;a href=&quot;#Vue物件&quot; class=&quot;headerlink&quot; title=&quot;Vue物件&quot;&gt;&lt;/a&gt;Vue物件&lt;/h1&gt;&lt;p&gt;本節的原文是Vue Instance，第一次見到Instance這個單字，拿去google翻譯是翻實例，不過詳細查了一下它有物件的意思，但又跟Object有些為差距，有興趣的人可以研究看看，在這邊先不討論。&lt;/p&gt;
&lt;p&gt;Vue物件本身可視為&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MVVM&lt;/a&gt;架構中的ViewModel（雖然vue本身並非完全遵照MVVM架構設計），所以有時候會以&lt;code&gt;vm&lt;/code&gt;作為變數名稱指向vue物件。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="https://blog.danielchen.cc/categories/web/"/>
    
    
      <category term="web" scheme="https://blog.danielchen.cc/tags/web/"/>
    
      <category term="frontend" scheme="https://blog.danielchen.cc/tags/frontend/"/>
    
      <category term="vue.js" scheme="https://blog.danielchen.cc/tags/vue-js/"/>
    
  </entry>
  
</feed>
