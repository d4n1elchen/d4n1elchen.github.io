<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress.com" created="2017-10-02 10:52"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Daniel Chen</title>
	<link>https://team6612.wordpress.com</link>
	<description>Life is a big joke.</description>
	<pubDate>Mon, 02 Oct 2017 10:52:21 +0000</pubDate>
	<language></language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>https://team6612.wordpress.com</wp:base_blog_url>

	<wp:author><wp:author_id>98075262</wp:author_id><wp:author_login><![CDATA[team6612]]></wp:author_login><wp:author_email><![CDATA[team6612@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[Daniel Chen]]></wp:author_display_name><wp:author_first_name><![CDATA[Daniel]]></wp:author_first_name><wp:author_last_name><![CDATA[Chen]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>202144</wp:term_id><wp:category_nicename>acm</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ACM]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>228672</wp:term_id><wp:category_nicename>%e7%b6%b2%e9%a0%81</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[網頁]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>1211379</wp:term_id><wp:category_nicename>node</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Node]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>832</wp:term_id><wp:category_nicename>python</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[python]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>538161250</wp:term_id><wp:category_nicename>%e5%85%b6%e4%bb%96%e5%b0%88%e6%a1%88</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[其他專案]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>29107793</wp:term_id><wp:category_nicename>%e5%89%8d%e7%ab%af</wp:category_nicename><wp:category_parent>%e7%b6%b2%e9%a0%81</wp:category_parent><wp:cat_name><![CDATA[前端]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>9263387</wp:term_id><wp:category_nicename>%e5%be%8c%e7%ab%af</wp:category_nicename><wp:category_parent>%e7%b6%b2%e9%a0%81</wp:category_parent><wp:cat_name><![CDATA[後端]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>2111666</wp:term_id><wp:category_nicename>%e6%88%90%e5%a4%a7</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[成大]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>1982</wp:term_id><wp:category_nicename>%e6%9c%aa%e5%88%86%e9%a1%9e</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[未分類]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>15741</wp:term_id><wp:category_nicename>%e4%bd%9c%e5%93%81</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[作品]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>537110319</wp:term_id><wp:category_nicename>%e8%aa%b2%e7%a8%8b%e6%9f%a5%e8%a9%a2%e7%be%8e%e5%8c%96</wp:category_nicename><wp:category_parent>%e4%bd%9c%e5%93%81</wp:category_parent><wp:cat_name><![CDATA[課程查詢美化]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>555827969</wp:term_id><wp:category_nicename>%e6%88%90%e5%a4%a7%e8%aa%b2%e7%a8%8b%e7%88%ac%e8%9f%b2</wp:category_nicename><wp:category_parent>%e4%bd%9c%e5%93%81</wp:category_parent><wp:cat_name><![CDATA[成大課程爬蟲]]></wp:cat_name>
</wp:category>
	<wp:tag><wp:term_id>5019</wp:term_id><wp:tag_slug>course</wp:tag_slug><wp:tag_name><![CDATA[course]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>242070</wp:term_id><wp:tag_slug>crawler</wp:tag_slug><wp:tag_name><![CDATA[crawler]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>169</wp:term_id><wp:tag_slug>css</wp:tag_slug><wp:tag_name><![CDATA[CSS]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>101486936</wp:term_id><wp:tag_slug>%e7%88%ac%e8%9f%b2</wp:tag_slug><wp:tag_name><![CDATA[爬蟲]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>228672</wp:term_id><wp:tag_slug>%e7%b6%b2%e9%a0%81</wp:tag_slug><wp:tag_name><![CDATA[網頁]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>87946</wp:term_id><wp:tag_slug>express</wp:tag_slug><wp:tag_name><![CDATA[Express]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>3036060</wp:term_id><wp:tag_slug>%e9%81%b8%e8%aa%b2</wp:tag_slug><wp:tag_name><![CDATA[選課]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>29773</wp:term_id><wp:tag_slug>%e8%aa%b2%e7%a8%8b</wp:tag_slug><wp:tag_name><![CDATA[課程]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>316619</wp:term_id><wp:tag_slug>flux</wp:tag_slug><wp:tag_name><![CDATA[Flux]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>427439640</wp:term_id><wp:tag_slug>hahow</wp:tag_slug><wp:tag_name><![CDATA[hahow]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2121118</wp:term_id><wp:tag_slug>iot</wp:tag_slug><wp:tag_name><![CDATA[IoT]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1282028</wp:term_id><wp:tag_slug>modbus</wp:tag_slug><wp:tag_name><![CDATA[modbus]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>25870</wp:term_id><wp:tag_slug>ncku</wp:tag_slug><wp:tag_name><![CDATA[ncku]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1211379</wp:term_id><wp:tag_slug>node</wp:tag_slug><wp:tag_name><![CDATA[Node]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>96530</wp:term_id><wp:tag_slug>react</wp:tag_slug><wp:tag_name><![CDATA[React]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>29107793</wp:term_id><wp:tag_slug>%e5%89%8d%e7%ab%af</wp:tag_slug><wp:tag_name><![CDATA[前端]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>536778135</wp:term_id><wp:tag_slug>%e5%8b%95%e7%95%ab%e4%ba%92%e5%8b%95%e7%b6%b2%e9%a0%81%e7%a8%8b%e5%bc%8f%e5%85%a5%e9%96%80</wp:tag_slug><wp:tag_name><![CDATA[動畫互動網頁程式入門]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>118274271</wp:term_id><wp:tag_slug>%e5%b7%a5%e5%85%b7%e6%a9%9f</wp:tag_slug><wp:tag_name><![CDATA[工具機]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>9263387</wp:term_id><wp:tag_slug>%e5%be%8c%e7%ab%af</wp:tag_slug><wp:tag_name><![CDATA[後端]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2111666</wp:term_id><wp:tag_slug>%e6%88%90%e5%a4%a7</wp:tag_slug><wp:tag_name><![CDATA[成大]]></wp:tag_name>
</wp:tag>

	<generator>http://wordpress.com/</generator>
<image>
		<url>http://s2.wp.com/i/buttonw-com.png</url>
		<title>Daniel Chen</title>
		<link>https://team6612.wordpress.com</link>
	</image>
		
	<item>
		<title>About</title>
		<link>https://team6612.wordpress.com/%e9%97%9c%e6%96%bc/</link>
		<pubDate>Mon, 30 Nov 2015 14:25:49 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">http://team6612.wordpress.com/?page_id=1</guid>
		<description></description>
		<content:encoded><![CDATA[成大不務正業大肆機械系學生，分享一些做專案的記錄跟心得。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date>2015-11-30 14:25:49</wp:post_date>
		<wp:post_date_gmt>2015-11-30 14:25:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%97%9c%e6%96%bc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>%e6%93%b7%e5%8f%96</title>
		<link>https://team6612.wordpress.com/%e6%93%b7%e5%8f%96/</link>
		<pubDate>Thu, 08 Sep 2016 15:09:53 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">http://team6612.files.wordpress.com/2016/09/e693b7e58f96.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2016-09-08 23:09:53</wp:post_date>
		<wp:post_date_gmt>2016-09-08 15:09:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>%e6%93%b7%e5%8f%96</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://team6612.files.wordpress.com/2016/09/e693b7e58f96.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/c54/103432846/files/2016/09/e693b7e58f96.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:946;s:6:"height";i:489;s:4:"file";s:89:"/home/wpcom/public_html/wp-content/blogs.dir/c54/103432846/files/2016/09/e693b7e58f96.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:33047;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Re: 從零開始的網頁設計之路</title>
		<link>https://team6612.wordpress.com/2016/09/09/re0web/</link>
		<pubDate>Thu, 08 Sep 2016 16:59:41 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=3</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://codepen.io/team6612/pen/ALjJZj" target="_blank">Re: 從零開始的網頁設計之路</a>

暑假前在hahow上買了這堂課 <a href="https://hahow.in/courses/56189df9df7b3d0b005c6639" target="_blank">動畫互動網頁程式入門</a> ，會知道這個是因為五月底的時候去了複雜生活節，聽了這位大大的講題，活動也有hahow的演講，那次真的認識不少新東西，也見識到同年齡層的等級差距Orz<!--more-->

總之這個月開始課程陸續上傳上來了，我覺得他們這樣一次上傳多堂課的做法還蠻棒的，不然之前看公開課最後都是隔一個禮拜不是忘了就是懶得看，而且每個影片的長度都不長，累了可以很好抓段落休息。

蠻推這位講者的，前面觀念敘述很清楚，而且他有設計的底子，在解釋一些排版上的觀念的時候比較有整體式的思考，不會像一般的網頁教學都亂排，只教你怎麼打語法。

這是我昨天做的第一份作業（其實不算作業啦，課程有分Project跟Homework，Project比較像範例，Homework是要上繳到系統上的），是用純CSS寫的名片，很廚的用了Re:0的配色www

以下記錄幾個重點
<pre>*
//border: solid 1px black
font-family: 微軟正黑體
font-weight: 100
letter-spacing: 1px
position: relative
</pre>
他交了一招我覺得蠻實用的，<code>*</code>這個selector以前從來沒用過，他是選擇所有元素的意思，在這個選擇器下設定border可以為每個元素加框線，以確定各元素的位置以及實際的大小，排版時先加上框線，將每個元素定位到想要的位置之後再開始寫樣式，可以節省很多調整的麻煩

這邊學到兩個新的屬性: <code>letter-spacing</code>、<code>font-weight</code>，前者用來調整字距，把字距調大可以讓視覺比較放鬆一點，之後若是有需要大字距的設計時可以用；後者是調整字級，數字課堂上是說100~900，但不太確定為何是這個數字，要在調查看看

另外這邊設定<code>position: relative</code>的原因待會一起講
<pre>a 
 color: inherit
 text-decoration: none</pre>
這段也是重設的語法，連結的預設樣是大家都知道，就藍底還有白線，超醜，<code>color: inherit</code>是把顏色設定成和上級一樣，<code>text-decoration: none</code>是把底線拿掉
<pre>html,body 
  box-sizing: border-box
  width: 100%
  height: 100%
  padding: 0px
  margin: 0px

body
  background-color: #F9F7F7
  border-top: solid 50px #F7B3CC
  border-bottom: solid 50px #8DD3F5</pre>
<code>box-sizing</code>這邊的用途是讓border成為元素空間的一部分，而不是凸出元素之外造成額外的空間

然後這邊又是css一個很怪的預設，預設的html（還是body忘了）會跟最外層的邊框有預設的margin，如果要做完全滿版的頁面的話要把margin設0不然會有白邊
<pre>.vertical-center
 height: 100%
 display: flex
 align-items: center
 justify-content: center</pre>
這是垂直置中的語法，用的是flexbox，詳情可以參考<a href="http://zh-tw.learnlayout.com/flexbox.html" target="_blank">這裡</a>
<pre>.namecard
 background-color: #45464B
 color: white 
 width: 400px
 height: 250px 
 border-radius: 6px 
 margin: auto
 padding: 10px 20px 
 box-shadow: 10px 10px 10px rgba(0,0,0,0.15) 
 overflow: hidden</pre>
這是主要中間那張卡片的樣式，以前不太用<code>border-radius</code>，不過這次用完發現圓角框蠻有質感的，以後可以嘗試多用

<code>margin: auto</code>的作用是讓元素水平置中

<code>box-shadow</code>雖然這邊沒寫到但是課程有講到，他有第四個位置參數，是設定內縮或外放，可以用來設計<code>material desin</code>那種卡片漂浮的感覺，用法像這樣

<code>box-shadow: 0px 8px 10px -5px rgba(0,0,0,0.15)</code>
<div style="margin:20px;">
<div style="background-color:white;border:solid 1px #DDD;text-align:center;width:150px;box-shadow:0 8px 10px -5px rgba(0,0,0,0.15);">這是一張卡片</div></div>
先把陰影內縮之後往下調整，這樣就會有向上漂浮的感覺

最後的<code>overflow: hidden</code>是為了把那兩個裝飾的小方塊超出元素範圍的部分隱藏，以前從來沒有想過要這樣做，包含用div去畫圖，之前總是覺得在網頁上畫圖一定要用svg，svg的語法又很麻煩很懶得用，但沒想到用div加上<code>background-color</code>、<code>border</code>、<code>transform</code>等屬性就組合出很多種形狀了，也算是大開眼界，感覺功力大增
<h2>Position &amp; Display</h2>
然後來講一下這次看前22堂課最大的收穫吧，終於搞懂position和display的用法，display之前除了none知道是元素會完全消失之外其他完全沒概念wwww，然後position的話是有時候不管怎麼調都不在想要的位置上，很困擾QQ
<h3>Display</h3>
<a href="http://www.w3schools.com/cssref/pr_class_display.asp" target="_blank">CSS display property</a>，這是W3 school關於display這個屬性的頁面，剛剛才發現除了好不容易搞懂的block/inline/inline-block之外還有一大票東西www淦wwwww，總之先記錄這三個

<code>block</code>是div元素的預設值，html的概念是元素會一個區塊一個區塊向下排列，所以不同的<code>block</code>會各自佔有完整的一行，因此設定<code>block</code>的元素會自動往下跳一行，即便他是某段文字的子元素，像這樣
<div style="margin:20px;">同一行文字
<div>這邊卻斷行了</div>
太過分啦！</div>
如果設定成inline或inline-block的話就可以讓他們在同一行

<code>inline</code>跟<code>inline-block</code>的差別在於<code>inline</code>的話會將元素視為該上級元素的一部分，因此無法調整其左右的內外距（但位置可），只能調整上下的（我也不懂為什麼要這樣設定），<code>inline-block</code>的話會變成包覆內容的一個區塊，就沒有這樣的限制了，因此若有區塊需要符合內文大小也可以設定成<code>inline-block</code>
<h3>Position</h3>
position就有趣了，不過這觀念我剛好前幾天在寫聊天室的時候有釐清過了，我是看<a href="http://zh-tw.learnlayout.com/position.html" target="_blank">這邊</a>學到的

position基本上有4種值，<code>static/relative/absolute/fixed</code>，意思是設定當你使用<code>top/bottom/left/right</code>來調整位置時的參考，分別是<code>不變/相對/絕對/固定</code>

<code>static</code>跟<code>relative</code>和<code>fixed</code>比較沒問題

<code>static</code>意思是這個元素完全不會動，無法透過<code>top/bottom/left/right</code>來調整位置

<code>relative</code>的話是相對於元素當下的位置來調整

<code>fixed</code>是相對於整個瀏覽視窗並將其固定在畫面上不隨卷軸捲動

問題出在<code>absolute</code>，<code>absolute</code>顧名思義是絕對定位，但絕對是絕什麼對呢？<code>absolute</code>是相對於該元素的上級元素做定位，但前提是上級元素是可被定位的（也就是<code>position</code>屬性值非<code>static</code>），如果上級元素是不可被定位的（也就是<code>position</code>是<code>static</code>）的話元素會相對於body來定位，但和<code>fixed</code>的差別是他會隨卷軸捲動，媽的超奇葩設定，完全不知道用意為何wwwww

這就是為什麼最一開始要把所有元素都設定成<code>relative</code>的原因，若是碰到需要用到<code>absolute</code>定位的情況才不用在那邊看上級元素是否可被定位，全部設定成<code>relative</code>不會有任何改變，因為預設的<code>top/bottom/left/right</code>都是0，這招蠻方便的，因為設定成absolute要相對body定位的狀況比較少

嘛，大概就這樣，另外提一個可能大家沒注意到的地方，背景那個Re:我刻意調得跟Re:0官方的Logo很像，調蠻久的但是好像不太明顯wwwwww，讓他在這邊再現！！
<div style="margin-bottom:40px;">
<div style="line-height:normal;font-weight:100;font-size:150px;color:rgba(0,0,0,0.15);font-family:serif;text-shadow:0 0 15px rgba(0,0,0,0.1);height:130px;overflow:hidden;letter-spacing:-15px;">Re<span style="position:relative;font-size:100px;color:rgba(0,0,0,0.5);bottom:10px;left:5px;">:</span></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[hahow網頁課的作業]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date>2016-09-09 00:59:41</wp:post_date>
		<wp:post_date_gmt>2016-09-08 16:59:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>re0web</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="%e7%b6%b2%e9%a0%81"><![CDATA[網頁]]></category>
		<category domain="post_tag" nicename="hahow"><![CDATA[hahow]]></category>
		<category domain="post_tag" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="post_tag" nicename="%e5%8b%95%e7%95%ab%e4%ba%92%e5%8b%95%e7%b6%b2%e9%a0%81%e7%a8%8b%e5%bc%8f%e5%85%a5%e9%96%80"><![CDATA[動畫互動網頁程式入門]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[26622003060]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[re-%e5%be%9e%e9%9b%b6%e9%96%8b%e5%a7%8b%e7%9a%84%e7%b6%b2%e9%a0%81%e8%a8%ad%e8%a8%88%e4%b9%8b%e8%b7%af]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>挖個坑</title>
		<link>https://team6612.wordpress.com/2016/09/09/%e6%8c%96%e5%80%8b%e5%9d%91/</link>
		<pubDate>Fri, 09 Sep 2016 04:27:30 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=253</guid>
		<description></description>
		<content:encoded><![CDATA[嗯...看首圖就知道了，我他媽快受不了課程查詢網了啦！！剛在研究到底為什麼會系所點進去沒辦法上一頁返回，結果看到這種東西...p就給我乖乖地放在外面幹嘛放在ul裡面啦wwww，要放也給我好好包個li吧wwwwwww，p還有裡面只有span是怎樣啦www如果整段文字都要改就直接改p的樣式就好了嘛wwwww

<!--more-->

還有其他槽點就不提了wwww

沒辦法用上一頁返回的原因就是他用ajax載入，然後頁面上又沒有明顯的返回鍵，但問題是他ajax是載入整個頁面，那還不如用ifame好多了

雖然說現在主流大多用ajax來動態載入內容，但這邊是根本就不需要動態載入的情況，所以我打算開學前來刻一個有良好UI設計的課程查詢頁面www

雖然選課時間已經過了而且我只剩下一次選課。

今天下午就開工吧]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>253</wp:post_id>
		<wp:post_date>2016-09-09 12:27:30</wp:post_date>
		<wp:post_date_gmt>2016-09-09 04:27:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%8c%96%e5%80%8b%e5%9d%91</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e7%b6%b2%e9%a0%81"><![CDATA[網頁]]></category>
		<category domain="post_tag" nicename="%e9%81%b8%e8%aa%b2"><![CDATA[選課]]></category>
		<category domain="post_tag" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="category" nicename="%e6%88%90%e5%a4%a7"><![CDATA[成大]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[255]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[26638902966]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>%e6%93%b7%e5%8f%96</title>
		<link>https://team6612.wordpress.com/2016/09/09/%e6%8c%96%e5%80%8b%e5%9d%91/%e6%93%b7%e5%8f%96-2/</link>
		<pubDate>Fri, 09 Sep 2016 04:12:00 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">http://team6612.files.wordpress.com/2016/09/e693b7e58f961.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>255</wp:post_id>
		<wp:post_date>2016-09-09 12:12:00</wp:post_date>
		<wp:post_date_gmt>2016-09-09 04:12:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>%e6%93%b7%e5%8f%96-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>253</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://team6612.files.wordpress.com/2016/09/e693b7e58f961.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/c54/103432846/files/2016/09/e693b7e58f961.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1360;s:6:"height";i:728;s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/c54/103432846/files/2016/09/e693b7e58f961.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:198238;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Extension</title>
		<link>https://team6612.wordpress.com/2016/09/10/google-extension/</link>
		<pubDate>Sat, 10 Sep 2016 05:56:43 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=278</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://developer.chrome.com/extensions/overview" target="_blank">Google Extension</a>

昨天晚上本來想開始寫美化課程查詢的頁面，但發現如果用ajax來載入課程查詢頁面的話會我cross domain的問題，這通常要兩邊的頁面同時設定才有辦法解決，後來又想用書籤列js程式的方式來寫，但覺得這樣好像不夠直觀，而且沒辦法解決無法用上一頁返回的問題，最後想到Google Extension這東西，但中文資源找一下不是很舊就是寫很少，只能來看Google的官方教學文件了，又是一段長期抗戰(?)，本來以為一個下午就可以解決了的東西www，嘛不過也好多學會一項技能。

另外剛剛打字的過程中想到可以增加記錄課程的功能，就是看到想選的課可以先存起來，方便查詢這樣。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>278</wp:post_id>
		<wp:post_date>2016-09-10 13:56:43</wp:post_date>
		<wp:post_date_gmt>2016-09-10 05:56:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-extension</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%b6%b2%e9%a0%81"><![CDATA[網頁]]></category>
		<category domain="category" nicename="%e8%aa%b2%e7%a8%8b%e6%9f%a5%e8%a9%a2%e7%be%8e%e5%8c%96"><![CDATA[課程查詢美化]]></category>
		<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="category" nicename="%e6%88%90%e5%a4%a7"><![CDATA[成大]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<category domain="category" nicename="%e4%bd%9c%e5%93%81"><![CDATA[作品]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[98075262]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[26674542561]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>不愧是政府機關開發出來的東西（</title>
		<link>https://team6612.wordpress.com/2016/09/10/%e4%b8%8d%e6%84%a7%e6%98%af%e6%94%bf%e5%ba%9c%e6%a9%9f%e9%97%9c%e9%96%8b%e7%99%bc%e5%87%ba%e4%be%86%e7%9a%84%e6%9d%b1%e8%a5%bf%ef%bc%88/</link>
		<pubDate>Sat, 10 Sep 2016 15:45:04 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=283</guid>
		<description></description>
		<content:encoded><![CDATA[花了一陣子總算初步先成功透過Chrome Extension把自訂的JS跟CSS導入頁面中，開始著手修改課程查詢頁面的樣式，研究了一下頁面的結構發現這真的不是一般人能夠寫得出來的東西wwww

一些小細節就不提了，但這個我覺得真的太震撼了www

<img class="alignnone size-full wp-image-284" src="https://team6612.files.wordpress.com/2016/09/e693b7e58f962.png" alt="%e6%93%b7%e5%8f%96" width="1366" height="736" />
<h2>用Click Event做的超連結這輩子還是第一次看到wwwwww</h2>
<del>看來之後的路還很長</del>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>283</wp:post_id>
		<wp:post_date>2016-09-10 23:45:04</wp:post_date>
		<wp:post_date_gmt>2016-09-10 15:45:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%b8%8d%e6%84%a7%e6%98%af%e6%94%bf%e5%ba%9c%e6%a9%9f%e9%97%9c%e9%96%8b%e7%99%bc%e5%87%ba%e4%be%86%e7%9a%84%e6%9d%b1%e8%a5%bf%ef%bc%88</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="%e7%b6%b2%e9%a0%81"><![CDATA[網頁]]></category>
		<category domain="post_tag" nicename="%e9%81%b8%e8%aa%b2"><![CDATA[選課]]></category>
		<category domain="category" nicename="%e8%aa%b2%e7%a8%8b%e6%9f%a5%e8%a9%a2%e7%be%8e%e5%8c%96"><![CDATA[課程查詢美化]]></category>
		<category domain="post_tag" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="category" nicename="%e6%88%90%e5%a4%a7"><![CDATA[成大]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<category domain="category" nicename="%e4%bd%9c%e5%93%81"><![CDATA[作品]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[284]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[26686831993]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>%e6%93%b7%e5%8f%96</title>
		<link>https://team6612.wordpress.com/2016/09/10/%e4%b8%8d%e6%84%a7%e6%98%af%e6%94%bf%e5%ba%9c%e6%a9%9f%e9%97%9c%e9%96%8b%e7%99%bc%e5%87%ba%e4%be%86%e7%9a%84%e6%9d%b1%e8%a5%bf%ef%bc%88/%e6%93%b7%e5%8f%96-3/</link>
		<pubDate>Sat, 10 Sep 2016 15:41:38 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">http://team6612.files.wordpress.com/2016/09/e693b7e58f962.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date>2016-09-10 23:41:38</wp:post_date>
		<wp:post_date_gmt>2016-09-10 15:41:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>%e6%93%b7%e5%8f%96-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>283</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://team6612.files.wordpress.com/2016/09/e693b7e58f962.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/c54/103432846/files/2016/09/e693b7e58f962.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1366;s:6:"height";i:736;s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/c54/103432846/files/2016/09/e693b7e58f962.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:188597;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>燒毀！</title>
		<link>https://team6612.wordpress.com/2016/09/12/%e7%87%92%e6%af%80%ef%bc%81/</link>
		<pubDate>Mon, 12 Sep 2016 04:37:31 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=294</guid>
		<description></description>
		<content:encoded><![CDATA[太多東西太難改了，一氣之下乾脆把所有東西全部砍掉重練wwww

打算把需要的資訊擷取出來之後把頁面清空用js來動態新增element，也許可以試試看用react來做javascript html rendering]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>294</wp:post_id>
		<wp:post_date>2016-09-12 12:37:31</wp:post_date>
		<wp:post_date_gmt>2016-09-12 04:37:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%87%92%e6%af%80%ef%bc%81</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%b6%b2%e9%a0%81"><![CDATA[網頁]]></category>
		<category domain="category" nicename="%e8%aa%b2%e7%a8%8b%e6%9f%a5%e8%a9%a2%e7%be%8e%e5%8c%96"><![CDATA[課程查詢美化]]></category>
		<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="category" nicename="%e6%88%90%e5%a4%a7"><![CDATA[成大]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<category domain="category" nicename="%e4%bd%9c%e5%93%81"><![CDATA[作品]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[296]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[26733647339]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>%e6%93%b7%e5%8f%96</title>
		<link>https://team6612.wordpress.com/2016/09/12/%e7%87%92%e6%af%80%ef%bc%81/%e6%93%b7%e5%8f%96-4/</link>
		<pubDate>Mon, 12 Sep 2016 04:34:51 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">http://team6612.files.wordpress.com/2016/09/e693b7e58f963.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>296</wp:post_id>
		<wp:post_date>2016-09-12 12:34:51</wp:post_date>
		<wp:post_date_gmt>2016-09-12 04:34:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>%e6%93%b7%e5%8f%96-4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>294</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://team6612.files.wordpress.com/2016/09/e693b7e58f963.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/c54/103432846/files/2016/09/e693b7e58f963.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1366;s:6:"height";i:736;s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/c54/103432846/files/2016/09/e693b7e58f963.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:137702;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>React + Flux + Express</title>
		<link>https://team6612.wordpress.com/2016/09/13/react-flux-express/</link>
		<pubDate>Mon, 12 Sep 2016 17:07:42 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=305</guid>
		<description></description>
		<content:encoded><![CDATA[嘛本來以為很簡單的東西被我搞得越來越複雜了阿wwwwwwwww

因為後來決定還是從後端爬資料下來寫新的網頁顯示，所以想說來用用看React

在查資料過程中看到這篇 <a href="http://www.kancloud.cn/kancloud/create-voting-app" target="_blank">使用React、Node.js、MongoDB、Socket.IO开发一个角色投票应用</a>

<!--more-->

簡單略過前幾張覺得寫得蠻清楚的就照著做了，但沒想到React以前以為是可以簡化動態生成html的框架，但寫一寫發現還是頗複雜啊www

但我想只有React本身應該還算是簡單的，是加入React-route跟Flux之後便得複雜了

簡單做一些筆記
<h2>ReactJS</h2>
ReactJS是14年發表的一套新框架，但相對於其他MVC框架而言，React專注在View上，將html物件模組化，使得動態生成新的前端物件更具有邏輯性

我大概抓幾個寫到目前為止已經理解的關鍵字，等之後比較有經驗了之後再來寫完整的筆記

React的元件稱為Component，每個Component都是一個Class(ES6才有Class的概念，ES5的話Class是用一個JS Object去實做，但其實概念一樣，文首的教學中有提到差異，可以去看看)

每個Component在生成之後有各自的生命週期，生命週期詳細可以參考<a href="http://andyyou.logdown.com/posts/370308" target="_blank">這篇</a>，這個專案到目前為止用到了以下狀態(依照執行順序)
<ol>
	<li>初始化
<ul>
	<li><strong>componentDidMount()</strong>
註冊該元件Store的callback(將onChange丟給store)
啟動初始化Action</li>
	<li><strong>render()</strong>
顯示該元件的HTML內容</li>
</ul>
</li>
	<li>state 發生改變時(由Store進行改變)
<ul>
	<li><strong>render()</strong>
更新內容</li>
</ul>
</li>
	<li>元件 unmount 卸載時
<ul>
	<li><strong>componentWillUnmount()</strong>
註銷Store的callback</li>
</ul>
</li>
</ol>
Action跟Store是Flux的東西，待會再解釋

此外component的初始化還有他的constructor，內容是將component的state和flux的state綁在一起，state可以理解成儲存在這個component裡面的data，例如說假設有一個使用者列表的元件，那麼state裡面可能就存有使用者的List，在render中存取state來取得內容，React在偵測到component的state改變時就會更新頁面，Flux架構中每個store也有自己的state，store透過state來修改component的內容，所以要將兩者綁在一起(還不懂Flux的概念可能看不太懂我在講啥，可以等了解之後再回來看這段)

constructor中還指定onChange函數(store用來更新state的callback，雖然沒看到有任何的文件提到Callback但這邊我以Callback理解好像解釋得通，求指正，詳細的作用會在Flux的地方解釋)

在Render部分React提供語法糖(Syntax sugar) - JSX，讓開發者可以用類似HTML的形式來寫React元件，語法糖的意思是在一些程式語言裡面，在特殊的狀況下會提供較簡單易懂或容易開發的語法讓開發者比較好寫出容易閱讀的程式，但該語法在編譯時仍會被轉譯成以基本語法編寫的片段。如下列兩段React的Code是等價的，JSX最後都會被轉換成JS的樣子。

JSX
<pre>render() {
 return (
   &lt;ul&gt;
     &lt;li&gt;Achura&lt;/li&gt;
     &lt;li&gt;Civire&lt;/li&gt;
     &lt;li&gt;Deteis&lt;/li&gt;
   &lt;/ul&gt;
 );
}</pre>
JS
<pre>render() {
  return React.createElement('ul', null,
    React.createElement('li', null, 'Achura'),
    React.createElement('li', null, 'Civire'),
    React.createElement('li', null, 'Deteis')
  );
}
</pre>
目前還不知道React純前端怎麼讓元件顯示在頁面上

在這個範例中是使用React-route從後端來動態生成的

邏輯大概是這樣，Express收到http request之後丟給React-route處理生成主要的html，然後再丟給swig把這段由React-route生成的html塞進index.html裡面後丟回去給Express並傳送給前端

React-route還沒研究得很透徹，初步的理解是這樣，有錯歡迎指正

首先先由以下Code建立基本結構
<pre>&lt;Route handler={App}&gt;
  &lt;Route path='/' handler={Home} /&gt;
&lt;/Route&gt;
</pre>
其中App和Home都是一個Component，也就是說每個Route都是由一個Component來handle

App內容如下(di=div，用div worpress會顯示不出來)
<pre> &lt;di&gt;
   &lt;Navbar /&gt;
   &lt;RouteHandler /&gt;
 &lt;/di&gt;</pre>
這邊是我不太確定的地方，我猜RouteHandler指的是包在App裡面的Route的Handler，也就是Home，確實最後顯示出來是div包裹著home的內容，但不太理解為什麼要這樣寫

Navbar則是選單列的Component，照這樣的邏輯來看這邊應該是可以直接塞Component進去，我想route的用意應該是不同的path可以用不同的Component來handle，然後Navbar是不管path是什麼都一律顯示
<h2>Flux</h2>
這個之前一直看不懂，但寫一寫發現不難，不過腦筋還是要稍微轉一下才知道什麼東西要放哪

<img class="alignnone size-full wp-image-427" src="https://team6612.files.wordpress.com/2016/09/flux-simple-f8-diagram-1300w.png" alt="flux-simple-f8-diagram-1300w" width="1300" height="286" />

這是最新版的官方的圖解，簡單很多了，第一次看到之前的版本的時候複雜得要命，連讀都不想讀，就不貼出來了

簡單講就是你會在網頁的各個階段、各個地方觸發Action，Action完成一些動作之後會通知Dispatcher，Dispatcher偵測到之後會執行與Action綁定的Store，由Store來改變View

回到上面列出來的Component各階段做的事情
<ol>
	<li>初始化
<ul>
	<li><strong>componentDidMount()</strong>
註冊該元件Store的callback(將onChange丟給store)
啟動初始化Action</li>
	<li><strong>render()</strong>
顯示該元件的HTML內容</li>
</ul>
</li>
	<li>state 發生改變時(由Store進行改變)
<ul>
	<li><strong>render()</strong>
更新內容</li>
</ul>
</li>
	<li>元件 unmount 卸載時
<ul>
	<li><strong>componentWillUnmount()</strong>
註銷Store的callback</li>
</ul>
</li>
</ol>
該元件初始化時會啟動一個Action，Action完成後會透過dispatcher觸發相對映的Store，Store會去改變Store中的state，這時會觸發onChange去更新Component中的state，Component的state發生改變時react會重新render，更新頁面

Action也可以從View中觸發，例如點擊事件，圖會變得像這樣

<img class="alignnone size-full wp-image-454" src="https://team6612.files.wordpress.com/2016/09/flux-simple-f8-diagram-with-client-action-1300w.png" alt="flux-simple-f8-diagram-with-client-action-1300w" width="1300" height="393" />

點擊事件處發後會啟動一個Action，Action完成後會透過dispatcher觸發相對映的Store(下略

Flux讓資料流變成單向的，不會像以前的MVC，若從View去處發Controller，Controller去改變其他的View又會觸發更多的Controller，當網頁規模一大起來會變得錯綜複雜難以管理，有時候連為什麼被觸發都不知道(我是沒遇過這樣的狀況啦...因為沒寫過大網站)
<h2>Express</h2>
Express是node的一套web應用程式架構，他在這個專案裡的角色是負責處理http request，辨認路徑並分配給不同的react-route處理，並且將處理完的網頁再吐回去給瀏覽器，Express很簡單，就一些function call而已，就不多談了，有興趣可以自己去找範例程式來看

以上，在寫筆記的過程同時也釐清了不少觀念，希望我不會寫得太難懂

喔對另外那個教學還介紹了一些開發工具gulp browserify bower nodemon

目前只知道nodemon可以偵測檔案變更並自動重啟程式，相當方便的工具，其他的之後再研究吧]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date>2016-09-13 01:07:42</wp:post_date>
		<wp:post_date_gmt>2016-09-12 17:07:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>react-flux-express</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e7%b6%b2%e9%a0%81"><![CDATA[網頁]]></category>
		<category domain="post_tag" nicename="express"><![CDATA[Express]]></category>
		<category domain="post_tag" nicename="%e9%81%b8%e8%aa%b2"><![CDATA[選課]]></category>
		<category domain="category" nicename="%e8%aa%b2%e7%a8%8b%e6%9f%a5%e8%a9%a2%e7%be%8e%e5%8c%96"><![CDATA[課程查詢美化]]></category>
		<category domain="post_tag" nicename="flux"><![CDATA[Flux]]></category>
		<category domain="post_tag" nicename="node"><![CDATA[Node]]></category>
		<category domain="post_tag" nicename="react"><![CDATA[React]]></category>
		<category domain="post_tag" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="category" nicename="%e5%be%8c%e7%ab%af"><![CDATA[後端]]></category>
		<category domain="category" nicename="%e6%88%90%e5%a4%a7"><![CDATA[成大]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<category domain="category" nicename="%e4%bd%9c%e5%93%81"><![CDATA[作品]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[427]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[26752745511]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>flux-simple-f8-diagram-1300w</title>
		<link>https://team6612.wordpress.com/2016/09/13/react-flux-express/flux-simple-f8-diagram-1300w/</link>
		<pubDate>Mon, 12 Sep 2016 16:44:56 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">http://team6612.files.wordpress.com/2016/09/flux-simple-f8-diagram-1300w.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>427</wp:post_id>
		<wp:post_date>2016-09-13 00:44:56</wp:post_date>
		<wp:post_date_gmt>2016-09-12 16:44:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>flux-simple-f8-diagram-1300w</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>305</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://team6612.files.wordpress.com/2016/09/flux-simple-f8-diagram-1300w.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/c54/103432846/files/2016/09/flux-simple-f8-diagram-1300w.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1300;s:6:"height";i:286;s:4:"file";s:105:"/home/wpcom/public_html/wp-content/blogs.dir/c54/103432846/files/2016/09/flux-simple-f8-diagram-1300w.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:18661;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>flux-simple-f8-diagram-with-client-action-1300w</title>
		<link>https://team6612.wordpress.com/2016/09/13/react-flux-express/flux-simple-f8-diagram-with-client-action-1300w/</link>
		<pubDate>Mon, 12 Sep 2016 17:00:18 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">http://team6612.files.wordpress.com/2016/09/flux-simple-f8-diagram-with-client-action-1300w.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>454</wp:post_id>
		<wp:post_date>2016-09-13 01:00:18</wp:post_date>
		<wp:post_date_gmt>2016-09-12 17:00:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>flux-simple-f8-diagram-with-client-action-1300w</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>305</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://team6612.files.wordpress.com/2016/09/flux-simple-f8-diagram-with-client-action-1300w.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/c54/103432846/files/2016/09/flux-simple-f8-diagram-with-client-action-1300w.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1300;s:6:"height";i:393;s:4:"file";s:124:"/home/wpcom/public_html/wp-content/blogs.dir/c54/103432846/files/2016/09/flux-simple-f8-diagram-with-client-action-1300w.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:23399;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Modbus (1) 資料結構</title>
		<link>https://team6612.wordpress.com/2016/09/16/modbus-1-%e8%b3%87%e6%96%99%e7%b5%90%e6%a7%8b/</link>
		<pubDate>Fri, 16 Sep 2016 12:12:28 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=483</guid>
		<description></description>
		<content:encoded><![CDATA[因為專題接觸到這東西，他是一種串行通訊協定，在工業電子上應用廣泛

Modbus允許多個 (大約240個) 裝置連線在同一個網路上進行通訊

其他詳細介紹參見<a href="https://zh.wikipedia.org/wiki/Modbus" target="_blank">維基百科</a>

<!--more-->

這篇記錄Modbus的通訊規格

大部分內容來自這篇<a href="http://www.modbus.org/docs/Modbus_over_serial_line_V1_02.pdf" target="_blank">官方文件</a>
<h1>Overview</h1>
Modbus的指令由Function code和Data組成PDU(Protocol Data Unit)，再加上Address field和Error check成為Modbus serial line PDU，結構如下
<pre>|========================Serial line=========================|
|--Address field--|--Function code--|--Data--|--Error check--|
                  |============PDU===========|</pre>
<h2>PDU</h2>
Function code: 1byte的指令碼，有效值為1~255，128~255為保留區，為錯誤回應碼

Data: 指令所攜帶的資料內容

Modbus共定義三種PDU結構，分別為
<ul>
	<li>MODBUS Request PDU, mb_req_pdu
<pre>mb_req_pdu = {function_code, request_data}
    function_code = [1 byte] MODBUS function code,
    request_data = [n bytes] 依據function code給予所需的data</pre>
</li>
	<li>MODBUS Response PDU, mb_rsp_pdu
<pre>mb_rsp_pdu = {function_code, response_data}
  function_code = [1 byte] MODBUS function code
  response_data = [n bytes] 依據function code返回相應的資料</pre>
</li>
	<li>MODBUS Exception Response PDU, mb_excep_rsp_pdu
<pre>mb_excep_rsp_pdu = {exception-function_code, request_data}
  exception-function_code = [1 byte] MODBUS function code + 0x80 
  exception_code = [1 byte] MODBUS Exception Code</pre>
</li>
</ul>
Modbus為big-endian系統，意即當資料長度大於傳輸的最大長度時，從MSB(Most Significant Bit)開始傳，即若有一預傳送之資料<code>0x12345678</code>則傳送順序為<code>0x12 0x34 0x56 0x78</code>(若為little-endian的話會變成<code>0x78 0x56 0x34 0x12</code>)
<h2>Serial Line</h2>
Address field: 長度1byte的數值，定義此段指令的傳送對象
- 0               Broadcast address
- 1~247      Slave individual addresses
- 248~255 Reserved

Error check: 使用Redundancy Checking(冗餘校驗)，依據使用的傳輸規格(RTU、ASCII)不同分別使用CRC(<a href="https://zh.wikipedia.org/wiki/%E5%BE%AA%E7%92%B0%E5%86%97%E9%A4%98%E6%A0%A1%E9%A9%97" target="_blank">循環冗餘校驗</a>)和LRC(<a href="https://zh.wikipedia.org/wiki/%E7%BA%B5%E5%90%91%E5%86%97%E4%BD%99%E6%A0%A1%E9%AA%8C" target="_blank">縱向冗餘校驗</a>)
<h1>Function Code</h1>
Function Code可分為由Modbus官方認證指定的Public function code跟硬體廠商自行定義的User define function code

下表為Public function code定義表

<img class="alignnone size-full wp-image-548" src="https://team6612.files.wordpress.com/2016/09/e693b7e58f964.png" alt="擷取.PNG" width="690" height="497" />

紅框為此次專題用到的指令，讀取暫存器資料用的，其他的也不知道做什麼用就不介紹了
<h2>0x03 Read Holding Register</h2>
此指令的PDU結構如下
<h3>Request</h3>
Function code(1byte): 0x03
Starting Address(2byte): 0x0000 ~ 0xFFFF
Quantity of Register(2byte): 1 ~ 125 (N)

指定起始地址跟要讀取的暫存器數量
<h3>Response</h3>
Function code(1byte): 0x03
Byte count(1byte): 2*N
Register value(2byte*N): data value
(N=Quantity of Register)

回應從指定的開始位址開始後N個位址的值
<h3>Error</h3>
Error code(1byte): 0x03 + 0x80 = 0x83
Exception code(1byte): 01/02/03/04

回應錯誤碼
01 ILLEGAL FUNCTION
02 ILLEGAL DATA ADDRESS
03 ILLEGAL DATA VALUE
04 SERVER DEVICE FAILURE

&nbsp;

下一篇將介紹Modbus的兩種傳輸模式，RTU跟ASCII

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>483</wp:post_id>
		<wp:post_date>2016-09-16 20:12:28</wp:post_date>
		<wp:post_date_gmt>2016-09-16 12:12:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>modbus-1-%e8%b3%87%e6%96%99%e7%b5%90%e6%a7%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="iot"><![CDATA[IoT]]></category>
		<category domain="post_tag" nicename="modbus"><![CDATA[modbus]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="%e5%85%b6%e4%bb%96%e5%b0%88%e6%a1%88"><![CDATA[其他專案]]></category>
		<category domain="post_tag" nicename="%e5%b7%a5%e5%85%b7%e6%a9%9f"><![CDATA[工具機]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[26886739795]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>%e6%93%b7%e5%8f%96</title>
		<link>https://team6612.wordpress.com/2016/09/16/modbus-1-%e8%b3%87%e6%96%99%e7%b5%90%e6%a7%8b/%e6%93%b7%e5%8f%96-5/</link>
		<pubDate>Fri, 16 Sep 2016 03:56:00 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">http://team6612.files.wordpress.com/2016/09/e693b7e58f964.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>548</wp:post_id>
		<wp:post_date>2016-09-16 11:56:00</wp:post_date>
		<wp:post_date_gmt>2016-09-16 03:56:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>%e6%93%b7%e5%8f%96-5</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>483</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://team6612.files.wordpress.com/2016/09/e693b7e58f964.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/c54/103432846/files/2016/09/e693b7e58f964.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:690;s:6:"height";i:497;s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/c54/103432846/files/2016/09/e693b7e58f964.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:76847;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>又見課程爬蟲 (1)</title>
		<link>https://team6612.wordpress.com/2017/01/18/%e5%8f%88%e8%a6%8b%e8%aa%b2%e7%a8%8b%e7%88%ac%e8%9f%b2-1/</link>
		<pubDate>Tue, 17 Jan 2017 17:26:26 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=622</guid>
		<description></description>
		<content:encoded><![CDATA[首先是久違的發文www雖然應該沒人看（

這學期應該是我大學最後一次選課，課程爬蟲這鬼東西我寫了不下三次了，第一次是用C#寫，那也是我第一次寫爬蟲，第二次是上次為了寫出漂亮的課程查詢（最後也沒多漂亮）而寫，然後就是這次了，這次是想要寫課表預排，浪打port過來的那個掛了，沒詳細去問發生什麼事情，不過那個也不是說非常好用，於是就又挖了個坑跳。

第二次的時候爬蟲是用node寫的，那次只有把系所代碼存起來而已，課程列表是即時爬的，但使用經驗非常的差，因為學校的網站load很慢，加上node爬蟲也沒有特別快，列表載入的延遲都是以數秒計算的，所以這次想要嘗試把資料存進資料庫，我選了之前一直很想用看看的mongodb，理所當然爬蟲語言還是選node，雖然用的語言一樣但是我重寫了，因為覺得之前寫得不是太漂亮。

至於我花了兩個小時接近快寫完的時候開始後悔為什麼要用node又是另一個故事了，文章結尾在講www

這次就來做個成大課程查詢的爬蟲筆記，repo的連結<a href="https://github.com/ccns/ncku-course-crawler">在這</a>

node的爬蟲需要兩個套件：<code>request</code> <code>cheerio</code>

request用來載入頁面，cheerio則可以讓你用和jquery幾乎完全相容的語法寫爬蟲

安裝

[code lang=bash]
npm install request cheerio
[/code]

基本使用

[code lang=javascript]
var request = require(&quot;request&quot;);
var cheerio = require(&quot;cheerio&quot;);

request(url, function(err, res, body) {
if(!err &amp;&amp; res.statusCode == 200) {
console.log(body);
var $ = cheerio.load(body);
var div = $(&quot;div&quot;).text();
console.log(div);
}
});
[/code]

基本上大致上使用的套件已經介紹完畢，沒錯，用node寫爬蟲就是這麼簡單，剩下就是jquery的事了

因為語法跟函式和jquery幾乎是一樣的，所以我習慣直接先用web console試jquery，然後再貼到node裡面
<img src="http://i.imgur.com/dPzpGhS.png" alt="" />

分享一下我用了哪些selector爬到需要的資訊

首先系所代碼是從<a href="http://course-query.acad.ncku.edu.tw/qry/index.php">首頁</a>爬的

<code>var lis = $("#dept_list li")</code>可以爬到12學院的列表，然後神奇的地方就來了，li裡面居然是class名稱是theader跟tbody的div，要不全部用div，要不都用ul&gt;li，還是第一次看到這樣寫的

接著遍歷12個學院列表可以得到各學院的系所列表，然後從列表的連結中擷取系所代碼

[code lang=javascript]
var as = $(li).find(&quot;.dept a&quot;);
for (var i=0; i&lt;as.length; i++) {
  var a = $(as[i]).attr(&quot;href&quot;).split(&quot;=&quot;)[1]; //?dept_no=XX
}
[/code]

因為這份系所列表還要留著後面取得課程列表的，為了避免callback hell我這次嘗試使用了promise，語法如下

[code lang=javascript]
function getDeptNo() {
  return new Promise(function(resolve, reject) {
    do crawler ...
    resolve(result)
  }
}

getDeptNo().then(function(depts) {
  console.log(depts)
})
[/code]

簡單講就是本來return是執行callback function，改成return一個promise，本來要吃進callback function的結果餵給resolve，這樣結果就會被餵進後面的then裡面，不過到這邊還沒顯現出promise可避免callback function的特性，如果有興趣可以參考<a href="http://huli.logdown.com/posts/292655-javascript-promise-generator-async-es6">這篇</a>

然後是爬課程列表，課程列表是透過餵不同的dept_no到這裡<a href="http://course-query.acad.ncku.edu.tw/qry/qry001.php?dept_no=E1">http://course-query.acad.ncku.edu.tw/qry/qry001.php?dept_no=E1</a>取得的（話說首頁點擊連結之後是ajax載入這個頁面的內容，根本就是個完整頁面了，到底ajax目的是什麼啦）

<code>$("tr[class^=course_]")</code>首先把一行行的課程資料爬出來，這裡用了一個之前沒用過的selector

<code>class^=course_</code>意思是以course_開頭的class，因為好像不同年級會用不同的class名，一樣意味不明，style沒差，也沒有什麼js event啊

接著遍歷每個column把需要的資料取出來並做一些前處理，比較怪的地方是有些欄位會有一大堆多餘的空白，還要把那些東西濾掉，例如教室

[code lang=javascript]
var classroom = $(tds).eq(17).text().replace(/\s+/, &quot; &quot;);
[/code]

另外其實這個頁面有兩個蠻有用的連結，一個是課程地圖的連結，有些比較認真的老師會放一些課程大綱在裡面供學生參考，另外一個是這邊還會有該課程的moodle網址（不管老師有沒有開都會有連結，只是點進去會說未開放）

[code lang=javascript]
var map_url = $(tds).eq(10).find(&quot;a&quot;).attr(&quot;href&quot;);
var moodle_url = &quot;http://course-query.acad.ncku.edu.tw/qry/&quot; + $(tds).eq(18).find(&quot;a&quot;).attr(&quot;href&quot;);
[/code]

接著把完整我爬了哪些欄位貼出來好了，希望不會太佔版面（

[code lang=javascript]
          var dept_no = $(tds).eq(1).text();
          var course_no = $(tds).eq(2).text();
          var code = $(tds).eq(3).text();
          var classes = $(tds).eq(5).text().replace(/\s+/, &quot;&quot;);
          var year = $(tds).eq(6).text();
          var name = $(tds).eq(10).text();
          var map_url = $(tds).eq(10).find(&quot;a&quot;).attr(&quot;href&quot;);
          map_url = typeof map_url === &#039;undefined&#039;? &#039;&#039;: map_url;
          var required = $(tds).eq(11).text();
          var credit = $(tds).eq(12).text();
          var teacher = $(tds).eq(13).text();
          var selected = $(tds).eq(14).text();
          var remain = $(tds).eq(15).text();
          var time = $(tds).eq(16).text();
          var classroom = $(tds).eq(17).text().replace(/\s+/, &quot; &quot;);
          var memo = $(tds).eq(18).text();
          var moodle_url = &quot;http://course-query.acad.ncku.edu.tw/qry/&quot; + $(tds).eq(18).find(&quot;a&quot;).attr(&quot;href&quot;);
          var limit = $(tds).eq(19).text().replace(/\s+\//, &quot;/&quot;);
[/code]

兩個都寫完了，照理講可以開始爬然後寫進資料庫了

才怪

接下來才是惡夢的開始，首先是學校網站真的載入很慢，常常載到timeout，我不敢想像跑全校這麼多系所要花多久，如果timeout又要另外處理，要重試嗎？還是就跳過然後記起來下次重跑？超麻煩的啦

另外就是雖然有promise，但是還是要寫很多return then，我要traverse這麼多系所，總不可能一個一個寫return then吧，據說可以用generator來解決這個問題，讓他看起來就像sync的程式一樣，另一個解決方案是就不管了，讓他們同時執行然後各自寫進db，mongodb的話應該可以做到這樣的事情

如果用python就不會有async的問題啊...而且速度應該會比node快上許多，我到底為什麼堅持用node呢？

不過剛想想好像還是有辦法解決的，暫且還是先想辦法用node爬看看吧]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>622</wp:post_id>
		<wp:post_date>2017-01-18 01:26:26</wp:post_date>
		<wp:post_date_gmt>2017-01-17 17:26:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%8f%88%e8%a6%8b%e8%aa%b2%e7%a8%8b%e7%88%ac%e8%9f%b2-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="course"><![CDATA[course]]></category>
		<category domain="post_tag" nicename="crawler"><![CDATA[crawler]]></category>
		<category domain="post_tag" nicename="%e7%88%ac%e8%9f%b2"><![CDATA[爬蟲]]></category>
		<category domain="category" nicename="%e7%b6%b2%e9%a0%81"><![CDATA[網頁]]></category>
		<category domain="post_tag" nicename="%e8%aa%b2%e7%a8%8b"><![CDATA[課程]]></category>
		<category domain="post_tag" nicename="ncku"><![CDATA[ncku]]></category>
		<category domain="post_tag" nicename="node"><![CDATA[Node]]></category>
		<category domain="category" nicename="%e5%be%8c%e7%ab%af"><![CDATA[後端]]></category>
		<category domain="category" nicename="%e6%88%90%e5%a4%a7"><![CDATA[成大]]></category>
		<category domain="category" nicename="%e6%88%90%e5%a4%a7%e8%aa%b2%e7%a8%8b%e7%88%ac%e8%9f%b2"><![CDATA[成大課程爬蟲]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<category domain="category" nicename="%e4%bd%9c%e5%93%81"><![CDATA[作品]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[858211505]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>又見課程爬蟲 (2) - JavaScript Promise &#038; Generator</title>
		<link>https://team6612.wordpress.com/2017/01/21/%e5%8f%88%e8%a6%8b%e8%aa%b2%e7%a8%8b%e7%88%ac%e8%9f%b2-2-javascript-promise-generator/</link>
		<pubDate>Sat, 21 Jan 2017 11:55:10 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=716</guid>
		<description></description>
		<content:encoded><![CDATA[今天居然用node把爬蟲寫出來了，覺得超不可思議的wwww

基本上爬蟲用同步的語言來寫會比較順暢一點，因為很常前後的步驟是有關連的，例如說要等到網頁整個載入完成才能開始爬資料，其實本來選js就是想試試看promise的用法，但是寫完之後還是奉勸大家，歹路不通走orz

這篇就來分享一下最後我使用的架構

promise如同前一篇簡介，可以將callback function從函式中抽離出來，避免層層堆疊的callback hell，promise寫出來的code大致上會長這樣(內容並非實際的code，只是示意而已)

[code lang="javascript"]
getDeptList().then((deptList) =&gt; {
  return storeToDb(deptList);
}).then((result) =&gt; {
  if (result==&quot;success&quot;)
    console.log(&quot;success!&quot;)
});
[/code]

邏輯是，取得系所列表之後在將列表存入db中，並檢查是否儲存成功

如果是同步語言，可能只要寫三行就好，因為下一行會等上一行做完才繼續做，資料的先後關係不會被打亂

[code lang="python"]
deptList = getDeptList()
result = storeToDb(deptList)
if (result==&quot;success&quot;)
  print(&quot;success!&quot;)
[/code]

這樣的寫法你用js跑跑看就會知道，getDeptList還沒執行完return，storeToDb就接著執行，也就讀不到deptList真正的值（一般來說會變成undefined），js會有這樣的設計據說是因為網頁比較重視載入的速度，如果說因為某行指令卡住的話會導致整個頁面卡在那邊，就像程式沒有回應那樣

所以過去的js會使用callback function來解決這個問題，但如果你的先後次序有很多層的話，就會變成callback層層堆疊，就是所謂的callback hell，有興趣可以去google看看這個詞

而promise讓callback可以不用寫在函式的參數中，而是丟給promise的一個method叫做then，當promise object執行完之後會去call then裡面的函式，然後這個函式可以回傳另外一個promise object，在繼續接then，如此一來callback都會在同一層，不會發生callback裡面還有callback的狀況

但就算如此then一多起來還是很可怕，在es7新增了async/await，寫起來感覺就像同步的程式一樣，簡潔有利，es6則有另外的解決方案: generator

在上一篇提到的(這篇)[http://huli.logdown.com/posts/292655-javascript-promise-generator-async-es6]有提到詳細的用法跟邏輯，可以去看看

generator是一種function，特色是可以執行到一半跳出去，然後再從跳出的點回來繼續執行，也可以中途把值進來使用

宣告generator function的方式如下

[code lang="javascript"]
function* run() {
  var a = 6;
  var b = yield a;
}
[/code]

呼叫時大概是這種感覺

[code lang="javascript"]
var gen = run();
gen.next().value; // 6
[/code]

只要注意一下執行順序應該很好理解，第一次呼叫該function會回傳一個generator物件，然後呼叫<code>next()</code>開始執行函式，跑到關鍵字<code>yield</code>的地方停下來，並把yield後方的值回傳出來，可以透過<code>.value</code>把值取出來，此時函式會卡在yield的地方不動，直到下次呼叫<code>next()</code>

除了把值從generator裡面丟出來之外，也可以把值從外面丟進去，呼叫<code>next()</code>時將要傳入的值餵給第一個參數<code>next(value)</code>，會回丟到上一次停下來的yield

[code lang="javascript"]
function* run() {
  var a = 6;
  var b = yield a; // b = 6
}

var gen = run();
var v = gen.next().value; // 6
gen.next(v);
[/code]

透過generator不執行next()就不會繼續往下執行的特性可以寫出很類似同步的效果，詳細請參考上面提到的(這篇)[http://huli.logdown.com/posts/292655-javascript-promise-generator-async-es6]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>716</wp:post_id>
		<wp:post_date>2017-01-21 19:55:10</wp:post_date>
		<wp:post_date_gmt>2017-01-21 11:55:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%8f%88%e8%a6%8b%e8%aa%b2%e7%a8%8b%e7%88%ac%e8%9f%b2-2-javascript-promise-generator</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%b6%b2%e9%a0%81"><![CDATA[網頁]]></category>
		<category domain="category" nicename="node"><![CDATA[Node]]></category>
		<category domain="category" nicename="%e5%be%8c%e7%ab%af"><![CDATA[後端]]></category>
		<category domain="category" nicename="%e6%88%90%e5%a4%a7"><![CDATA[成大]]></category>
		<category domain="category" nicename="%e6%88%90%e5%a4%a7%e8%aa%b2%e7%a8%8b%e7%88%ac%e8%9f%b2"><![CDATA[成大課程爬蟲]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<category domain="category" nicename="%e4%bd%9c%e5%93%81"><![CDATA[作品]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[997330311]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Daniel Chen]]></wp:comment_author>
			<wp:comment_author_email>team6612@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://team6612.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>61.227.244.110</wp:comment_author_IP>
			<wp:comment_date>2017-01-21 20:01:03</wp:comment_date>
			<wp:comment_date_gmt>2017-01-21 12:01:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[wordpress的markdown炸掉了，連結自己複製貼上吧（]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>98075262</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1485000064]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1485000064.6675319671630859375;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"team6612";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1485000065]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>comment_like_count</wp:meta_key>
				<wp:meta_value><![CDATA[1]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>又見課程爬蟲 (3) - 還是用python吧。</title>
		<link>https://team6612.wordpress.com/2017/01/21/%e5%8f%88%e8%a6%8b%e8%aa%b2%e7%a8%8b%e7%88%ac%e8%9f%b2-3-%e9%82%84%e6%98%af%e7%94%a8python%e5%90%a7%e3%80%82/</link>
		<pubDate>Sat, 21 Jan 2017 12:28:06 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=824</guid>
		<description></description>
		<content:encoded><![CDATA[本來第三篇要寫mongodb的，但是今天沒心情寫（？

上一篇提到我好不容易把爬蟲用node搞出來了，但因為還是不太熟promise的關係，加上db操作之後還是碰到了一些問題，大崩潰Orz

於是~~我一氣之下就把整個專案砍了改用python寫~~我想了一下，會造成異步處理困難主要是因為http request的延遲跟不上，檔案還沒載完、爬蟲還沒跑完，就要寫入資料庫，我想了一個方法來解決這個問題，就是先把頁面都下載下來然後再跑爬蟲，用檔案IO的方式延遲會比較小一點

雖然下載檔案沒有先後次序的問題，但我想試試看python的multithreading所以就用python寫了，只有用到一個額外函式庫叫requests，可以簡化送http reqests的操作（原本的話要用內建的urllib來操作，比較不值關），事先先把系所列表先寫到一個檔案裡面，讀出來之後開multithreading去下載檔案

這篇就簡介一下threading的用法吧

開n個thread來跑run這個function

[code lang=python]
import threading

def run():
  do something ...

for i in range(1:n)
  threading.Thread(target=run).start()
[/code]

如果要傳參數的話，可以用args這個參數

[code lang=python]
import threading

def run(a1):
  do something ...

for i in range(1:n)
  threading.Thread(target=run, args=(a1,)).start()
[/code]

注意<code>(a1,)</code>後面的逗點，那是必要的，因為args是吃tuple，加逗點才能宣告成tuple，不然括號會變成是statement

本來還想做內容更新檢查的，就是要寫入檔案之前先檢查是否內容有變更，原本想用hash來比對，但是後來想想檔案都載下來了才去比對否有更新好像沒什麼意義，直接覆蓋掉也不會怎樣（目前資料庫更新也是這麼做，每次更新都把過去的資料蓋掉，不過資料庫那邊好像比較值得做這件事）

另外選課系統的首頁每次刷新會有些許的內容差異這點也很令人崩潰（據說是有設計分流才會這樣），最後索性就不做內容比對了

到這邊好像蠻順利的，但是學校的網站什麼時候給你驚喜你不會知道www，課程查詢的頁面不知道為什麼有時後會request timeout，過一陣子之後重連又正常，如果這是刻意設計的話應該是防止ddos的機制吧？希望是刻意設計的www

這個問題我的解決方式是將還沒下載到檔案的系所代碼存起來，然後寫shell script來跑下載器並設定執行時間上限，超過就重新執行，第二次以後讀的系所代碼列表就會是retry的列表，一直跑到全部都跑完為止，然後再執行node寫的那個爬蟲

目前測試完整流整ok，然後設定每個禮拜更新一次資料庫這樣]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>824</wp:post_id>
		<wp:post_date>2017-01-21 20:28:06</wp:post_date>
		<wp:post_date_gmt>2017-01-21 12:28:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%8f%88%e8%a6%8b%e8%aa%b2%e7%a8%8b%e7%88%ac%e8%9f%b2-3-%e9%82%84%e6%98%af%e7%94%a8python%e5%90%a7%e3%80%82</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%b6%b2%e9%a0%81"><![CDATA[網頁]]></category>
		<category domain="category" nicename="%e8%aa%b2%e7%a8%8b%e6%9f%a5%e8%a9%a2%e7%be%8e%e5%8c%96"><![CDATA[課程查詢美化]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="%e5%be%8c%e7%ab%af"><![CDATA[後端]]></category>
		<category domain="category" nicename="%e6%88%90%e5%a4%a7"><![CDATA[成大]]></category>
		<category domain="category" nicename="%e6%88%90%e5%a4%a7%e8%aa%b2%e7%a8%8b%e7%88%ac%e8%9f%b2"><![CDATA[成大課程爬蟲]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<category domain="category" nicename="%e4%bd%9c%e5%93%81"><![CDATA[作品]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[998095294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[98075262]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>又見課程爬蟲 (4) – mongo-connector</title>
		<link>https://team6612.wordpress.com/2017/02/07/%e5%8f%88%e8%a6%8b%e8%aa%b2%e7%a8%8b%e7%88%ac%e8%9f%b2-4-mongo-connector/</link>
		<pubDate>Tue, 07 Feb 2017 14:33:57 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=880</guid>
		<description></description>
		<content:encoded><![CDATA[最近在調整作息，但還是有時候不小心寫一個小功能就弄到很晚，這裡的紀錄進度落後太多。

先紀錄一些零碎的事項，然後列一些需要詳細研究的東西在這篇。

上一篇之後增加的進度大致上有以下
- 重構react的code（更了解react的運作機制以及alt的使用方法）
- 增加時間篩選（重新設計了課程時間的儲存格式以利比較）
- 增加搜尋功能（用mongo-connector整合elasticsearch作為搜尋引擎）
- 重構爬蟲的code

這次在整合搜尋功能的時候，雖然之前在測試elasticsearch的時候已經設定過了
但重開機之後好像就跑掉了不知道為啥，於是我又重新設定了一遍
只是很多東西都忘記了又重投查一遍，這邊紀錄一下

elasticsearch是什麼有興趣的自己google看看
因為mongo本身的搜尋功能較弱，所以我用es來作為搜尋引擎
用mongo-connector為中介程式幫忙同步mongo跟es
es本身好像就已經可以作為資料庫使用了
但我對他的了解還不太夠，暫時還是先用mongo+es的方式

<h1>Installation</h1>

首先必須安裝mongo跟es，這邊就不詳細說明
按照官方的安裝指示安裝即可
不過這裡我還有一個問題沒解決
mongo跟es的開機啟動設定不好，等之後再來研究

<h2>mongo-connector</h2>

參考<a href="https://github.com/mongodb-labs/mongo-connector/wiki/Installation">官方文件</a>
我選擇透過github安裝

[code lang=bash]
cd your/installation/directory
git clone https://github.com/mongodb-labs/mongo-connector.git
cd mongo-connector
python setup.py install
[/code]

<h1>Configurations</h1>

參考<a href="https://github.com/mongodb-labs/mongo-connector/wiki/Getting-Started">Getting Started</a>

<h2>mongodb</h2>

要先設定replica set
官方的教學<a href="https://docs.mongodb.com/manual/tutorial/deploy-replicaset/">在這</a>，還沒有詳細讀過
我用mongo-connector給的指令去下會失敗，我自己各方查找勉強設定到可以用
但我不知道這個步驟詳細在設定什麼，推測replica應該是建立分散式的節點
mongo-connector貌是透過replica的推播事件來同步資料，所以資料有更新才會進行同步
設定方法如下

首先打開<code>/etc/mongod.conf</code>，增加以下設定

[code lang=text]
replication:
  replSetName: myDevReplSet
[/code]

重啟mongod並進入mongo shell

[code lang=bash]
$ sudo service mongod restart
$ mongo
[/code]

輸入以下指令

[code lang=javascript]
rs.initiate({
    _id : &quot;myDevReplSet&quot;,
     members : [
         {_id : 0, host : &quot;localhost:27017&quot;},
     ]
})
[/code]

完成

es跟mongo-connector都不用特別設定

#Start
接著就可以執行mongo-connector

[code lang=bash]
mongo-connector -m localhost:27017 -t localhost:9200 -d elastic2_doc_manage
[/code]

如果你的mongo有該auth的話

[code lang=bash]
mongo-connector -m localhost:27017 -t localhost:9200 -d elastic2_doc_manager --admin-username &lt;username&gt; --password &lt;password&gt;
[/code]

注意你登入的帳號要有repl的管理權限才行，repl相關的role可以參考<a href="https://docs.mongodb.com/manual/reference/built-in-roles/#cluster-administration-roles">這裡</a>，我是直接設定成clusterAdmin

啟動後就可以在mongo那邊insert資料進去測試看看會不會同步到es裡面了

以上

最後整理一下之後必須詳細研究的東西
- Mongo replication
- Elasticsearch query
- Mongo and ES 開機啟動

下一篇沒意外是寫mongo的一些設定，authentication還有remote connection等等]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>880</wp:post_id>
		<wp:post_date>2017-02-07 22:33:57</wp:post_date>
		<wp:post_date_gmt>2017-02-07 14:33:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%8f%88%e8%a6%8b%e8%aa%b2%e7%a8%8b%e7%88%ac%e8%9f%b2-4-mongo-connector</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%b6%b2%e9%a0%81"><![CDATA[網頁]]></category>
		<category domain="category" nicename="%e8%aa%b2%e7%a8%8b%e6%9f%a5%e8%a9%a2%e7%be%8e%e5%8c%96"><![CDATA[課程查詢美化]]></category>
		<category domain="category" nicename="node"><![CDATA[Node]]></category>
		<category domain="category" nicename="%e5%be%8c%e7%ab%af"><![CDATA[後端]]></category>
		<category domain="category" nicename="%e6%88%90%e5%a4%a7"><![CDATA[成大]]></category>
		<category domain="category" nicename="%e6%88%90%e5%a4%a7%e8%aa%b2%e7%a8%8b%e7%88%ac%e8%9f%b2"><![CDATA[成大課程爬蟲]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<category domain="category" nicename="%e4%bd%9c%e5%93%81"><![CDATA[作品]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[1597166693]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[98075262]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Daniel Chen]]></wp:comment_author>
			<wp:comment_author_email>team6612@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://team6612.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>36.239.250.126</wp:comment_author_IP>
			<wp:comment_date>2017-02-07 22:36:17</wp:comment_date>
			<wp:comment_date_gmt>2017-02-07 14:36:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[這篇其實還是憑印象寫的，如果有錯還麻煩有參考這篇的人回報一下]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>98075262</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1486478178.569036960601806640625;s:5:"event";s:9:"check-ham";s:4:"user";s:8:"team6612";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1486478178]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1486478178]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>css 筆記</title>
		<link>https://team6612.wordpress.com/?p=954</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=954</guid>
		<description></description>
		<content:encoded><![CDATA[ios momentum scroll
https://css-tricks.com/snippets/css/momentum-scrolling-on-ios-overflow-elements/

react serverside rendering window size detect
http://stackoverflow.com/questions/36862334/get-viewport-window-height-in-reactjs

FB OG
http://huli.logdown.com/posts/192832-fb-og-tag-notes
Debugger
https://developers.facebook.com/tools/debug/

mongo-connector 開機啟動
https://github.com/mongodb-labs/mongo-connector/wiki/Installation

重複問題是因為mongo-connector還沒同步完成就把程序關閉
必須改回daemon的方式才行

mongodb新增user
https://docs.mongodb.com/manual/reference/method/db.createUser/
db.createUser({ user: "",
  pwd: "",
  customData: {  },
  roles: [
    { role: "", db: "" },
    ...
  ]
})

elasticsearch ui
https://github.com/lmenezes/cerebro
https://github.com/mobz/elasticsearch-head#running-with-built-in-server

ssh tunneling
http://gwokae.mewggle.com/wordpress/2010/08/%E5%88%A9%E7%94%A8ssh-tunnel%E9%80%A3%E7%B7%9A%E8%87%B3%E5%85%A7%E9%83%A8%E7%B6%B2%E8%B7%AF/

execute module function from command line
http://stackoverflow.com/questions/30782693/run-function-in-script-from-command-line-node-js

elasticsearch shards?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>954</wp:post_id>
		<wp:post_date>2017-02-10 17:14:05</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a862b849fabce74e527621330626b8fa</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a862b849fabce74e527621330626b8fa</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_fe244187770124153e73b36c1725b57b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_fe244187770124153e73b36c1725b57b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_f2564e573096326eacc771de84cbcbd7</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_df4e15211dafb3e6c98108ced68d023f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_8cdc88449c06f9bc39530426d6fbe479</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9f77150cda6a9950e6be6a7574dd2c9a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_39a10ab2507f1d0b2e3e4c34f36d9d54</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_8f4a33fc939051db43544af938ad5144</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_828d21a719b1516ee8ecb5bbba3f8ec2</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4263514faa33e508b3b2228398a862e9</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>大報社!</title>
		<link>https://team6612.wordpress.com/2017/02/12/%e5%a4%a7%e5%a0%b1%e7%a4%be/</link>
		<pubDate>Sat, 11 Feb 2017 16:07:38 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=972</guid>
		<description></description>
		<content:encoded><![CDATA[http://大報社.club/
之前期中考的時候壓力太大買了這個網域，一直不知道要做什麼，結果前幾天腦洞大開刻了這鬼東西...

這篇記錄一些碰到的困難跟解決方法

首先是音樂撥放的部分，本來可以直接用html5 audio tag處理，但是這樣不潮
後來是找了方法自訂播放器的樣式
方法大致上是用range input當成播放進度條，然後再加上撥放跟暫停的按鈕
可以再另外做聲音大小聲，但我懶，不過之後如果哪天腦洞又開了會做個加速鈕

參考資料: <a href="https://webdesign.tutsplus.com/tutorials/create-a-customized-html5-audio-player--webdesign-7081">Create a Customized HTML5 Audio Player</a>

再來是大報社的那個拋射特效，我是自己寫的，用到之前上計圖的時候用OpenGL做動畫學到的方法
簡單來說我讓他每隔一小段時間更新一次位置，位置的計算就是用高中學過的平面運動方程式
然後再隨機指定初速度跟射出的圖片，這邊嘗試使用了閉包，以下是主要的程式

[code lang=javascript]
function parabola(v) {
  var random = Math.floor(Math.random()*shoots.length);
  var src = shoots[random];
  let img = $(&quot;&lt;img&gt;&quot;).attr(&#039;src&#039;,src).addClass(&#039;gif&#039;).css({width: &#039;100px&#039;, height: &#039;100px&#039;});
  $(&quot;body&quot;).append(img);
  img.offset({top: y0-50, left: x0-50});
  setTimeout(updatePos.bind(null, 1), 23);
  function updatePos(t) {
    var x = x0 + v[0]*t;
    var y = y0 - (v[1]*t + 1/2*g*t*t);
    img.offset({top: y-50, left: x-50});
    t = t+1;
    if(img.position().top &gt; window.innerHeight
        || img.position().top &lt; -img.height()
        || img.position().left &gt; window.innerWidth
        || img.position().left &lt; -img.width())
      img.remove();
    else
      setTimeout(updatePos.bind(null, t), 23);
  }
}
[/code]

設定的時間間隔是23毫秒，這是try and error測試出來看起來流暢的值
不過理論上人眼只要12fps以上就會感覺是順暢的動畫
一般電影是24fps，即1張畫面停留1000/24=41ms
但實際上我一開始設定33ms的時候感覺還是頓頓的不知道為什麼
可能gif本身會再拖累瀏覽器效能吧(不過更新頻率越高瀏覽器的負荷也越重，需在這之間取捨)

此外iOS的朋友們可能會發現目前網頁進去是沒有聲音的，因為iOS禁止自動撥放
還有就是按鈕連點會變成縮放，在iOS 10之後據說是為了增加網站的accessibility禁用了<code>user-scalable=no</code>....我心中是滿了問號阿!!! 參考資料: <a href="http://stackoverflow.com/questions/37808180/disable-viewport-zooming-ios-10-safari">css - disable viewport zooming iOS 10 safari? - Stack Overflow</a>

不過應該還是有辦法用javascript來解決掉，等有心情再說吧]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>972</wp:post_id>
		<wp:post_date>2017-02-12 00:07:38</wp:post_date>
		<wp:post_date_gmt>2017-02-11 16:07:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%a4%a7%e5%a0%b1%e7%a4%be</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%b6%b2%e9%a0%81"><![CDATA[網頁]]></category>
		<category domain="category" nicename="node"><![CDATA[Node]]></category>
		<category domain="category" nicename="%e5%85%b6%e4%bb%96%e5%b0%88%e6%a1%88"><![CDATA[其他專案]]></category>
		<category domain="category" nicename="%e5%89%8d%e7%ab%af"><![CDATA[前端]]></category>
		<category domain="category" nicename="%e5%be%8c%e7%ab%af"><![CDATA[後端]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<category domain="category" nicename="%e4%bd%9c%e5%93%81"><![CDATA[作品]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4f7ae75bce4de86d4117318311f8189f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_46062d2d9c70d6daea03bb077ea68470</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_e7f2b1d1a53941575d3fc65e095dc877</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[1747030907]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4adde48de93808ec4f419ad8ebbf87c9</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[98075262]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ACM note (1) queue &#038; priority queue</title>
		<link>https://team6612.wordpress.com/2017/02/18/acm-note-1-queue-priority-queue/</link>
		<pubDate>Sat, 18 Feb 2017 05:21:12 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=1022</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Queue</h1>

Queue即先進先出(FIFO list)，常用於排隊問題

STL內建之Queue:

[code lang=cpp]
// Member functions:
// push, pop, front, back, empty, size
#include&lt;queue&gt;
#include&lt;cstdio&gt;
using namespace std;
queue&lt;int&gt; q;
int main() {
    q.push(2);
    q.push(3);
    q.push(1);
    while(!q.empty()) {
        printf(&quot;%d\n&quot;, q.front());
        q.pop();
    }
}

[/code]

output

[code lang=text]
2
3
1
[/code]

<h1>Priority Queue</h1>

Priority Queue確保Queue裡面的元素為降序排列

STL內建的Priority Queue:

[code lang=cpp]
// Member functions:
// push, pop, top, empty, size
#include&lt;cstdio&gt;
#include&lt;queue&gt;
using namespace std;
priority_queue&lt;int&gt; prio;
int main() {
    prio.push(2);
    prio.push(3);
    prio.push(1);
    while(!prio.empty()) {
        printf(&quot;%d\n&quot;, prio.top());
        prio.pop();
    }
}

[/code]

output

[code lang=text]
3
2
1
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1022</wp:post_id>
		<wp:post_date>2017-02-18 13:21:12</wp:post_date>
		<wp:post_date_gmt>2017-02-18 05:21:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>acm-note-1-queue-priority-queue</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[1984637158]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ACM note (2) - set &#038; disjoint set</title>
		<link>https://team6612.wordpress.com/2017/02/18/acm-note-2-set-disjoint-set/</link>
		<pubDate>Sat, 18 Feb 2017 06:05:59 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=1049</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Set</h1>

set即集合，特性為集合中的元素不會重複

STL中的set有點像只有key的map，在新增元素的時候會進行排列，若新增重複的元素則忽略，但結構跟行為其實差蠻多的

[code lang="cpp"]
// Member functions:
// insert, erase, clear, find
#include &lt;iostream&gt;
#include &lt;set&gt;
using namespace std;
set&lt;int&gt; s;
int main ()
{
  s.insert(2);
  s.insert(3);
  s.insert(6);
  s.insert(1);
  s.insert(2);
 
  for(set&lt;int&gt;::iterator it=s.begin(); it!=s.end(); it++)
    cout &lt;&lt; *it &lt;&lt; endl;
  return 0;
}
[/code]

output

[code lang="text"]
1
2
3
6
[/code]

<h1>Disjoint set</h1>

互斥集合，即多個元素不互相重複的集合，例如班上的同學分組做報告，一個人只能在一個組，不過一組的人數可以不固定，分出來的組即為disjoint set

Disjoint set有三個操作，Union, Find, Split，分別為將兩個disjoint set合成一個、找尋某個元素位於哪個set、將一個set拆成兩個

Disjoint set可以用一般的陣列實做，將所有元素用正整數編號，並紀錄每個人所在的set，紀錄的方式為指定一個人作為該set的組長，組長的編號就是該set的名稱，初始化時將每個人都自己一組，自己為該組組長，union時將某一個組的組長指令給另外一組，find時遞迴找到set名稱和自己的編號一樣時即為組長

[code lang="cpp"]
#include&lt;iostream&gt;
using namespace std;
 
const int n = 10;
int root[n];
 
void Init()
{
  for(int i=0; i&lt;n; i++) root[i] = i;
}
 
int Find(int x)
{
  if(x==root[x]) return x;
  return root[x] = Find(root[x]);
}
 
int Union(int x, int y)
{
  if(Find(x) != Find(y))
    root[Find(y)] = Find(x);
}
 
int main()
{
  Init();
  Union(2, 3);
  Union(2, 4);
  Union(2, 5);
  Union(6, 7);
  Union(6, 8);
  Union(6, 9);
 
  int now = root[0];
  printf(&quot;{%d&quot;, 0);
  for(int i=1; i&lt;n; i++) {
    if(root[i] != now) {
      now = root[i];
      printf(&quot;} {%d&quot;, i);
    } else {
      printf(&quot;,%d&quot;, i);
    }
  }
  printf(&quot;}\n&quot;);
  return 0;
}
[/code]

output

[code lang="text"]
{0} {1} {2,3,4,5} {6,7,8,9}
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1049</wp:post_id>
		<wp:post_date>2017-02-18 14:05:59</wp:post_date>
		<wp:post_date_gmt>2017-02-18 06:05:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>acm-note-2-set-disjoint-set</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[1985442386]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ACM note (3) - string 建構子</title>
		<link>https://team6612.wordpress.com/2017/02/18/acm-note-3-string/</link>
		<pubDate>Sat, 18 Feb 2017 06:21:47 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=1099</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>String</h1>

這篇紀錄一些常用的STL字串操作，因為太多了所以分成幾篇列舉

<h2>Constructor</h2>

[code lang=cpp]
string s0(&quot;Initial string&quot;);         // Initial string
string s1;                           // (empty string)
string s2(s0);                       // Initial string
string s3(s0, 8, 3);                 // str
string s4(&quot;1234567890&quot;, 5);          // 12345
string s5(10, &#039;x&#039;);                  // xxxxxxxxxx
string s6(s0.begin(), s0.begin()+7); // Initial
[/code]

<h3>assign</h3>

assign可以為字串物件賦值，用法與constructor類似

[code lang=cpp]
string str;
str.assign(...);
[/code]

<h3>insert</h3>

inset在字串中指定位置插入字串，用法也與constructor相似

[code lang=cpp]
string str(&quot;Already have something.&quot;);
str.insert(pos, ...);
str.insert(iterator, ...);
[/code]

<h3>replace</h3>

replace取代指定範圍，用法與insert相似

[code lang=cpp]
string str(&quot;Already have something.&quot;);
str.insert(pos, len, ...);
str.insert(start_iter, end_iter, ...);
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1099</wp:post_id>
		<wp:post_date>2017-02-18 14:21:47</wp:post_date>
		<wp:post_date_gmt>2017-02-18 06:21:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>acm-note-3-string</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[1985752213]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[98075262]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ACM note (4) - string 基本操作</title>
		<link>https://team6612.wordpress.com/2017/02/18/acm-note-4-string-%e5%9f%ba%e6%9c%ac%e6%93%8d%e4%bd%9c/</link>
		<pubDate>Sat, 18 Feb 2017 07:43:29 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=1122</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>append</h2>

<h3>+=</h3>

[code lang=cpp]
string name (&quot;John&quot;);
string family (&quot;Smith&quot;);
name += &quot; K. &quot;;         // c-string
name += family;         // string
name += &#039;\n&#039;;           // character
[/code]

<h3>append</h3>

[code lang=cpp]
string name (&quot;John&quot;);
string family (&quot;Smith&quot;);
name.append(&quot; K. &quot;);    // c-string
name.append(family);    // string
name.append(&#039;\n&#039;);      // character
[/code]

<h3>push_back</h3>

[code lang=cpp]
string line (&quot;This is a line.&quot;);
line.push_back(&#039;\n&#039;);   // character
[/code]

<h2>erase</h2>

<h3>erase</h3>

[code lang=cpp]
str.erase(pos, len);
[/code]

<h3>pop_back</h3>

[code lang=cpp]
str.pop_back();
[/code]

<h2>find</h2>

<h3>find string</h3>

[code lang=cpp]
str.find(str2);  // return iterator
str.rfind(str2); // find last
[/code]

<h3>find charactor</h3>

[code lang=cpp]
str.find_first_of(char); // return iterator
str.find_last_of(char);  // find last
[/code]

<h2>substr</h2>

[code lang=cpp]
str.substr(pos, len);
str.substr(pos);      // from pos to end
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1122</wp:post_id>
		<wp:post_date>2017-02-18 15:43:29</wp:post_date>
		<wp:post_date_gmt>2017-02-18 07:43:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>acm-note-4-string-%e5%9f%ba%e6%9c%ac%e6%93%8d%e4%bd%9c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[1987285721]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[98075262]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ACM note (5) - string I/O</title>
		<link>https://team6612.wordpress.com/2017/02/18/acm-note-5-string-io/</link>
		<pubDate>Sat, 18 Feb 2017 07:44:42 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=1125</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>cin</h2>

[code lang=cpp]
string str;
cin &gt;&gt; str;
[/code]

<h2>getline</h2>

getline一次讀取一行，換行字元不會被存入，讀取成功時回傳cin物件，eof時回傳eofbit

[code lang=cpp]
string str;
getline(cin, str);
[/code]

<h2>iterator &amp; cout</h2>

[code lang=cpp]
string str (&quot;Test string&quot;);
for ( string::iterator it=str.begin(); it!=str.end(); ++it)
  cout &lt;&lt; *it;
cout &lt;&lt; &#039;\n&#039;;
cout &lt;&lt; str &lt;&lt; &#039;\n&#039;;
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1125</wp:post_id>
		<wp:post_date>2017-02-18 15:44:42</wp:post_date>
		<wp:post_date_gmt>2017-02-18 07:44:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>acm-note-5-string-io</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[1987308772]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[98075262]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ACM note (6) - string 比較</title>
		<link>https://team6612.wordpress.com/2017/02/18/acm-note-3-string-%e6%af%94%e8%bc%83/</link>
		<pubDate>Sat, 18 Feb 2017 07:45:21 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=1128</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>compare</h2>

<h3>==, !=, &gt;, &lt;, &gt;=, &lt;=</h3>

STL字串可使用比較運算子
等於和不等於為比較字串內容是否相等
大於小於為判斷最後一個匹配相等的字元位置大於或小於另一個字串

[code lang="cpp"]
string str1;
string str2;
str1 = &quot;apple&quot;;
str2 = &quot;apple&quot;;
if (str1==str2) cout &lt;&lt; &quot;str1 and str2 are equal\n&quot;;
str1 = &quot;red apple&quot;;
str2 = &quot;green apple&quot;;
if (str1!=str2) cout &lt;&lt; &quot;str1 and str2 are not equal\n&quot;;
str1 = &quot;apple&quot;;
str2 = &quot;applepie&quot;;
if (str1&lt; str2) cout &lt;&lt; &quot;str1 is less than str2\n&quot;;
str1 = &quot;applepie is good&quot;;
str2 = &quot;applepie&quot;;
if (str1&gt; str2) cout &lt;&lt; &quot;str1 is greater than str2\n&quot;;
[/code]

<h3>compare</h3>

比較運算子其實是根據compare的結果來判斷的，compare共有三個結果:
- 0 兩個字串相等
- &gt;0 去除相等部份後前者大於後者的長度
- 其實簡單來說就是去除相等的部份後兩者長度相減

[code lang="cpp"]
string str1;
string str2;
str1 = &quot;apple&quot;;
str2 = &quot;apple&quot;;
cout &lt;&lt; str1.compare(str2) &lt;&lt; '\n';
str1 = &quot;red apple&quot;;
str2 = &quot;green apple&quot;;
cout &lt;&lt; str1.compare(str2) &lt;&lt; '\n';
str1 = &quot;apple&quot;;
str2 = &quot;applepie&quot;;
cout &lt;&lt; str1.compare(str2) &lt;&lt; '\n';
str1 = &quot;applepie is good&quot;;
str2 = &quot;applepie&quot;;
cout &lt;&lt; str1.compare(str2) &lt;&lt; '\n';
[/code]

output

[code lang="text"]
0
11
-3
8
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1128</wp:post_id>
		<wp:post_date>2017-02-18 15:45:21</wp:post_date>
		<wp:post_date_gmt>2017-02-18 07:45:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>acm-note-3-string-%e6%af%94%e8%bc%83</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[1987321134]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[98075262]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ACM note (7) - stringstream</title>
		<link>https://team6612.wordpress.com/2017/02/18/acm-note-7-stringstream/</link>
		<pubDate>Sat, 18 Feb 2017 07:59:25 +0000</pubDate>
		<dc:creator>team6612</dc:creator>
		<guid isPermaLink="false">https://team6612.wordpress.com/?p=1137</guid>
		<description></description>
		<content:encoded><![CDATA[stringstream可以將string轉為iostream物件，用iostream的基本輸入輸出操作來操作string，可用於連續的字串轉整數

[code lang=cpp]
#include&lt;string&gt;
#include&lt;iostream&gt;
#include&lt;sstream&gt;
using namespace std;
int main()
{
  int i;
  string str(&quot;87 88 89&quot;);
  stringstream ss(str);
  while(ss &gt;&gt; i) cout &lt;&lt; i &lt;&lt; &quot;+1 = &quot; &lt;&lt; i+1 &lt;&lt; endl;
}
[/code]

output

[code lang=text]
87+1 = 88
88+1 = 89
89+1 = 90
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1137</wp:post_id>
		<wp:post_date>2017-02-18 15:59:25</wp:post_date>
		<wp:post_date_gmt>2017-02-18 07:59:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>acm-note-7-stringstream</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e9%a1%9e"><![CDATA[未分類]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[1987582457]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[98075262]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
